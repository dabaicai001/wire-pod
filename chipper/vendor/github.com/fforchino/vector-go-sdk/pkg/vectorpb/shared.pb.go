// Copyright (c) 2018 Anki, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License in the file LICENSE.txt or at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// External interface for robot <-> app and robot <-> sdk communication

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.4
// source: shared.proto

package vectorpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ProtocolVersionResponse_Result int32

const (
	ProtocolVersionResponse_UNSUPPORTED ProtocolVersionResponse_Result = 0
	ProtocolVersionResponse_SUCCESS     ProtocolVersionResponse_Result = 1
)

// Enum value maps for ProtocolVersionResponse_Result.
var (
	ProtocolVersionResponse_Result_name = map[int32]string{
		0: "UNSUPPORTED",
		1: "SUCCESS",
	}
	ProtocolVersionResponse_Result_value = map[string]int32{
		"UNSUPPORTED": 0,
		"SUCCESS":     1,
	}
)

func (x ProtocolVersionResponse_Result) Enum() *ProtocolVersionResponse_Result {
	p := new(ProtocolVersionResponse_Result)
	*p = x
	return p
}

func (x ProtocolVersionResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolVersionResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_proto_enumTypes[0].Descriptor()
}

func (ProtocolVersionResponse_Result) Type() protoreflect.EnumType {
	return &file_shared_proto_enumTypes[0]
}

func (x ProtocolVersionResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolVersionResponse_Result.Descriptor instead.
func (ProtocolVersionResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{1, 0}
}

type UserAuthenticationResponse_Code int32

const (
	UserAuthenticationResponse_UNAUTHORIZED UserAuthenticationResponse_Code = 0
	UserAuthenticationResponse_AUTHORIZED   UserAuthenticationResponse_Code = 1
)

// Enum value maps for UserAuthenticationResponse_Code.
var (
	UserAuthenticationResponse_Code_name = map[int32]string{
		0: "UNAUTHORIZED",
		1: "AUTHORIZED",
	}
	UserAuthenticationResponse_Code_value = map[string]int32{
		"UNAUTHORIZED": 0,
		"AUTHORIZED":   1,
	}
)

func (x UserAuthenticationResponse_Code) Enum() *UserAuthenticationResponse_Code {
	p := new(UserAuthenticationResponse_Code)
	*p = x
	return p
}

func (x UserAuthenticationResponse_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserAuthenticationResponse_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_proto_enumTypes[1].Descriptor()
}

func (UserAuthenticationResponse_Code) Type() protoreflect.EnumType {
	return &file_shared_proto_enumTypes[1]
}

func (x UserAuthenticationResponse_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserAuthenticationResponse_Code.Descriptor instead.
func (UserAuthenticationResponse_Code) EnumDescriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{8, 0}
}

type ProtocolVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion  int64 `protobuf:"varint,1,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	MinHostVersion int64 `protobuf:"varint,2,opt,name=min_host_version,json=minHostVersion,proto3" json:"min_host_version,omitempty"`
}

func (x *ProtocolVersionRequest) Reset() {
	*x = ProtocolVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolVersionRequest) ProtoMessage() {}

func (x *ProtocolVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolVersionRequest.ProtoReflect.Descriptor instead.
func (*ProtocolVersionRequest) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{0}
}

func (x *ProtocolVersionRequest) GetClientVersion() int64 {
	if x != nil {
		return x.ClientVersion
	}
	return 0
}

func (x *ProtocolVersionRequest) GetMinHostVersion() int64 {
	if x != nil {
		return x.MinHostVersion
	}
	return 0
}

type ProtocolVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      ProtocolVersionResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=Anki.Vector.external_interface.ProtocolVersionResponse_Result" json:"result,omitempty"`
	HostVersion int64                          `protobuf:"varint,2,opt,name=host_version,json=hostVersion,proto3" json:"host_version,omitempty"`
}

func (x *ProtocolVersionResponse) Reset() {
	*x = ProtocolVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolVersionResponse) ProtoMessage() {}

func (x *ProtocolVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolVersionResponse.ProtoReflect.Descriptor instead.
func (*ProtocolVersionResponse) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{1}
}

func (x *ProtocolVersionResponse) GetResult() ProtocolVersionResponse_Result {
	if x != nil {
		return x.Result
	}
	return ProtocolVersionResponse_UNSUPPORTED
}

func (x *ProtocolVersionResponse) GetHostVersion() int64 {
	if x != nil {
		return x.HostVersion
	}
	return 0
}

type ConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IsPrimary bool            `protobuf:"varint,2,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
}

func (x *ConnectionResponse) Reset() {
	*x = ConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionResponse) ProtoMessage() {}

func (x *ConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionResponse.ProtoReflect.Descriptor instead.
func (*ConnectionResponse) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectionResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ConnectionResponse) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

// Messages originating from the engine
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EventType:
	//	*Event_TimeStampedStatus
	//	*Event_Onboarding
	//	*Event_WakeWord
	//	*Event_AttentionTransfer
	//	*Event_RobotObservedFace
	//	*Event_RobotChangedObservedFaceId
	//	*Event_ObjectEvent
	//	*Event_StimulationInfo
	//	*Event_PhotoTaken
	//	*Event_RobotState
	//	*Event_CubeBattery
	//	*Event_KeepAlive
	//	*Event_ConnectionResponse
	//	*Event_JdocsChanged
	//	*Event_AlexaAuthEvent
	//	*Event_MirrorModeDisabled
	//	*Event_VisionModesAutoDisabled
	//	*Event_CheckUpdateStatusResponse
	//	*Event_UserIntent
	EventType isEvent_EventType `protobuf_oneof:"event_type"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{3}
}

func (m *Event) GetEventType() isEvent_EventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (x *Event) GetTimeStampedStatus() *TimeStampedStatus {
	if x, ok := x.GetEventType().(*Event_TimeStampedStatus); ok {
		return x.TimeStampedStatus
	}
	return nil
}

func (x *Event) GetOnboarding() *Onboarding {
	if x, ok := x.GetEventType().(*Event_Onboarding); ok {
		return x.Onboarding
	}
	return nil
}

func (x *Event) GetWakeWord() *WakeWord {
	if x, ok := x.GetEventType().(*Event_WakeWord); ok {
		return x.WakeWord
	}
	return nil
}

func (x *Event) GetAttentionTransfer() *AttentionTransfer {
	if x, ok := x.GetEventType().(*Event_AttentionTransfer); ok {
		return x.AttentionTransfer
	}
	return nil
}

func (x *Event) GetRobotObservedFace() *RobotObservedFace {
	if x, ok := x.GetEventType().(*Event_RobotObservedFace); ok {
		return x.RobotObservedFace
	}
	return nil
}

func (x *Event) GetRobotChangedObservedFaceId() *RobotChangedObservedFaceID {
	if x, ok := x.GetEventType().(*Event_RobotChangedObservedFaceId); ok {
		return x.RobotChangedObservedFaceId
	}
	return nil
}

func (x *Event) GetObjectEvent() *ObjectEvent {
	if x, ok := x.GetEventType().(*Event_ObjectEvent); ok {
		return x.ObjectEvent
	}
	return nil
}

func (x *Event) GetStimulationInfo() *StimulationInfo {
	if x, ok := x.GetEventType().(*Event_StimulationInfo); ok {
		return x.StimulationInfo
	}
	return nil
}

func (x *Event) GetPhotoTaken() *PhotoTaken {
	if x, ok := x.GetEventType().(*Event_PhotoTaken); ok {
		return x.PhotoTaken
	}
	return nil
}

func (x *Event) GetRobotState() *RobotState {
	if x, ok := x.GetEventType().(*Event_RobotState); ok {
		return x.RobotState
	}
	return nil
}

func (x *Event) GetCubeBattery() *CubeBattery {
	if x, ok := x.GetEventType().(*Event_CubeBattery); ok {
		return x.CubeBattery
	}
	return nil
}

func (x *Event) GetKeepAlive() *KeepAlivePing {
	if x, ok := x.GetEventType().(*Event_KeepAlive); ok {
		return x.KeepAlive
	}
	return nil
}

func (x *Event) GetConnectionResponse() *ConnectionResponse {
	if x, ok := x.GetEventType().(*Event_ConnectionResponse); ok {
		return x.ConnectionResponse
	}
	return nil
}

func (x *Event) GetJdocsChanged() *JdocsChanged {
	if x, ok := x.GetEventType().(*Event_JdocsChanged); ok {
		return x.JdocsChanged
	}
	return nil
}

func (x *Event) GetAlexaAuthEvent() *AlexaAuthEvent {
	if x, ok := x.GetEventType().(*Event_AlexaAuthEvent); ok {
		return x.AlexaAuthEvent
	}
	return nil
}

func (x *Event) GetMirrorModeDisabled() *MirrorModeDisabled {
	if x, ok := x.GetEventType().(*Event_MirrorModeDisabled); ok {
		return x.MirrorModeDisabled
	}
	return nil
}

func (x *Event) GetVisionModesAutoDisabled() *VisionModesAutoDisabled {
	if x, ok := x.GetEventType().(*Event_VisionModesAutoDisabled); ok {
		return x.VisionModesAutoDisabled
	}
	return nil
}

func (x *Event) GetCheckUpdateStatusResponse() *CheckUpdateStatusResponse {
	if x, ok := x.GetEventType().(*Event_CheckUpdateStatusResponse); ok {
		return x.CheckUpdateStatusResponse
	}
	return nil
}

func (x *Event) GetUserIntent() *UserIntent {
	if x, ok := x.GetEventType().(*Event_UserIntent); ok {
		return x.UserIntent
	}
	return nil
}

type isEvent_EventType interface {
	isEvent_EventType()
}

type Event_TimeStampedStatus struct {
	TimeStampedStatus *TimeStampedStatus `protobuf:"bytes,1,opt,name=time_stamped_status,json=timeStampedStatus,proto3,oneof"`
}

type Event_Onboarding struct {
	Onboarding *Onboarding `protobuf:"bytes,2,opt,name=onboarding,proto3,oneof"`
}

type Event_WakeWord struct {
	WakeWord *WakeWord `protobuf:"bytes,3,opt,name=wake_word,json=wakeWord,proto3,oneof"`
}

type Event_AttentionTransfer struct {
	AttentionTransfer *AttentionTransfer `protobuf:"bytes,4,opt,name=attention_transfer,json=attentionTransfer,proto3,oneof"`
}

type Event_RobotObservedFace struct {
	RobotObservedFace *RobotObservedFace `protobuf:"bytes,5,opt,name=robot_observed_face,json=robotObservedFace,proto3,oneof"`
}

type Event_RobotChangedObservedFaceId struct {
	RobotChangedObservedFaceId *RobotChangedObservedFaceID `protobuf:"bytes,6,opt,name=robot_changed_observed_face_id,json=robotChangedObservedFaceId,proto3,oneof"`
}

type Event_ObjectEvent struct {
	ObjectEvent *ObjectEvent `protobuf:"bytes,7,opt,name=object_event,json=objectEvent,proto3,oneof"`
}

type Event_StimulationInfo struct {
	StimulationInfo *StimulationInfo `protobuf:"bytes,8,opt,name=stimulation_info,json=stimulationInfo,proto3,oneof"`
}

type Event_PhotoTaken struct {
	PhotoTaken *PhotoTaken `protobuf:"bytes,9,opt,name=photo_taken,json=photoTaken,proto3,oneof"`
}

type Event_RobotState struct {
	RobotState *RobotState `protobuf:"bytes,10,opt,name=robot_state,json=robotState,proto3,oneof"`
}

type Event_CubeBattery struct {
	CubeBattery *CubeBattery `protobuf:"bytes,11,opt,name=cube_battery,json=cubeBattery,proto3,oneof"`
}

type Event_KeepAlive struct {
	// Used by Vector to verify the connection is still alive.
	KeepAlive *KeepAlivePing `protobuf:"bytes,12,opt,name=keep_alive,json=keepAlive,proto3,oneof"`
}

type Event_ConnectionResponse struct {
	ConnectionResponse *ConnectionResponse `protobuf:"bytes,13,opt,name=connection_response,json=connectionResponse,proto3,oneof"`
}

type Event_JdocsChanged struct {
	JdocsChanged *JdocsChanged `protobuf:"bytes,14,opt,name=jdocs_changed,json=jdocsChanged,proto3,oneof"`
}

type Event_AlexaAuthEvent struct {
	AlexaAuthEvent *AlexaAuthEvent `protobuf:"bytes,15,opt,name=alexa_auth_event,json=alexaAuthEvent,proto3,oneof"`
}

type Event_MirrorModeDisabled struct {
	MirrorModeDisabled *MirrorModeDisabled `protobuf:"bytes,16,opt,name=mirror_mode_disabled,json=mirrorModeDisabled,proto3,oneof"`
}

type Event_VisionModesAutoDisabled struct {
	VisionModesAutoDisabled *VisionModesAutoDisabled `protobuf:"bytes,17,opt,name=vision_modes_auto_disabled,json=visionModesAutoDisabled,proto3,oneof"`
}

type Event_CheckUpdateStatusResponse struct {
	CheckUpdateStatusResponse *CheckUpdateStatusResponse `protobuf:"bytes,18,opt,name=check_update_status_response,json=checkUpdateStatusResponse,proto3,oneof"`
}

type Event_UserIntent struct {
	UserIntent *UserIntent `protobuf:"bytes,19,opt,name=user_intent,json=userIntent,proto3,oneof"`
}

func (*Event_TimeStampedStatus) isEvent_EventType() {}

func (*Event_Onboarding) isEvent_EventType() {}

func (*Event_WakeWord) isEvent_EventType() {}

func (*Event_AttentionTransfer) isEvent_EventType() {}

func (*Event_RobotObservedFace) isEvent_EventType() {}

func (*Event_RobotChangedObservedFaceId) isEvent_EventType() {}

func (*Event_ObjectEvent) isEvent_EventType() {}

func (*Event_StimulationInfo) isEvent_EventType() {}

func (*Event_PhotoTaken) isEvent_EventType() {}

func (*Event_RobotState) isEvent_EventType() {}

func (*Event_CubeBattery) isEvent_EventType() {}

func (*Event_KeepAlive) isEvent_EventType() {}

func (*Event_ConnectionResponse) isEvent_EventType() {}

func (*Event_JdocsChanged) isEvent_EventType() {}

func (*Event_AlexaAuthEvent) isEvent_EventType() {}

func (*Event_MirrorModeDisabled) isEvent_EventType() {}

func (*Event_VisionModesAutoDisabled) isEvent_EventType() {}

func (*Event_CheckUpdateStatusResponse) isEvent_EventType() {}

func (*Event_UserIntent) isEvent_EventType() {}

type FilterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FilterList) Reset() {
	*x = FilterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterList) ProtoMessage() {}

func (x *FilterList) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterList.ProtoReflect.Descriptor instead.
func (*FilterList) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{4}
}

func (x *FilterList) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ListType:
	//	*EventRequest_WhiteList
	//	*EventRequest_BlackList
	ListType     isEventRequest_ListType `protobuf_oneof:"list_type"`
	ConnectionId string                  `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{5}
}

func (m *EventRequest) GetListType() isEventRequest_ListType {
	if m != nil {
		return m.ListType
	}
	return nil
}

func (x *EventRequest) GetWhiteList() *FilterList {
	if x, ok := x.GetListType().(*EventRequest_WhiteList); ok {
		return x.WhiteList
	}
	return nil
}

func (x *EventRequest) GetBlackList() *FilterList {
	if x, ok := x.GetListType().(*EventRequest_BlackList); ok {
		return x.BlackList
	}
	return nil
}

func (x *EventRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type isEventRequest_ListType interface {
	isEventRequest_ListType()
}

type EventRequest_WhiteList struct {
	WhiteList *FilterList `protobuf:"bytes,1,opt,name=white_list,json=whiteList,proto3,oneof"`
}

type EventRequest_BlackList struct {
	BlackList *FilterList `protobuf:"bytes,2,opt,name=black_list,json=blackList,proto3,oneof"`
}

func (*EventRequest_WhiteList) isEventRequest_ListType() {}

func (*EventRequest_BlackList) isEventRequest_ListType() {}

type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Event  *Event          `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{6}
}

func (x *EventResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EventResponse) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type UserAuthenticationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserSessionId []byte `protobuf:"bytes,1,opt,name=user_session_id,json=userSessionId,proto3" json:"user_session_id,omitempty"`
	ClientName    []byte `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
}

func (x *UserAuthenticationRequest) Reset() {
	*x = UserAuthenticationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthenticationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthenticationRequest) ProtoMessage() {}

func (x *UserAuthenticationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthenticationRequest.ProtoReflect.Descriptor instead.
func (*UserAuthenticationRequest) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{7}
}

func (x *UserAuthenticationRequest) GetUserSessionId() []byte {
	if x != nil {
		return x.UserSessionId
	}
	return nil
}

func (x *UserAuthenticationRequest) GetClientName() []byte {
	if x != nil {
		return x.ClientName
	}
	return nil
}

type UserAuthenticationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *ResponseStatus                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Code            UserAuthenticationResponse_Code `protobuf:"varint,2,opt,name=code,proto3,enum=Anki.Vector.external_interface.UserAuthenticationResponse_Code" json:"code,omitempty"`
	ClientTokenGuid []byte                          `protobuf:"bytes,3,opt,name=client_token_guid,json=clientTokenGuid,proto3" json:"client_token_guid,omitempty"`
}

func (x *UserAuthenticationResponse) Reset() {
	*x = UserAuthenticationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthenticationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthenticationResponse) ProtoMessage() {}

func (x *UserAuthenticationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthenticationResponse.ProtoReflect.Descriptor instead.
func (*UserAuthenticationResponse) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{8}
}

func (x *UserAuthenticationResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UserAuthenticationResponse) GetCode() UserAuthenticationResponse_Code {
	if x != nil {
		return x.Code
	}
	return UserAuthenticationResponse_UNAUTHORIZED
}

func (x *UserAuthenticationResponse) GetClientTokenGuid() []byte {
	if x != nil {
		return x.ClientTokenGuid
	}
	return nil
}

var File_shared_proto protoreflect.FileDescriptor

var file_shared_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x0e,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x63, 0x75, 0x62, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x61, 0x6c, 0x65, 0x78,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x69, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x69, 0x6e,
	0x48, 0x6f, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x17,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x22, 0x7b, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x92, 0x0e, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x63, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x00, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x09, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x57, 0x61, 0x6b, 0x65, 0x57, 0x6f, 0x72,
	0x64, 0x48, 0x00, 0x52, 0x08, 0x77, 0x61, 0x6b, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x62, 0x0a,
	0x12, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x63, 0x0a, 0x13, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x46, 0x61, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1e, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x48, 0x00, 0x52, 0x1a, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x10, 0x73,
	0x74, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x4d, 0x0a, 0x0b, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x75, 0x62, 0x65, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43,
	0x75, 0x62, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x75,
	0x62, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x0a, 0x6b, 0x65, 0x65,
	0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x09,
	0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x65, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x0d, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4a, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x10, 0x61, 0x6c, 0x65, 0x78, 0x61, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x41, 0x75, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x61, 0x6c, 0x65, 0x78, 0x61, 0x41, 0x75, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x66, 0x0a, 0x14, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x76, 0x0a, 0x1a, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x17, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x7c, 0x0a, 0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x0a, 0x0a,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xda,
	0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0a,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x22, 0x64, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f,
	0x02, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01,
	0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x6c, 0x61, 0x62,
	0x73, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shared_proto_rawDescOnce sync.Once
	file_shared_proto_rawDescData = file_shared_proto_rawDesc
)

func file_shared_proto_rawDescGZIP() []byte {
	file_shared_proto_rawDescOnce.Do(func() {
		file_shared_proto_rawDescData = protoimpl.X.CompressGZIP(file_shared_proto_rawDescData)
	})
	return file_shared_proto_rawDescData
}

var file_shared_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_shared_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_shared_proto_goTypes = []interface{}{
	(ProtocolVersionResponse_Result)(0),  // 0: Anki.Vector.external_interface.ProtocolVersionResponse.Result
	(UserAuthenticationResponse_Code)(0), // 1: Anki.Vector.external_interface.UserAuthenticationResponse.Code
	(*ProtocolVersionRequest)(nil),       // 2: Anki.Vector.external_interface.ProtocolVersionRequest
	(*ProtocolVersionResponse)(nil),      // 3: Anki.Vector.external_interface.ProtocolVersionResponse
	(*ConnectionResponse)(nil),           // 4: Anki.Vector.external_interface.ConnectionResponse
	(*Event)(nil),                        // 5: Anki.Vector.external_interface.Event
	(*FilterList)(nil),                   // 6: Anki.Vector.external_interface.FilterList
	(*EventRequest)(nil),                 // 7: Anki.Vector.external_interface.EventRequest
	(*EventResponse)(nil),                // 8: Anki.Vector.external_interface.EventResponse
	(*UserAuthenticationRequest)(nil),    // 9: Anki.Vector.external_interface.UserAuthenticationRequest
	(*UserAuthenticationResponse)(nil),   // 10: Anki.Vector.external_interface.UserAuthenticationResponse
	(*ResponseStatus)(nil),               // 11: Anki.Vector.external_interface.ResponseStatus
	(*TimeStampedStatus)(nil),            // 12: Anki.Vector.external_interface.TimeStampedStatus
	(*Onboarding)(nil),                   // 13: Anki.Vector.external_interface.Onboarding
	(*WakeWord)(nil),                     // 14: Anki.Vector.external_interface.WakeWord
	(*AttentionTransfer)(nil),            // 15: Anki.Vector.external_interface.AttentionTransfer
	(*RobotObservedFace)(nil),            // 16: Anki.Vector.external_interface.RobotObservedFace
	(*RobotChangedObservedFaceID)(nil),   // 17: Anki.Vector.external_interface.RobotChangedObservedFaceID
	(*ObjectEvent)(nil),                  // 18: Anki.Vector.external_interface.ObjectEvent
	(*StimulationInfo)(nil),              // 19: Anki.Vector.external_interface.StimulationInfo
	(*PhotoTaken)(nil),                   // 20: Anki.Vector.external_interface.PhotoTaken
	(*RobotState)(nil),                   // 21: Anki.Vector.external_interface.RobotState
	(*CubeBattery)(nil),                  // 22: Anki.Vector.external_interface.CubeBattery
	(*KeepAlivePing)(nil),                // 23: Anki.Vector.external_interface.KeepAlivePing
	(*JdocsChanged)(nil),                 // 24: Anki.Vector.external_interface.JdocsChanged
	(*AlexaAuthEvent)(nil),               // 25: Anki.Vector.external_interface.AlexaAuthEvent
	(*MirrorModeDisabled)(nil),           // 26: Anki.Vector.external_interface.MirrorModeDisabled
	(*VisionModesAutoDisabled)(nil),      // 27: Anki.Vector.external_interface.VisionModesAutoDisabled
	(*CheckUpdateStatusResponse)(nil),    // 28: Anki.Vector.external_interface.CheckUpdateStatusResponse
	(*UserIntent)(nil),                   // 29: Anki.Vector.external_interface.UserIntent
}
var file_shared_proto_depIdxs = []int32{
	0,  // 0: Anki.Vector.external_interface.ProtocolVersionResponse.result:type_name -> Anki.Vector.external_interface.ProtocolVersionResponse.Result
	11, // 1: Anki.Vector.external_interface.ConnectionResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	12, // 2: Anki.Vector.external_interface.Event.time_stamped_status:type_name -> Anki.Vector.external_interface.TimeStampedStatus
	13, // 3: Anki.Vector.external_interface.Event.onboarding:type_name -> Anki.Vector.external_interface.Onboarding
	14, // 4: Anki.Vector.external_interface.Event.wake_word:type_name -> Anki.Vector.external_interface.WakeWord
	15, // 5: Anki.Vector.external_interface.Event.attention_transfer:type_name -> Anki.Vector.external_interface.AttentionTransfer
	16, // 6: Anki.Vector.external_interface.Event.robot_observed_face:type_name -> Anki.Vector.external_interface.RobotObservedFace
	17, // 7: Anki.Vector.external_interface.Event.robot_changed_observed_face_id:type_name -> Anki.Vector.external_interface.RobotChangedObservedFaceID
	18, // 8: Anki.Vector.external_interface.Event.object_event:type_name -> Anki.Vector.external_interface.ObjectEvent
	19, // 9: Anki.Vector.external_interface.Event.stimulation_info:type_name -> Anki.Vector.external_interface.StimulationInfo
	20, // 10: Anki.Vector.external_interface.Event.photo_taken:type_name -> Anki.Vector.external_interface.PhotoTaken
	21, // 11: Anki.Vector.external_interface.Event.robot_state:type_name -> Anki.Vector.external_interface.RobotState
	22, // 12: Anki.Vector.external_interface.Event.cube_battery:type_name -> Anki.Vector.external_interface.CubeBattery
	23, // 13: Anki.Vector.external_interface.Event.keep_alive:type_name -> Anki.Vector.external_interface.KeepAlivePing
	4,  // 14: Anki.Vector.external_interface.Event.connection_response:type_name -> Anki.Vector.external_interface.ConnectionResponse
	24, // 15: Anki.Vector.external_interface.Event.jdocs_changed:type_name -> Anki.Vector.external_interface.JdocsChanged
	25, // 16: Anki.Vector.external_interface.Event.alexa_auth_event:type_name -> Anki.Vector.external_interface.AlexaAuthEvent
	26, // 17: Anki.Vector.external_interface.Event.mirror_mode_disabled:type_name -> Anki.Vector.external_interface.MirrorModeDisabled
	27, // 18: Anki.Vector.external_interface.Event.vision_modes_auto_disabled:type_name -> Anki.Vector.external_interface.VisionModesAutoDisabled
	28, // 19: Anki.Vector.external_interface.Event.check_update_status_response:type_name -> Anki.Vector.external_interface.CheckUpdateStatusResponse
	29, // 20: Anki.Vector.external_interface.Event.user_intent:type_name -> Anki.Vector.external_interface.UserIntent
	6,  // 21: Anki.Vector.external_interface.EventRequest.white_list:type_name -> Anki.Vector.external_interface.FilterList
	6,  // 22: Anki.Vector.external_interface.EventRequest.black_list:type_name -> Anki.Vector.external_interface.FilterList
	11, // 23: Anki.Vector.external_interface.EventResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	5,  // 24: Anki.Vector.external_interface.EventResponse.event:type_name -> Anki.Vector.external_interface.Event
	11, // 25: Anki.Vector.external_interface.UserAuthenticationResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	1,  // 26: Anki.Vector.external_interface.UserAuthenticationResponse.code:type_name -> Anki.Vector.external_interface.UserAuthenticationResponse.Code
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_shared_proto_init() }
func file_shared_proto_init() {
	if File_shared_proto != nil {
		return
	}
	file_behavior_proto_init()
	file_cube_proto_init()
	file_alexa_proto_init()
	file_messages_proto_init()
	file_settings_proto_init()
	file_extensions_proto_init()
	file_response_status_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_shared_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthenticationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthenticationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_shared_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Event_TimeStampedStatus)(nil),
		(*Event_Onboarding)(nil),
		(*Event_WakeWord)(nil),
		(*Event_AttentionTransfer)(nil),
		(*Event_RobotObservedFace)(nil),
		(*Event_RobotChangedObservedFaceId)(nil),
		(*Event_ObjectEvent)(nil),
		(*Event_StimulationInfo)(nil),
		(*Event_PhotoTaken)(nil),
		(*Event_RobotState)(nil),
		(*Event_CubeBattery)(nil),
		(*Event_KeepAlive)(nil),
		(*Event_ConnectionResponse)(nil),
		(*Event_JdocsChanged)(nil),
		(*Event_AlexaAuthEvent)(nil),
		(*Event_MirrorModeDisabled)(nil),
		(*Event_VisionModesAutoDisabled)(nil),
		(*Event_CheckUpdateStatusResponse)(nil),
		(*Event_UserIntent)(nil),
	}
	file_shared_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*EventRequest_WhiteList)(nil),
		(*EventRequest_BlackList)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shared_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shared_proto_goTypes,
		DependencyIndexes: file_shared_proto_depIdxs,
		EnumInfos:         file_shared_proto_enumTypes,
		MessageInfos:      file_shared_proto_msgTypes,
	}.Build()
	File_shared_proto = out.File
	file_shared_proto_rawDesc = nil
	file_shared_proto_goTypes = nil
	file_shared_proto_depIdxs = nil
}
