// Copyright (c) 2018 Anki, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License in the file LICENSE.txt or at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// External interface for robot <-> app and robot <-> sdk communication
// about the robot's navigational memory map.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.4
// source: nav_map.proto

package vectorpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Every tile in the nav map will be tagged with a content key referring to
// the different environmental elements that Vector can identify.
type NavNodeContentType int32

const (
	NavNodeContentType_NAV_NODE_UNKNOWN                     NavNodeContentType = 0
	NavNodeContentType_NAV_NODE_CLEAR_OF_OBSTACLE           NavNodeContentType = 1
	NavNodeContentType_NAV_NODE_CLEAR_OF_CLIFF              NavNodeContentType = 2
	NavNodeContentType_NAV_NODE_OBSTACLE_CUBE               NavNodeContentType = 3
	NavNodeContentType_NAV_NODE_OBSTACLE_PROXIMITY          NavNodeContentType = 4
	NavNodeContentType_NAV_NODE_OBSTACLE_PROXIMITY_EXPLORED NavNodeContentType = 5
	NavNodeContentType_NAV_NODE_OBSTACLE_UNRECOGNIZED       NavNodeContentType = 6
	NavNodeContentType_NAV_NODE_CLIFF                       NavNodeContentType = 7
	NavNodeContentType_NAV_NODE_INTERESTING_EDGE            NavNodeContentType = 8
	NavNodeContentType_NAV_NODE_NON_INTERESTING_EDGE        NavNodeContentType = 9
)

// Enum value maps for NavNodeContentType.
var (
	NavNodeContentType_name = map[int32]string{
		0: "NAV_NODE_UNKNOWN",
		1: "NAV_NODE_CLEAR_OF_OBSTACLE",
		2: "NAV_NODE_CLEAR_OF_CLIFF",
		3: "NAV_NODE_OBSTACLE_CUBE",
		4: "NAV_NODE_OBSTACLE_PROXIMITY",
		5: "NAV_NODE_OBSTACLE_PROXIMITY_EXPLORED",
		6: "NAV_NODE_OBSTACLE_UNRECOGNIZED",
		7: "NAV_NODE_CLIFF",
		8: "NAV_NODE_INTERESTING_EDGE",
		9: "NAV_NODE_NON_INTERESTING_EDGE",
	}
	NavNodeContentType_value = map[string]int32{
		"NAV_NODE_UNKNOWN":                     0,
		"NAV_NODE_CLEAR_OF_OBSTACLE":           1,
		"NAV_NODE_CLEAR_OF_CLIFF":              2,
		"NAV_NODE_OBSTACLE_CUBE":               3,
		"NAV_NODE_OBSTACLE_PROXIMITY":          4,
		"NAV_NODE_OBSTACLE_PROXIMITY_EXPLORED": 5,
		"NAV_NODE_OBSTACLE_UNRECOGNIZED":       6,
		"NAV_NODE_CLIFF":                       7,
		"NAV_NODE_INTERESTING_EDGE":            8,
		"NAV_NODE_NON_INTERESTING_EDGE":        9,
	}
)

func (x NavNodeContentType) Enum() *NavNodeContentType {
	p := new(NavNodeContentType)
	*p = x
	return p
}

func (x NavNodeContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavNodeContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_nav_map_proto_enumTypes[0].Descriptor()
}

func (NavNodeContentType) Type() protoreflect.EnumType {
	return &file_nav_map_proto_enumTypes[0]
}

func (x NavNodeContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NavNodeContentType.Descriptor instead.
func (NavNodeContentType) EnumDescriptor() ([]byte, []int) {
	return file_nav_map_proto_rawDescGZIP(), []int{0}
}

// An individual sample of vector's nav map.  This quad's size will vary and
// depends on the resolution the map requires to effectively identify
// boundaries in the environment.
type NavMapQuadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content   NavNodeContentType `protobuf:"varint,1,opt,name=content,proto3,enum=Anki.Vector.external_interface.NavNodeContentType" json:"content,omitempty"`
	Depth     uint32             `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	ColorRgba uint32             `protobuf:"varint,3,opt,name=color_rgba,json=colorRgba,proto3" json:"color_rgba,omitempty"`
}

func (x *NavMapQuadInfo) Reset() {
	*x = NavMapQuadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nav_map_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavMapQuadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavMapQuadInfo) ProtoMessage() {}

func (x *NavMapQuadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nav_map_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavMapQuadInfo.ProtoReflect.Descriptor instead.
func (*NavMapQuadInfo) Descriptor() ([]byte, []int) {
	return file_nav_map_proto_rawDescGZIP(), []int{0}
}

func (x *NavMapQuadInfo) GetContent() NavNodeContentType {
	if x != nil {
		return x.Content
	}
	return NavNodeContentType_NAV_NODE_UNKNOWN
}

func (x *NavMapQuadInfo) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *NavMapQuadInfo) GetColorRgba() uint32 {
	if x != nil {
		return x.ColorRgba
	}
	return 0
}

// General information about the nav map as a whole.
type NavMapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootDepth   int32   `protobuf:"varint,1,opt,name=root_depth,json=rootDepth,proto3" json:"root_depth,omitempty"`
	RootSizeMm  float32 `protobuf:"fixed32,2,opt,name=root_size_mm,json=rootSizeMm,proto3" json:"root_size_mm,omitempty"`
	RootCenterX float32 `protobuf:"fixed32,3,opt,name=root_center_x,json=rootCenterX,proto3" json:"root_center_x,omitempty"`
	RootCenterY float32 `protobuf:"fixed32,4,opt,name=root_center_y,json=rootCenterY,proto3" json:"root_center_y,omitempty"`
	RootCenterZ float32 `protobuf:"fixed32,5,opt,name=root_center_z,json=rootCenterZ,proto3" json:"root_center_z,omitempty"`
}

func (x *NavMapInfo) Reset() {
	*x = NavMapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nav_map_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavMapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavMapInfo) ProtoMessage() {}

func (x *NavMapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nav_map_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavMapInfo.ProtoReflect.Descriptor instead.
func (*NavMapInfo) Descriptor() ([]byte, []int) {
	return file_nav_map_proto_rawDescGZIP(), []int{1}
}

func (x *NavMapInfo) GetRootDepth() int32 {
	if x != nil {
		return x.RootDepth
	}
	return 0
}

func (x *NavMapInfo) GetRootSizeMm() float32 {
	if x != nil {
		return x.RootSizeMm
	}
	return 0
}

func (x *NavMapInfo) GetRootCenterX() float32 {
	if x != nil {
		return x.RootCenterX
	}
	return 0
}

func (x *NavMapInfo) GetRootCenterY() float32 {
	if x != nil {
		return x.RootCenterY
	}
	return 0
}

func (x *NavMapInfo) GetRootCenterZ() float32 {
	if x != nil {
		return x.RootCenterZ
	}
	return 0
}

// Requests nav map data from the robot at a specified maximum update frequency.
// Responses in the nav map stream may be sent less frequently if the robot does
// not consider there to be relevant new information.
type NavMapFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frequency float32 `protobuf:"fixed32,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *NavMapFeedRequest) Reset() {
	*x = NavMapFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nav_map_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavMapFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavMapFeedRequest) ProtoMessage() {}

func (x *NavMapFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nav_map_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavMapFeedRequest.ProtoReflect.Descriptor instead.
func (*NavMapFeedRequest) Descriptor() ([]byte, []int) {
	return file_nav_map_proto_rawDescGZIP(), []int{2}
}

func (x *NavMapFeedRequest) GetFrequency() float32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

// A full nav map sent from the robot.  It contains an origin_id that
// which can be compared against the robot's current origin_id, general
// info about the map, and a collection of quads representing the map's
// content.
type NavMapFeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginId  uint32            `protobuf:"varint,1,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	MapInfo   *NavMapInfo       `protobuf:"bytes,2,opt,name=map_info,json=mapInfo,proto3" json:"map_info,omitempty"`
	QuadInfos []*NavMapQuadInfo `protobuf:"bytes,3,rep,name=quad_infos,json=quadInfos,proto3" json:"quad_infos,omitempty"`
}

func (x *NavMapFeedResponse) Reset() {
	*x = NavMapFeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nav_map_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavMapFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavMapFeedResponse) ProtoMessage() {}

func (x *NavMapFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nav_map_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavMapFeedResponse.ProtoReflect.Descriptor instead.
func (*NavMapFeedResponse) Descriptor() ([]byte, []int) {
	return file_nav_map_proto_rawDescGZIP(), []int{3}
}

func (x *NavMapFeedResponse) GetOriginId() uint32 {
	if x != nil {
		return x.OriginId
	}
	return 0
}

func (x *NavMapFeedResponse) GetMapInfo() *NavMapInfo {
	if x != nil {
		return x.MapInfo
	}
	return nil
}

func (x *NavMapFeedResponse) GetQuadInfos() []*NavMapQuadInfo {
	if x != nil {
		return x.QuadInfos
	}
	return nil
}

var File_nav_map_proto protoreflect.FileDescriptor

var file_nav_map_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x61, 0x76, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22,
	0x93, 0x01, 0x0a, 0x0e, 0x4e, 0x61, 0x76, 0x4d, 0x61, 0x70, 0x51, 0x75, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x72, 0x67, 0x62, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x67, 0x62, 0x61, 0x22, 0xb9, 0x01, 0x0a, 0x0a, 0x4e, 0x61, 0x76, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x6d, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x4d, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x6f,
	0x6f, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x58, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x12, 0x22, 0x0a,
	0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x7a, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5a, 0x22, 0x31, 0x0a, 0x11, 0x4e, 0x61, 0x76, 0x4d, 0x61, 0x70, 0x46, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x22, 0xc7, 0x01, 0x0a, 0x12, 0x4e, 0x61, 0x76, 0x4d, 0x61, 0x70, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x76, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4d, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x76, 0x4d, 0x61, 0x70, 0x51, 0x75, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2a, 0xc8,
	0x02, 0x0a, 0x12, 0x4e, 0x61, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x56, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4e,
	0x41, 0x56, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x4f, 0x46,
	0x5f, 0x4f, 0x42, 0x53, 0x54, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4e,
	0x41, 0x56, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x4f, 0x46,
	0x5f, 0x43, 0x4c, 0x49, 0x46, 0x46, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x41, 0x56, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x42, 0x53, 0x54, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x55,
	0x42, 0x45, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x41, 0x56, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x4f, 0x42, 0x53, 0x54, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x49, 0x4d,
	0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x41, 0x56, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x4f, 0x42, 0x53, 0x54, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x49,
	0x4d, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x22, 0x0a, 0x1e, 0x4e, 0x41, 0x56, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x42, 0x53, 0x54,
	0x41, 0x43, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x56, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4c, 0x49, 0x46, 0x46, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x41, 0x56, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x44, 0x47, 0x45, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x41, 0x56, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x09, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d,
	0x64, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nav_map_proto_rawDescOnce sync.Once
	file_nav_map_proto_rawDescData = file_nav_map_proto_rawDesc
)

func file_nav_map_proto_rawDescGZIP() []byte {
	file_nav_map_proto_rawDescOnce.Do(func() {
		file_nav_map_proto_rawDescData = protoimpl.X.CompressGZIP(file_nav_map_proto_rawDescData)
	})
	return file_nav_map_proto_rawDescData
}

var file_nav_map_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nav_map_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_nav_map_proto_goTypes = []interface{}{
	(NavNodeContentType)(0),    // 0: Anki.Vector.external_interface.NavNodeContentType
	(*NavMapQuadInfo)(nil),     // 1: Anki.Vector.external_interface.NavMapQuadInfo
	(*NavMapInfo)(nil),         // 2: Anki.Vector.external_interface.NavMapInfo
	(*NavMapFeedRequest)(nil),  // 3: Anki.Vector.external_interface.NavMapFeedRequest
	(*NavMapFeedResponse)(nil), // 4: Anki.Vector.external_interface.NavMapFeedResponse
}
var file_nav_map_proto_depIdxs = []int32{
	0, // 0: Anki.Vector.external_interface.NavMapQuadInfo.content:type_name -> Anki.Vector.external_interface.NavNodeContentType
	2, // 1: Anki.Vector.external_interface.NavMapFeedResponse.map_info:type_name -> Anki.Vector.external_interface.NavMapInfo
	1, // 2: Anki.Vector.external_interface.NavMapFeedResponse.quad_infos:type_name -> Anki.Vector.external_interface.NavMapQuadInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_nav_map_proto_init() }
func file_nav_map_proto_init() {
	if File_nav_map_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nav_map_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavMapQuadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nav_map_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavMapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nav_map_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavMapFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nav_map_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavMapFeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nav_map_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nav_map_proto_goTypes,
		DependencyIndexes: file_nav_map_proto_depIdxs,
		EnumInfos:         file_nav_map_proto_enumTypes,
		MessageInfos:      file_nav_map_proto_msgTypes,
	}.Build()
	File_nav_map_proto = out.File
	file_nav_map_proto_rawDesc = nil
	file_nav_map_proto_goTypes = nil
	file_nav_map_proto_depIdxs = nil
}
