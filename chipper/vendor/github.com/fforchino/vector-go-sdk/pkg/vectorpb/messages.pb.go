// Copyright (c) 2018 Anki, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License in the file LICENSE.txt or at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// External interface for robot <-> app and robot <-> sdk communication

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.4
// source: messages.proto

package vectorpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RobotStatus int32

const (
	RobotStatus_ROBOT_STATUS_NONE                  RobotStatus = 0
	RobotStatus_ROBOT_STATUS_IS_MOVING             RobotStatus = 1
	RobotStatus_ROBOT_STATUS_IS_CARRYING_BLOCK     RobotStatus = 2
	RobotStatus_ROBOT_STATUS_IS_PICKING_OR_PLACING RobotStatus = 4
	RobotStatus_ROBOT_STATUS_IS_PICKED_UP          RobotStatus = 8
	RobotStatus_ROBOT_STATUS_IS_BUTTON_PRESSED     RobotStatus = 16
	RobotStatus_ROBOT_STATUS_IS_FALLING            RobotStatus = 32
	RobotStatus_ROBOT_STATUS_IS_ANIMATING          RobotStatus = 64
	RobotStatus_ROBOT_STATUS_IS_PATHING            RobotStatus = 128
	RobotStatus_ROBOT_STATUS_LIFT_IN_POS           RobotStatus = 256
	RobotStatus_ROBOT_STATUS_HEAD_IN_POS           RobotStatus = 512
	RobotStatus_ROBOT_STATUS_CALM_POWER_MODE       RobotStatus = 1024
	RobotStatus_ROBOT_STATUS_IS_ON_CHARGER         RobotStatus = 4096
	RobotStatus_ROBOT_STATUS_IS_CHARGING           RobotStatus = 8192
	RobotStatus_ROBOT_STATUS_CLIFF_DETECTED        RobotStatus = 16384
	RobotStatus_ROBOT_STATUS_ARE_WHEELS_MOVING     RobotStatus = 32768
	RobotStatus_ROBOT_STATUS_IS_BEING_HELD         RobotStatus = 65536
	RobotStatus_ROBOT_STATUS_IS_MOTION_DETECTED    RobotStatus = 131072
)

// Enum value maps for RobotStatus.
var (
	RobotStatus_name = map[int32]string{
		0:      "ROBOT_STATUS_NONE",
		1:      "ROBOT_STATUS_IS_MOVING",
		2:      "ROBOT_STATUS_IS_CARRYING_BLOCK",
		4:      "ROBOT_STATUS_IS_PICKING_OR_PLACING",
		8:      "ROBOT_STATUS_IS_PICKED_UP",
		16:     "ROBOT_STATUS_IS_BUTTON_PRESSED",
		32:     "ROBOT_STATUS_IS_FALLING",
		64:     "ROBOT_STATUS_IS_ANIMATING",
		128:    "ROBOT_STATUS_IS_PATHING",
		256:    "ROBOT_STATUS_LIFT_IN_POS",
		512:    "ROBOT_STATUS_HEAD_IN_POS",
		1024:   "ROBOT_STATUS_CALM_POWER_MODE",
		4096:   "ROBOT_STATUS_IS_ON_CHARGER",
		8192:   "ROBOT_STATUS_IS_CHARGING",
		16384:  "ROBOT_STATUS_CLIFF_DETECTED",
		32768:  "ROBOT_STATUS_ARE_WHEELS_MOVING",
		65536:  "ROBOT_STATUS_IS_BEING_HELD",
		131072: "ROBOT_STATUS_IS_MOTION_DETECTED",
	}
	RobotStatus_value = map[string]int32{
		"ROBOT_STATUS_NONE":                  0,
		"ROBOT_STATUS_IS_MOVING":             1,
		"ROBOT_STATUS_IS_CARRYING_BLOCK":     2,
		"ROBOT_STATUS_IS_PICKING_OR_PLACING": 4,
		"ROBOT_STATUS_IS_PICKED_UP":          8,
		"ROBOT_STATUS_IS_BUTTON_PRESSED":     16,
		"ROBOT_STATUS_IS_FALLING":            32,
		"ROBOT_STATUS_IS_ANIMATING":          64,
		"ROBOT_STATUS_IS_PATHING":            128,
		"ROBOT_STATUS_LIFT_IN_POS":           256,
		"ROBOT_STATUS_HEAD_IN_POS":           512,
		"ROBOT_STATUS_CALM_POWER_MODE":       1024,
		"ROBOT_STATUS_IS_ON_CHARGER":         4096,
		"ROBOT_STATUS_IS_CHARGING":           8192,
		"ROBOT_STATUS_CLIFF_DETECTED":        16384,
		"ROBOT_STATUS_ARE_WHEELS_MOVING":     32768,
		"ROBOT_STATUS_IS_BEING_HELD":         65536,
		"ROBOT_STATUS_IS_MOTION_DETECTED":    131072,
	}
)

func (x RobotStatus) Enum() *RobotStatus {
	p := new(RobotStatus)
	*p = x
	return p
}

func (x RobotStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RobotStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[0].Descriptor()
}

func (RobotStatus) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[0]
}

func (x RobotStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RobotStatus.Descriptor instead.
func (RobotStatus) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

// This is an int8 on the clad side.
// Proto field names are prefixed with "EXPRESSION_"
type FacialExpression int32

const (
	FacialExpression_EXPRESSION_UNKNOWN   FacialExpression = 0 // e.g. expression estimation disabled.
	FacialExpression_EXPRESSION_NEUTRAL   FacialExpression = 1
	FacialExpression_EXPRESSION_HAPPINESS FacialExpression = 2
	FacialExpression_EXPRESSION_SURPRISE  FacialExpression = 3
	FacialExpression_EXPRESSION_ANGER     FacialExpression = 4
	FacialExpression_EXPRESSION_SADNESS   FacialExpression = 5
	// Clad does not account for "Unknown" in the count.
	FacialExpression_EXPRESSION_COUNT FacialExpression = 5
)

// Enum value maps for FacialExpression.
var (
	FacialExpression_name = map[int32]string{
		0: "EXPRESSION_UNKNOWN",
		1: "EXPRESSION_NEUTRAL",
		2: "EXPRESSION_HAPPINESS",
		3: "EXPRESSION_SURPRISE",
		4: "EXPRESSION_ANGER",
		5: "EXPRESSION_SADNESS",
		// Duplicate value: 5: "EXPRESSION_COUNT",
	}
	FacialExpression_value = map[string]int32{
		"EXPRESSION_UNKNOWN":   0,
		"EXPRESSION_NEUTRAL":   1,
		"EXPRESSION_HAPPINESS": 2,
		"EXPRESSION_SURPRISE":  3,
		"EXPRESSION_ANGER":     4,
		"EXPRESSION_SADNESS":   5,
		"EXPRESSION_COUNT":     5,
	}
)

func (x FacialExpression) Enum() *FacialExpression {
	p := new(FacialExpression)
	*p = x
	return p
}

func (x FacialExpression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacialExpression) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[1].Descriptor()
}

func (FacialExpression) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[1]
}

func (x FacialExpression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FacialExpression.Descriptor instead.
func (FacialExpression) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

type FaceEnrollmentResult int32

const (
	FaceEnrollmentResult_SUCCESS FaceEnrollmentResult = 0
	// Failures:
	FaceEnrollmentResult_SAW_WRONG_FACE     FaceEnrollmentResult = 1
	FaceEnrollmentResult_SAW_MULTIPLE_FACES FaceEnrollmentResult = 2
	FaceEnrollmentResult_TIMED_OUT          FaceEnrollmentResult = 3
	FaceEnrollmentResult_SAVE_FAILED        FaceEnrollmentResult = 4
	FaceEnrollmentResult_INCOMPLETE         FaceEnrollmentResult = 5
	FaceEnrollmentResult_CANCELLED          FaceEnrollmentResult = 6
	FaceEnrollmentResult_NAME_IN_USE        FaceEnrollmentResult = 7
	FaceEnrollmentResult_NAMED_STORAGE_FULL FaceEnrollmentResult = 8
	FaceEnrollmentResult_UNKNOWN_FAILURE    FaceEnrollmentResult = 9
)

// Enum value maps for FaceEnrollmentResult.
var (
	FaceEnrollmentResult_name = map[int32]string{
		0: "SUCCESS",
		1: "SAW_WRONG_FACE",
		2: "SAW_MULTIPLE_FACES",
		3: "TIMED_OUT",
		4: "SAVE_FAILED",
		5: "INCOMPLETE",
		6: "CANCELLED",
		7: "NAME_IN_USE",
		8: "NAMED_STORAGE_FULL",
		9: "UNKNOWN_FAILURE",
	}
	FaceEnrollmentResult_value = map[string]int32{
		"SUCCESS":            0,
		"SAW_WRONG_FACE":     1,
		"SAW_MULTIPLE_FACES": 2,
		"TIMED_OUT":          3,
		"SAVE_FAILED":        4,
		"INCOMPLETE":         5,
		"CANCELLED":          6,
		"NAME_IN_USE":        7,
		"NAMED_STORAGE_FULL": 8,
		"UNKNOWN_FAILURE":    9,
	}
)

func (x FaceEnrollmentResult) Enum() *FaceEnrollmentResult {
	p := new(FaceEnrollmentResult)
	*p = x
	return p
}

func (x FaceEnrollmentResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaceEnrollmentResult) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[2].Descriptor()
}

func (FaceEnrollmentResult) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[2]
}

func (x FaceEnrollmentResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaceEnrollmentResult.Descriptor instead.
func (FaceEnrollmentResult) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2}
}

type BehaviorResults int32

const (
	BehaviorResults_BEHAVIOR_INVALID_STATE       BehaviorResults = 0
	BehaviorResults_BEHAVIOR_COMPLETE_STATE      BehaviorResults = 1
	BehaviorResults_BEHAVIOR_WONT_ACTIVATE_STATE BehaviorResults = 2
)

// Enum value maps for BehaviorResults.
var (
	BehaviorResults_name = map[int32]string{
		0: "BEHAVIOR_INVALID_STATE",
		1: "BEHAVIOR_COMPLETE_STATE",
		2: "BEHAVIOR_WONT_ACTIVATE_STATE",
	}
	BehaviorResults_value = map[string]int32{
		"BEHAVIOR_INVALID_STATE":       0,
		"BEHAVIOR_COMPLETE_STATE":      1,
		"BEHAVIOR_WONT_ACTIVATE_STATE": 2,
	}
)

func (x BehaviorResults) Enum() *BehaviorResults {
	p := new(BehaviorResults)
	*p = x
	return p
}

func (x BehaviorResults) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BehaviorResults) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[3].Descriptor()
}

func (BehaviorResults) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[3]
}

func (x BehaviorResults) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BehaviorResults.Descriptor instead.
func (BehaviorResults) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3}
}

type ActionTagConstants int32

const (
	ActionTagConstants_INVALID_SDK_TAG ActionTagConstants = 0
	ActionTagConstants_FIRST_SDK_TAG   ActionTagConstants = 2000001
	ActionTagConstants_LAST_SDK_TAG    ActionTagConstants = 3000000
)

// Enum value maps for ActionTagConstants.
var (
	ActionTagConstants_name = map[int32]string{
		0:       "INVALID_SDK_TAG",
		2000001: "FIRST_SDK_TAG",
		3000000: "LAST_SDK_TAG",
	}
	ActionTagConstants_value = map[string]int32{
		"INVALID_SDK_TAG": 0,
		"FIRST_SDK_TAG":   2000001,
		"LAST_SDK_TAG":    3000000,
	}
)

func (x ActionTagConstants) Enum() *ActionTagConstants {
	p := new(ActionTagConstants)
	*p = x
	return p
}

func (x ActionTagConstants) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionTagConstants) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[4].Descriptor()
}

func (ActionTagConstants) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[4]
}

func (x ActionTagConstants) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionTagConstants.Descriptor instead.
func (ActionTagConstants) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4}
}

// This is a uint8 in CLAD
type AlignmentType int32

const (
	AlignmentType_ALIGNMENT_TYPE_UNKNOWN     AlignmentType = 0
	AlignmentType_ALIGNMENT_TYPE_LIFT_FINGER AlignmentType = 1 // Align the tips of the lift fingers with the target object
	AlignmentType_ALIGNMENT_TYPE_LIFT_PLATE  AlignmentType = 2 // Align the flat part of the lift with the object (useful for getting the fingers in the cube's grooves)
	AlignmentType_ALIGNMENT_TYPE_BODY        AlignmentType = 3 // Align the front of Vector's body (useful for when the lift is up)
	AlignmentType_ALIGNMENT_TYPE_CUSTOM      AlignmentType = 4 // For use with distanceFromMarker parameter
)

// Enum value maps for AlignmentType.
var (
	AlignmentType_name = map[int32]string{
		0: "ALIGNMENT_TYPE_UNKNOWN",
		1: "ALIGNMENT_TYPE_LIFT_FINGER",
		2: "ALIGNMENT_TYPE_LIFT_PLATE",
		3: "ALIGNMENT_TYPE_BODY",
		4: "ALIGNMENT_TYPE_CUSTOM",
	}
	AlignmentType_value = map[string]int32{
		"ALIGNMENT_TYPE_UNKNOWN":     0,
		"ALIGNMENT_TYPE_LIFT_FINGER": 1,
		"ALIGNMENT_TYPE_LIFT_PLATE":  2,
		"ALIGNMENT_TYPE_BODY":        3,
		"ALIGNMENT_TYPE_CUSTOM":      4,
	}
)

func (x AlignmentType) Enum() *AlignmentType {
	p := new(AlignmentType)
	*p = x
	return p
}

func (x AlignmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlignmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[5].Descriptor()
}

func (AlignmentType) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[5]
}

func (x AlignmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlignmentType.Descriptor instead.
func (AlignmentType) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{5}
}

type BatteryLevel int32

const (
	BatteryLevel_BATTERY_LEVEL_UNKNOWN BatteryLevel = 0
	BatteryLevel_BATTERY_LEVEL_LOW     BatteryLevel = 1
	BatteryLevel_BATTERY_LEVEL_NOMINAL BatteryLevel = 2
	BatteryLevel_BATTERY_LEVEL_FULL    BatteryLevel = 3
)

// Enum value maps for BatteryLevel.
var (
	BatteryLevel_name = map[int32]string{
		0: "BATTERY_LEVEL_UNKNOWN",
		1: "BATTERY_LEVEL_LOW",
		2: "BATTERY_LEVEL_NOMINAL",
		3: "BATTERY_LEVEL_FULL",
	}
	BatteryLevel_value = map[string]int32{
		"BATTERY_LEVEL_UNKNOWN": 0,
		"BATTERY_LEVEL_LOW":     1,
		"BATTERY_LEVEL_NOMINAL": 2,
		"BATTERY_LEVEL_FULL":    3,
	}
)

func (x BatteryLevel) Enum() *BatteryLevel {
	p := new(BatteryLevel)
	*p = x
	return p
}

func (x BatteryLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[6].Descriptor()
}

func (BatteryLevel) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[6]
}

func (x BatteryLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatteryLevel.Descriptor instead.
func (BatteryLevel) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{6}
}

// Constants associated with the audio feed
type AudioConstants int32

const (
	AudioConstants_AUDIO_CONSTANTS_NULL             AudioConstants = 0     // error value
	AudioConstants_MIC_DETECTION_DIRECTIONS         AudioConstants = 12    // The number of audio directions the four microphones can isolate
	AudioConstants_SAMPLE_COUNTS_PER_ENGINE_MESSAGE AudioConstants = 160   // The number of audio samples in each internal audio chunk
	AudioConstants_SAMPLE_COUNTS_PER_SDK_MESSAGE    AudioConstants = 1600  // The number of audio samples delivered in each audio feed response
	AudioConstants_MICROPHONE_SAMPLE_RATE           AudioConstants = 15625 // The sampling rate victor's microphones record at
	AudioConstants_PROCESSED_SAMPLE_RATE            AudioConstants = 16000 // The sampling rate the robot processes audio at
)

// Enum value maps for AudioConstants.
var (
	AudioConstants_name = map[int32]string{
		0:     "AUDIO_CONSTANTS_NULL",
		12:    "MIC_DETECTION_DIRECTIONS",
		160:   "SAMPLE_COUNTS_PER_ENGINE_MESSAGE",
		1600:  "SAMPLE_COUNTS_PER_SDK_MESSAGE",
		15625: "MICROPHONE_SAMPLE_RATE",
		16000: "PROCESSED_SAMPLE_RATE",
	}
	AudioConstants_value = map[string]int32{
		"AUDIO_CONSTANTS_NULL":             0,
		"MIC_DETECTION_DIRECTIONS":         12,
		"SAMPLE_COUNTS_PER_ENGINE_MESSAGE": 160,
		"SAMPLE_COUNTS_PER_SDK_MESSAGE":    1600,
		"MICROPHONE_SAMPLE_RATE":           15625,
		"PROCESSED_SAMPLE_RATE":            16000,
	}
)

func (x AudioConstants) Enum() *AudioConstants {
	p := new(AudioConstants)
	*p = x
	return p
}

func (x AudioConstants) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioConstants) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[7].Descriptor()
}

func (AudioConstants) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[7]
}

func (x AudioConstants) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioConstants.Descriptor instead.
func (AudioConstants) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{7}
}

// The robot can process audio in a variety of ways
type AudioProcessingMode int32

const (
	AudioProcessingMode_AUDIO_UNKNOWN           AudioProcessingMode = 0 // error value
	AudioProcessingMode_AUDIO_OFF               AudioProcessingMode = 1 // deactivates audio SDK mode
	AudioProcessingMode_AUDIO_FAST_MODE         AudioProcessingMode = 2 // unprocessed single microphone data - most performant on robot
	AudioProcessingMode_AUDIO_DIRECTIONAL_MODE  AudioProcessingMode = 3 // beamforming support for focusing on specific direction - sounds cleanest
	AudioProcessingMode_AUDIO_VOICE_DETECT_MODE AudioProcessingMode = 4 // multi-microphone non-beamforming - best for voice detection programs
)

// Enum value maps for AudioProcessingMode.
var (
	AudioProcessingMode_name = map[int32]string{
		0: "AUDIO_UNKNOWN",
		1: "AUDIO_OFF",
		2: "AUDIO_FAST_MODE",
		3: "AUDIO_DIRECTIONAL_MODE",
		4: "AUDIO_VOICE_DETECT_MODE",
	}
	AudioProcessingMode_value = map[string]int32{
		"AUDIO_UNKNOWN":           0,
		"AUDIO_OFF":               1,
		"AUDIO_FAST_MODE":         2,
		"AUDIO_DIRECTIONAL_MODE":  3,
		"AUDIO_VOICE_DETECT_MODE": 4,
	}
)

func (x AudioProcessingMode) Enum() *AudioProcessingMode {
	p := new(AudioProcessingMode)
	*p = x
	return p
}

func (x AudioProcessingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioProcessingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[8].Descriptor()
}

func (AudioProcessingMode) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[8]
}

func (x AudioProcessingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioProcessingMode.Descriptor instead.
func (AudioProcessingMode) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{8}
}

type MasterVolumeLevel int32

const (
	MasterVolumeLevel_VOLUME_LOW         MasterVolumeLevel = 0
	MasterVolumeLevel_VOLUME_MEDIUM_LOW  MasterVolumeLevel = 1
	MasterVolumeLevel_VOLUME_MEDIUM      MasterVolumeLevel = 2
	MasterVolumeLevel_VOLUME_MEDIUM_HIGH MasterVolumeLevel = 3
	MasterVolumeLevel_VOLUME_HIGH        MasterVolumeLevel = 4
)

// Enum value maps for MasterVolumeLevel.
var (
	MasterVolumeLevel_name = map[int32]string{
		0: "VOLUME_LOW",
		1: "VOLUME_MEDIUM_LOW",
		2: "VOLUME_MEDIUM",
		3: "VOLUME_MEDIUM_HIGH",
		4: "VOLUME_HIGH",
	}
	MasterVolumeLevel_value = map[string]int32{
		"VOLUME_LOW":         0,
		"VOLUME_MEDIUM_LOW":  1,
		"VOLUME_MEDIUM":      2,
		"VOLUME_MEDIUM_HIGH": 3,
		"VOLUME_HIGH":        4,
	}
)

func (x MasterVolumeLevel) Enum() *MasterVolumeLevel {
	p := new(MasterVolumeLevel)
	*p = x
	return p
}

func (x MasterVolumeLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MasterVolumeLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[9].Descriptor()
}

func (MasterVolumeLevel) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[9]
}

func (x MasterVolumeLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MasterVolumeLevel.Descriptor instead.
func (MasterVolumeLevel) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{9}
}

type OnboardingStages int32

const (
	OnboardingStages_NotStarted OnboardingStages = 0
	OnboardingStages_TimedOut   OnboardingStages = 1
	// Maintain this numbering for backward compatibility
	OnboardingStages_Complete     OnboardingStages = 3
	OnboardingStages_DevDoNothing OnboardingStages = 4
)

// Enum value maps for OnboardingStages.
var (
	OnboardingStages_name = map[int32]string{
		0: "NotStarted",
		1: "TimedOut",
		3: "Complete",
		4: "DevDoNothing",
	}
	OnboardingStages_value = map[string]int32{
		"NotStarted":   0,
		"TimedOut":     1,
		"Complete":     3,
		"DevDoNothing": 4,
	}
)

func (x OnboardingStages) Enum() *OnboardingStages {
	p := new(OnboardingStages)
	*p = x
	return p
}

func (x OnboardingStages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnboardingStages) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[10].Descriptor()
}

func (OnboardingStages) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[10]
}

func (x OnboardingStages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnboardingStages.Descriptor instead.
func (OnboardingStages) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{10}
}

type OnboardingPhase int32

const (
	OnboardingPhase_InvalidPhase    OnboardingPhase = 0
	OnboardingPhase_Default         OnboardingPhase = 1
	OnboardingPhase_LookAtPhone     OnboardingPhase = 2
	OnboardingPhase_WakeUp          OnboardingPhase = 3
	OnboardingPhase_LookAtUser      OnboardingPhase = 4
	OnboardingPhase_TeachWakeWord   OnboardingPhase = 5
	OnboardingPhase_TeachComeHere   OnboardingPhase = 6
	OnboardingPhase_TeachMeetVictor OnboardingPhase = 7
)

// Enum value maps for OnboardingPhase.
var (
	OnboardingPhase_name = map[int32]string{
		0: "InvalidPhase",
		1: "Default",
		2: "LookAtPhone",
		3: "WakeUp",
		4: "LookAtUser",
		5: "TeachWakeWord",
		6: "TeachComeHere",
		7: "TeachMeetVictor",
	}
	OnboardingPhase_value = map[string]int32{
		"InvalidPhase":    0,
		"Default":         1,
		"LookAtPhone":     2,
		"WakeUp":          3,
		"LookAtUser":      4,
		"TeachWakeWord":   5,
		"TeachComeHere":   6,
		"TeachMeetVictor": 7,
	}
)

func (x OnboardingPhase) Enum() *OnboardingPhase {
	p := new(OnboardingPhase)
	*p = x
	return p
}

func (x OnboardingPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnboardingPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[11].Descriptor()
}

func (OnboardingPhase) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[11]
}

func (x OnboardingPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnboardingPhase.Descriptor instead.
func (OnboardingPhase) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{11}
}

type OnboardingPhaseState int32

const (
	OnboardingPhaseState_PhaseInvalid    OnboardingPhaseState = 0
	OnboardingPhaseState_PhasePending    OnboardingPhaseState = 1
	OnboardingPhaseState_PhaseInProgress OnboardingPhaseState = 2
	OnboardingPhaseState_PhaseComplete   OnboardingPhaseState = 3
)

// Enum value maps for OnboardingPhaseState.
var (
	OnboardingPhaseState_name = map[int32]string{
		0: "PhaseInvalid",
		1: "PhasePending",
		2: "PhaseInProgress",
		3: "PhaseComplete",
	}
	OnboardingPhaseState_value = map[string]int32{
		"PhaseInvalid":    0,
		"PhasePending":    1,
		"PhaseInProgress": 2,
		"PhaseComplete":   3,
	}
)

func (x OnboardingPhaseState) Enum() *OnboardingPhaseState {
	p := new(OnboardingPhaseState)
	*p = x
	return p
}

func (x OnboardingPhaseState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnboardingPhaseState) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[12].Descriptor()
}

func (OnboardingPhaseState) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[12]
}

func (x OnboardingPhaseState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnboardingPhaseState.Descriptor instead.
func (OnboardingPhaseState) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{12}
}

// NOTE: must match attentionTransferTypes.clad
type AttentionTransferReason int32

const (
	AttentionTransferReason_Invalid           AttentionTransferReason = 0
	AttentionTransferReason_NoCloudConnection AttentionTransferReason = 1
	AttentionTransferReason_NoWifi            AttentionTransferReason = 2
	AttentionTransferReason_UnmatchedIntent   AttentionTransferReason = 3
)

// Enum value maps for AttentionTransferReason.
var (
	AttentionTransferReason_name = map[int32]string{
		0: "Invalid",
		1: "NoCloudConnection",
		2: "NoWifi",
		3: "UnmatchedIntent",
	}
	AttentionTransferReason_value = map[string]int32{
		"Invalid":           0,
		"NoCloudConnection": 1,
		"NoWifi":            2,
		"UnmatchedIntent":   3,
	}
)

func (x AttentionTransferReason) Enum() *AttentionTransferReason {
	p := new(AttentionTransferReason)
	*p = x
	return p
}

func (x AttentionTransferReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttentionTransferReason) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[13].Descriptor()
}

func (AttentionTransferReason) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[13]
}

func (x AttentionTransferReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttentionTransferReason.Descriptor instead.
func (AttentionTransferReason) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{13}
}

// The possible results of running an action.
type ActionResult_ActionResultCode int32

const (
	ActionResult_ACTION_RESULT_SUCCESS                 ActionResult_ActionResultCode = 0        // Action completed successfully.
	ActionResult_ACTION_RESULT_RUNNING                 ActionResult_ActionResultCode = 16777216 // Action is still running.
	ActionResult_ACTION_RESULT_CANCELLED_WHILE_RUNNING ActionResult_ActionResultCode = 33554432 // Action was cancelled by SDK request
	ActionResult_NOT_STARTED                           ActionResult_ActionResultCode = 33554433 // Initial state of an Action to indicate it has not yet started.
	ActionResult_ABORT                                 ActionResult_ActionResultCode = 50331648 // Action aborted itself (e.g. had invalid attributes, or a runtime failure).
	ActionResult_ANIM_ABORTED                          ActionResult_ActionResultCode = 50331649 // Animation Action aborted itself (e.g. there was an error playing the animation).
	ActionResult_BAD_MARKER                            ActionResult_ActionResultCode = 50331650 // There was an error related to vision markers.
	ActionResult_BAD_MESSAGE_TAG                       ActionResult_ActionResultCode = 50331651 // There was a problem related to a subscribed or unsupported message tag
	ActionResult_BAD_OBJECT                            ActionResult_ActionResultCode = 50331652 // There was a problem with the Object ID provided (e.g. there is no Object with that ID).
	ActionResult_BAD_POSE                              ActionResult_ActionResultCode = 50331653 // There was a problem with the Pose provided.
	ActionResult_BAD_TAG                               ActionResult_ActionResultCode = 50331654 // The SDK-provided tag was bad.
	ActionResult_CHARGER_UNPLUGGED_ABORT               ActionResult_ActionResultCode = 50331655 // Vector is on the charger but cannot sense the contacts. Charger may be unplugged.
	ActionResult_CLIFF_ALIGN_FAILED_TIMEOUT            ActionResult_ActionResultCode = 50331656
	ActionResult_CLIFF_ALIGN_FAILED_NO_TURNING         ActionResult_ActionResultCode = 50331657
	ActionResult_CLIFF_ALIGN_FAILED_OVER_TURNING       ActionResult_ActionResultCode = 50331658
	ActionResult_CLIFF_ALIGN_FAILED_NO_WHITE           ActionResult_ActionResultCode = 50331659
	ActionResult_CLIFF_ALIGN_FAILED_STOPPED            ActionResult_ActionResultCode = 50331660
	ActionResult_FAILED_SETTING_CALIBRATION            ActionResult_ActionResultCode = 50331661 // Shouldn't occur outside of factory.
	ActionResult_FOLLOWING_PATH_BUT_NOT_TRAVERSING     ActionResult_ActionResultCode = 50331662 // There was an error following the planned path.
	ActionResult_INTERRUPTED                           ActionResult_ActionResultCode = 50331663 // The action was interrupted by another Action or Behavior.
	ActionResult_INVALID_OFF_TREADS_STATE              ActionResult_ActionResultCode = 50331664 // The robot ended up in an "off treads state" not valid for this action (e.g. the robot was placed on its back while executing a turn).
	ActionResult_MISMATCHED_UP_AXIS                    ActionResult_ActionResultCode = 50331665 // The Up Axis of a carried object doesn't match the desired placement pose.
	ActionResult_NO_ANIM_NAME                          ActionResult_ActionResultCode = 50331666 // No valid Animation name was found.
	ActionResult_NO_DISTANCE_SET                       ActionResult_ActionResultCode = 50331667 // An invalid distance value was given.
	ActionResult_NO_FACE                               ActionResult_ActionResultCode = 50331668 // There was a problem with the Face ID (e.g. Vector doesn't no where it is).
	ActionResult_NO_GOAL_SET                           ActionResult_ActionResultCode = 50331669 // No goal pose was set.
	ActionResult_NO_PREACTION_POSES                    ActionResult_ActionResultCode = 50331670 // No pre-action poses were found (e.g. could not get into position).
	ActionResult_NOT_CARRYING_OBJECT_ABORT             ActionResult_ActionResultCode = 50331671 // No object is being carried, but the action requires one.
	ActionResult_NOT_ON_CHARGER_ABORT                  ActionResult_ActionResultCode = 50331672 // Vector is expected to be on the charger, but is not.
	ActionResult_NULL_SUBACTION                        ActionResult_ActionResultCode = 50331673 // No sub-action was provided.
	ActionResult_PATH_PLANNING_FAILED_ABORT            ActionResult_ActionResultCode = 50331674 // Vector was unable to plan a path.
	ActionResult_PICKUP_OBJECT_UNEXPECTEDLY_MOVING     ActionResult_ActionResultCode = 50331675 // The object that Vector is attempting to pickup is unexpectedly moving (e.g it is being moved by someone else).
	ActionResult_SEND_MESSAGE_TO_ROBOT_FAILED          ActionResult_ActionResultCode = 50331676 // Shouldn't occur in SDK usage.
	ActionResult_STILL_CARRYING_OBJECT                 ActionResult_ActionResultCode = 50331677 // Vector is unexpectedly still carrying an object.
	ActionResult_TIMEOUT                               ActionResult_ActionResultCode = 50331678 // The Action timed out before completing correctly.
	ActionResult_TRACKS_LOCKED                         ActionResult_ActionResultCode = 50331679 // One or more movement tracks (Head, Lift, Body, Face, Backpack Lights, Audio) are already being used by another Action.
	ActionResult_UNEXPECTED_DOCK_ACTION                ActionResult_ActionResultCode = 50331680 // There was an internal error related to an unexpected type of dock action.
	ActionResult_UNKNOWN_TOOL_CODE                     ActionResult_ActionResultCode = 50331681 // Shouldn't occur outside of factory.
	ActionResult_UPDATE_DERIVED_FAILED                 ActionResult_ActionResultCode = 50331682 // There was a problem in the subclass's update on the robot.
	ActionResult_VISUAL_OBSERVATION_FAILED             ActionResult_ActionResultCode = 50331683 // Vector did not see the expected result (e.g. unable to see cube in the expected position after a related action).
	ActionResult_SHOULDNT_DRIVE_ON_CHARGER             ActionResult_ActionResultCode = 50331684 // Action is not permitted on the charger.
	ActionResult_RETRY                                 ActionResult_ActionResultCode = 67108864 // The Action failed, but may succeed if retried.
	ActionResult_DID_NOT_REACH_PREACTION_POSE          ActionResult_ActionResultCode = 67108865 // Failed to get into position.
	ActionResult_FAILED_TRAVERSING_PATH                ActionResult_ActionResultCode = 67108866 // Failed to follow the planned path.
	ActionResult_LAST_PICK_AND_PLACE_FAILED            ActionResult_ActionResultCode = 67108867 // The previous attempt to pick and place an object failed.
	ActionResult_MOTOR_STOPPED_MAKING_PROGRESS         ActionResult_ActionResultCode = 67108868 // The required motor isn't moving so the action cannot complete.
	ActionResult_NOT_CARRYING_OBJECT_RETRY             ActionResult_ActionResultCode = 67108869 // Not carrying an object when it was expected, but may succeed if the action is retried.
	ActionResult_NOT_ON_CHARGER_RETRY                  ActionResult_ActionResultCode = 67108870 // Driving onto the charger failed, but may succeed if the action is retried.
	ActionResult_PATH_PLANNING_FAILED_RETRY            ActionResult_ActionResultCode = 67108871 // Vector was unable to plan a path, but may succeed if the action is retried.
	ActionResult_PLACEMENT_GOAL_NOT_FREE               ActionResult_ActionResultCode = 67108872 // There is no room to place the object at the desired destination.
	ActionResult_PICKUP_OBJECT_UNEXPECTEDLY_NOT_MOVING ActionResult_ActionResultCode = 67108873 // The object that Vector thought he was lifting didn't start moving, so he must have missed.
	ActionResult_STILL_ON_CHARGER                      ActionResult_ActionResultCode = 67108874 // Vector failed to drive off the charger.
	ActionResult_UNEXPECTED_PITCH_ANGLE                ActionResult_ActionResultCode = 67108875 // Vector's pitch is at an unexpected angle for the Action.
)

// Enum value maps for ActionResult_ActionResultCode.
var (
	ActionResult_ActionResultCode_name = map[int32]string{
		0:        "ACTION_RESULT_SUCCESS",
		16777216: "ACTION_RESULT_RUNNING",
		33554432: "ACTION_RESULT_CANCELLED_WHILE_RUNNING",
		33554433: "NOT_STARTED",
		50331648: "ABORT",
		50331649: "ANIM_ABORTED",
		50331650: "BAD_MARKER",
		50331651: "BAD_MESSAGE_TAG",
		50331652: "BAD_OBJECT",
		50331653: "BAD_POSE",
		50331654: "BAD_TAG",
		50331655: "CHARGER_UNPLUGGED_ABORT",
		50331656: "CLIFF_ALIGN_FAILED_TIMEOUT",
		50331657: "CLIFF_ALIGN_FAILED_NO_TURNING",
		50331658: "CLIFF_ALIGN_FAILED_OVER_TURNING",
		50331659: "CLIFF_ALIGN_FAILED_NO_WHITE",
		50331660: "CLIFF_ALIGN_FAILED_STOPPED",
		50331661: "FAILED_SETTING_CALIBRATION",
		50331662: "FOLLOWING_PATH_BUT_NOT_TRAVERSING",
		50331663: "INTERRUPTED",
		50331664: "INVALID_OFF_TREADS_STATE",
		50331665: "MISMATCHED_UP_AXIS",
		50331666: "NO_ANIM_NAME",
		50331667: "NO_DISTANCE_SET",
		50331668: "NO_FACE",
		50331669: "NO_GOAL_SET",
		50331670: "NO_PREACTION_POSES",
		50331671: "NOT_CARRYING_OBJECT_ABORT",
		50331672: "NOT_ON_CHARGER_ABORT",
		50331673: "NULL_SUBACTION",
		50331674: "PATH_PLANNING_FAILED_ABORT",
		50331675: "PICKUP_OBJECT_UNEXPECTEDLY_MOVING",
		50331676: "SEND_MESSAGE_TO_ROBOT_FAILED",
		50331677: "STILL_CARRYING_OBJECT",
		50331678: "TIMEOUT",
		50331679: "TRACKS_LOCKED",
		50331680: "UNEXPECTED_DOCK_ACTION",
		50331681: "UNKNOWN_TOOL_CODE",
		50331682: "UPDATE_DERIVED_FAILED",
		50331683: "VISUAL_OBSERVATION_FAILED",
		50331684: "SHOULDNT_DRIVE_ON_CHARGER",
		67108864: "RETRY",
		67108865: "DID_NOT_REACH_PREACTION_POSE",
		67108866: "FAILED_TRAVERSING_PATH",
		67108867: "LAST_PICK_AND_PLACE_FAILED",
		67108868: "MOTOR_STOPPED_MAKING_PROGRESS",
		67108869: "NOT_CARRYING_OBJECT_RETRY",
		67108870: "NOT_ON_CHARGER_RETRY",
		67108871: "PATH_PLANNING_FAILED_RETRY",
		67108872: "PLACEMENT_GOAL_NOT_FREE",
		67108873: "PICKUP_OBJECT_UNEXPECTEDLY_NOT_MOVING",
		67108874: "STILL_ON_CHARGER",
		67108875: "UNEXPECTED_PITCH_ANGLE",
	}
	ActionResult_ActionResultCode_value = map[string]int32{
		"ACTION_RESULT_SUCCESS":                 0,
		"ACTION_RESULT_RUNNING":                 16777216,
		"ACTION_RESULT_CANCELLED_WHILE_RUNNING": 33554432,
		"NOT_STARTED":                           33554433,
		"ABORT":                                 50331648,
		"ANIM_ABORTED":                          50331649,
		"BAD_MARKER":                            50331650,
		"BAD_MESSAGE_TAG":                       50331651,
		"BAD_OBJECT":                            50331652,
		"BAD_POSE":                              50331653,
		"BAD_TAG":                               50331654,
		"CHARGER_UNPLUGGED_ABORT":               50331655,
		"CLIFF_ALIGN_FAILED_TIMEOUT":            50331656,
		"CLIFF_ALIGN_FAILED_NO_TURNING":         50331657,
		"CLIFF_ALIGN_FAILED_OVER_TURNING":       50331658,
		"CLIFF_ALIGN_FAILED_NO_WHITE":           50331659,
		"CLIFF_ALIGN_FAILED_STOPPED":            50331660,
		"FAILED_SETTING_CALIBRATION":            50331661,
		"FOLLOWING_PATH_BUT_NOT_TRAVERSING":     50331662,
		"INTERRUPTED":                           50331663,
		"INVALID_OFF_TREADS_STATE":              50331664,
		"MISMATCHED_UP_AXIS":                    50331665,
		"NO_ANIM_NAME":                          50331666,
		"NO_DISTANCE_SET":                       50331667,
		"NO_FACE":                               50331668,
		"NO_GOAL_SET":                           50331669,
		"NO_PREACTION_POSES":                    50331670,
		"NOT_CARRYING_OBJECT_ABORT":             50331671,
		"NOT_ON_CHARGER_ABORT":                  50331672,
		"NULL_SUBACTION":                        50331673,
		"PATH_PLANNING_FAILED_ABORT":            50331674,
		"PICKUP_OBJECT_UNEXPECTEDLY_MOVING":     50331675,
		"SEND_MESSAGE_TO_ROBOT_FAILED":          50331676,
		"STILL_CARRYING_OBJECT":                 50331677,
		"TIMEOUT":                               50331678,
		"TRACKS_LOCKED":                         50331679,
		"UNEXPECTED_DOCK_ACTION":                50331680,
		"UNKNOWN_TOOL_CODE":                     50331681,
		"UPDATE_DERIVED_FAILED":                 50331682,
		"VISUAL_OBSERVATION_FAILED":             50331683,
		"SHOULDNT_DRIVE_ON_CHARGER":             50331684,
		"RETRY":                                 67108864,
		"DID_NOT_REACH_PREACTION_POSE":          67108865,
		"FAILED_TRAVERSING_PATH":                67108866,
		"LAST_PICK_AND_PLACE_FAILED":            67108867,
		"MOTOR_STOPPED_MAKING_PROGRESS":         67108868,
		"NOT_CARRYING_OBJECT_RETRY":             67108869,
		"NOT_ON_CHARGER_RETRY":                  67108870,
		"PATH_PLANNING_FAILED_RETRY":            67108871,
		"PLACEMENT_GOAL_NOT_FREE":               67108872,
		"PICKUP_OBJECT_UNEXPECTEDLY_NOT_MOVING": 67108873,
		"STILL_ON_CHARGER":                      67108874,
		"UNEXPECTED_PITCH_ANGLE":                67108875,
	}
)

func (x ActionResult_ActionResultCode) Enum() *ActionResult_ActionResultCode {
	p := new(ActionResult_ActionResultCode)
	*p = x
	return p
}

func (x ActionResult_ActionResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionResult_ActionResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[14].Descriptor()
}

func (ActionResult_ActionResultCode) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[14]
}

func (x ActionResult_ActionResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionResult_ActionResultCode.Descriptor instead.
func (ActionResult_ActionResultCode) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{76, 0}
}

type CubeBattery_CubeBatteryLevel int32

const (
	CubeBattery_Low    CubeBattery_CubeBatteryLevel = 0
	CubeBattery_Normal CubeBattery_CubeBatteryLevel = 1
)

// Enum value maps for CubeBattery_CubeBatteryLevel.
var (
	CubeBattery_CubeBatteryLevel_name = map[int32]string{
		0: "Low",
		1: "Normal",
	}
	CubeBattery_CubeBatteryLevel_value = map[string]int32{
		"Low":    0,
		"Normal": 1,
	}
)

func (x CubeBattery_CubeBatteryLevel) Enum() *CubeBattery_CubeBatteryLevel {
	p := new(CubeBattery_CubeBatteryLevel)
	*p = x
	return p
}

func (x CubeBattery_CubeBatteryLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CubeBattery_CubeBatteryLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[15].Descriptor()
}

func (CubeBattery_CubeBatteryLevel) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[15]
}

func (x CubeBattery_CubeBatteryLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CubeBattery_CubeBatteryLevel.Descriptor instead.
func (CubeBattery_CubeBatteryLevel) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{105, 0}
}

type SayTextResponse_UtteranceState int32

const (
	SayTextResponse_INVALID    SayTextResponse_UtteranceState = 0
	SayTextResponse_GENERATING SayTextResponse_UtteranceState = 1
	SayTextResponse_READY      SayTextResponse_UtteranceState = 2
	SayTextResponse_PLAYING    SayTextResponse_UtteranceState = 3
	SayTextResponse_FINISHED   SayTextResponse_UtteranceState = 4
)

// Enum value maps for SayTextResponse_UtteranceState.
var (
	SayTextResponse_UtteranceState_name = map[int32]string{
		0: "INVALID",
		1: "GENERATING",
		2: "READY",
		3: "PLAYING",
		4: "FINISHED",
	}
	SayTextResponse_UtteranceState_value = map[string]int32{
		"INVALID":    0,
		"GENERATING": 1,
		"READY":      2,
		"PLAYING":    3,
		"FINISHED":   4,
	}
)

func (x SayTextResponse_UtteranceState) Enum() *SayTextResponse_UtteranceState {
	p := new(SayTextResponse_UtteranceState)
	*p = x
	return p
}

func (x SayTextResponse_UtteranceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SayTextResponse_UtteranceState) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[16].Descriptor()
}

func (SayTextResponse_UtteranceState) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[16]
}

func (x SayTextResponse_UtteranceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SayTextResponse_UtteranceState.Descriptor instead.
func (SayTextResponse_UtteranceState) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{109, 0}
}

type ImageChunk_ImageEncoding int32

const (
	ImageChunk_NONE_IMAGE_ENCODING   ImageChunk_ImageEncoding = 0
	ImageChunk_RAW_GRAY              ImageChunk_ImageEncoding = 1 // no compression
	ImageChunk_RAW_RGB               ImageChunk_ImageEncoding = 2 // no compression, just [RGBRGBRG...]
	ImageChunk_YUYV                  ImageChunk_ImageEncoding = 3
	ImageChunk_YUV420SP              ImageChunk_ImageEncoding = 4
	ImageChunk_BAYER                 ImageChunk_ImageEncoding = 5
	ImageChunk_JPEG_GRAY             ImageChunk_ImageEncoding = 6
	ImageChunk_JPEG_COLOR            ImageChunk_ImageEncoding = 7
	ImageChunk_JPEG_COLOR_HALF_WIDTH ImageChunk_ImageEncoding = 8
	ImageChunk_JPEG_MINIMIZED_GRAY   ImageChunk_ImageEncoding = 9  // Minimized grayscale JPEG - no header, no footer, no byte stuffing
	ImageChunk_JPEG_MINIMIZED_COLOR  ImageChunk_ImageEncoding = 10 // Minimized grayscale JPEG - no header, no footer, no byte stuffing, with added color data
)

// Enum value maps for ImageChunk_ImageEncoding.
var (
	ImageChunk_ImageEncoding_name = map[int32]string{
		0:  "NONE_IMAGE_ENCODING",
		1:  "RAW_GRAY",
		2:  "RAW_RGB",
		3:  "YUYV",
		4:  "YUV420SP",
		5:  "BAYER",
		6:  "JPEG_GRAY",
		7:  "JPEG_COLOR",
		8:  "JPEG_COLOR_HALF_WIDTH",
		9:  "JPEG_MINIMIZED_GRAY",
		10: "JPEG_MINIMIZED_COLOR",
	}
	ImageChunk_ImageEncoding_value = map[string]int32{
		"NONE_IMAGE_ENCODING":   0,
		"RAW_GRAY":              1,
		"RAW_RGB":               2,
		"YUYV":                  3,
		"YUV420SP":              4,
		"BAYER":                 5,
		"JPEG_GRAY":             6,
		"JPEG_COLOR":            7,
		"JPEG_COLOR_HALF_WIDTH": 8,
		"JPEG_MINIMIZED_GRAY":   9,
		"JPEG_MINIMIZED_COLOR":  10,
	}
)

func (x ImageChunk_ImageEncoding) Enum() *ImageChunk_ImageEncoding {
	p := new(ImageChunk_ImageEncoding)
	*p = x
	return p
}

func (x ImageChunk_ImageEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageChunk_ImageEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[17].Descriptor()
}

func (ImageChunk_ImageEncoding) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[17]
}

func (x ImageChunk_ImageEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageChunk_ImageEncoding.Descriptor instead.
func (ImageChunk_ImageEncoding) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{141, 0}
}

type CheckUpdateStatusResponse_UpdateStatus int32

const (
	CheckUpdateStatusResponse_NO_UPDATE            CheckUpdateStatusResponse_UpdateStatus = 0
	CheckUpdateStatusResponse_READY_TO_INSTALL     CheckUpdateStatusResponse_UpdateStatus = 1
	CheckUpdateStatusResponse_IN_PROGRESS_DOWNLOAD CheckUpdateStatusResponse_UpdateStatus = 2
)

// Enum value maps for CheckUpdateStatusResponse_UpdateStatus.
var (
	CheckUpdateStatusResponse_UpdateStatus_name = map[int32]string{
		0: "NO_UPDATE",
		1: "READY_TO_INSTALL",
		2: "IN_PROGRESS_DOWNLOAD",
	}
	CheckUpdateStatusResponse_UpdateStatus_value = map[string]int32{
		"NO_UPDATE":            0,
		"READY_TO_INSTALL":     1,
		"IN_PROGRESS_DOWNLOAD": 2,
	}
)

func (x CheckUpdateStatusResponse_UpdateStatus) Enum() *CheckUpdateStatusResponse_UpdateStatus {
	p := new(CheckUpdateStatusResponse_UpdateStatus)
	*p = x
	return p
}

func (x CheckUpdateStatusResponse_UpdateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckUpdateStatusResponse_UpdateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[18].Descriptor()
}

func (CheckUpdateStatusResponse_UpdateStatus) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[18]
}

func (x CheckUpdateStatusResponse_UpdateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckUpdateStatusResponse_UpdateStatus.Descriptor instead.
func (CheckUpdateStatusResponse_UpdateStatus) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{190, 0}
}

type CheckCloudResponse_ConnectionCode int32

const (
	CheckCloudResponse_UNKNOWN                CheckCloudResponse_ConnectionCode = 0
	CheckCloudResponse_AVAILABLE              CheckCloudResponse_ConnectionCode = 1
	CheckCloudResponse_BAD_CONNECTIVITY       CheckCloudResponse_ConnectionCode = 2
	CheckCloudResponse_FAILED_TLS             CheckCloudResponse_ConnectionCode = 3
	CheckCloudResponse_FAILED_AUTH            CheckCloudResponse_ConnectionCode = 4
	CheckCloudResponse_INSUFFICIENT_BANDWIDTH CheckCloudResponse_ConnectionCode = 5
)

// Enum value maps for CheckCloudResponse_ConnectionCode.
var (
	CheckCloudResponse_ConnectionCode_name = map[int32]string{
		0: "UNKNOWN",
		1: "AVAILABLE",
		2: "BAD_CONNECTIVITY",
		3: "FAILED_TLS",
		4: "FAILED_AUTH",
		5: "INSUFFICIENT_BANDWIDTH",
	}
	CheckCloudResponse_ConnectionCode_value = map[string]int32{
		"UNKNOWN":                0,
		"AVAILABLE":              1,
		"BAD_CONNECTIVITY":       2,
		"FAILED_TLS":             3,
		"FAILED_AUTH":            4,
		"INSUFFICIENT_BANDWIDTH": 5,
	}
)

func (x CheckCloudResponse_ConnectionCode) Enum() *CheckCloudResponse_ConnectionCode {
	p := new(CheckCloudResponse_ConnectionCode)
	*p = x
	return p
}

func (x CheckCloudResponse_ConnectionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckCloudResponse_ConnectionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[19].Descriptor()
}

func (CheckCloudResponse_ConnectionCode) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[19]
}

func (x CheckCloudResponse_ConnectionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckCloudResponse_ConnectionCode.Descriptor instead.
func (CheckCloudResponse_ConnectionCode) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{192, 0}
}

// A null message used by streams to verify that the client is
// still connected.
type KeepAlivePing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeepAlivePing) Reset() {
	*x = KeepAlivePing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAlivePing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAlivePing) ProtoMessage() {}

func (x *KeepAlivePing) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAlivePing.ProtoReflect.Descriptor instead.
func (*KeepAlivePing) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

// An animation trigger object.
type AnimationTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a given animation trigger.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AnimationTrigger) Reset() {
	*x = AnimationTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimationTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimationTrigger) ProtoMessage() {}

func (x *AnimationTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimationTrigger.ProtoReflect.Descriptor instead.
func (*AnimationTrigger) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *AnimationTrigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// An animation object.
type Animation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a given animation.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Animation) Reset() {
	*x = Animation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Animation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Animation) ProtoMessage() {}

func (x *Animation) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Animation.ProtoReflect.Descriptor instead.
func (*Animation) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2}
}

func (x *Animation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// See the DriveWheels rpc for more details.
type DriveWheelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftWheelMmps   float32 `protobuf:"fixed32,1,opt,name=left_wheel_mmps,json=leftWheelMmps,proto3" json:"left_wheel_mmps,omitempty"`
	RightWheelMmps  float32 `protobuf:"fixed32,2,opt,name=right_wheel_mmps,json=rightWheelMmps,proto3" json:"right_wheel_mmps,omitempty"`
	LeftWheelMmps2  float32 `protobuf:"fixed32,3,opt,name=left_wheel_mmps2,json=leftWheelMmps2,proto3" json:"left_wheel_mmps2,omitempty"`
	RightWheelMmps2 float32 `protobuf:"fixed32,4,opt,name=right_wheel_mmps2,json=rightWheelMmps2,proto3" json:"right_wheel_mmps2,omitempty"`
}

func (x *DriveWheelsRequest) Reset() {
	*x = DriveWheelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveWheelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveWheelsRequest) ProtoMessage() {}

func (x *DriveWheelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveWheelsRequest.ProtoReflect.Descriptor instead.
func (*DriveWheelsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3}
}

func (x *DriveWheelsRequest) GetLeftWheelMmps() float32 {
	if x != nil {
		return x.LeftWheelMmps
	}
	return 0
}

func (x *DriveWheelsRequest) GetRightWheelMmps() float32 {
	if x != nil {
		return x.RightWheelMmps
	}
	return 0
}

func (x *DriveWheelsRequest) GetLeftWheelMmps2() float32 {
	if x != nil {
		return x.LeftWheelMmps2
	}
	return 0
}

func (x *DriveWheelsRequest) GetRightWheelMmps2() float32 {
	if x != nil {
		return x.RightWheelMmps2
	}
	return 0
}

// See the DriveWheels rpc for more details.
type DriveWheelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A generic status.
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DriveWheelsResponse) Reset() {
	*x = DriveWheelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveWheelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveWheelsResponse) ProtoMessage() {}

func (x *DriveWheelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveWheelsResponse.ProtoReflect.Descriptor instead.
func (*DriveWheelsResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4}
}

func (x *DriveWheelsResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// See the MoveHead rpc for more details.
type MoveHeadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeedRadPerSec float32 `protobuf:"fixed32,1,opt,name=speed_rad_per_sec,json=speedRadPerSec,proto3" json:"speed_rad_per_sec,omitempty"`
}

func (x *MoveHeadRequest) Reset() {
	*x = MoveHeadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveHeadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveHeadRequest) ProtoMessage() {}

func (x *MoveHeadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveHeadRequest.ProtoReflect.Descriptor instead.
func (*MoveHeadRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{5}
}

func (x *MoveHeadRequest) GetSpeedRadPerSec() float32 {
	if x != nil {
		return x.SpeedRadPerSec
	}
	return 0
}

// See the MoveHead rpc for more details.
type MoveHeadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A generic status.
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MoveHeadResponse) Reset() {
	*x = MoveHeadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveHeadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveHeadResponse) ProtoMessage() {}

func (x *MoveHeadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveHeadResponse.ProtoReflect.Descriptor instead.
func (*MoveHeadResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{6}
}

func (x *MoveHeadResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// See the MoveLift rpc for more details.
type MoveLiftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeedRadPerSec float32 `protobuf:"fixed32,1,opt,name=speed_rad_per_sec,json=speedRadPerSec,proto3" json:"speed_rad_per_sec,omitempty"`
}

func (x *MoveLiftRequest) Reset() {
	*x = MoveLiftRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveLiftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveLiftRequest) ProtoMessage() {}

func (x *MoveLiftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveLiftRequest.ProtoReflect.Descriptor instead.
func (*MoveLiftRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{7}
}

func (x *MoveLiftRequest) GetSpeedRadPerSec() float32 {
	if x != nil {
		return x.SpeedRadPerSec
	}
	return 0
}

// See the MoveLift rpc for more details.
type MoveLiftResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A generic status.
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MoveLiftResponse) Reset() {
	*x = MoveLiftResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveLiftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveLiftResponse) ProtoMessage() {}

func (x *MoveLiftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveLiftResponse.ProtoReflect.Descriptor instead.
func (*MoveLiftResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{8}
}

func (x *MoveLiftResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// See the StopAllMotors rpc for more details.
type StopAllMotorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopAllMotorsRequest) Reset() {
	*x = StopAllMotorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopAllMotorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAllMotorsRequest) ProtoMessage() {}

func (x *StopAllMotorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAllMotorsRequest.ProtoReflect.Descriptor instead.
func (*StopAllMotorsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{9}
}

// See the StopAllMotors rpc for more details.
type StopAllMotorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StopAllMotorsResponse) Reset() {
	*x = StopAllMotorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopAllMotorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAllMotorsResponse) ProtoMessage() {}

func (x *StopAllMotorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAllMotorsResponse.ProtoReflect.Descriptor instead.
func (*StopAllMotorsResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{10}
}

func (x *StopAllMotorsResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// See PlayAnimationTrigger rpc for more details.
type PlayAnimationTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The animation trigger to play.
	AnimationTrigger *AnimationTrigger `protobuf:"bytes,1,opt,name=animation_trigger,json=animationTrigger,proto3" json:"animation_trigger,omitempty"`
	// The number of times to play the animation in a row.
	Loops uint32 `protobuf:"varint,2,opt,name=loops,proto3" json:"loops,omitempty"`
	// Automatically ignore the lift track if Vector is currently carrying an object.
	UseLiftSafe bool `protobuf:"varint,3,opt,name=use_lift_safe,json=useLiftSafe,proto3" json:"use_lift_safe,omitempty"`
	// Ignore any movement of Vector's body when playing the animation.
	IgnoreBodyTrack bool `protobuf:"varint,4,opt,name=ignore_body_track,json=ignoreBodyTrack,proto3" json:"ignore_body_track,omitempty"`
	// Ignore any movement of Vector's head when playing the animation.
	IgnoreHeadTrack bool `protobuf:"varint,5,opt,name=ignore_head_track,json=ignoreHeadTrack,proto3" json:"ignore_head_track,omitempty"`
	// Ignore any movement of Vector's lift when playing the animation.
	IgnoreLiftTrack bool `protobuf:"varint,6,opt,name=ignore_lift_track,json=ignoreLiftTrack,proto3" json:"ignore_lift_track,omitempty"`
}

func (x *PlayAnimationTriggerRequest) Reset() {
	*x = PlayAnimationTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayAnimationTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayAnimationTriggerRequest) ProtoMessage() {}

func (x *PlayAnimationTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayAnimationTriggerRequest.ProtoReflect.Descriptor instead.
func (*PlayAnimationTriggerRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{11}
}

func (x *PlayAnimationTriggerRequest) GetAnimationTrigger() *AnimationTrigger {
	if x != nil {
		return x.AnimationTrigger
	}
	return nil
}

func (x *PlayAnimationTriggerRequest) GetLoops() uint32 {
	if x != nil {
		return x.Loops
	}
	return 0
}

func (x *PlayAnimationTriggerRequest) GetUseLiftSafe() bool {
	if x != nil {
		return x.UseLiftSafe
	}
	return false
}

func (x *PlayAnimationTriggerRequest) GetIgnoreBodyTrack() bool {
	if x != nil {
		return x.IgnoreBodyTrack
	}
	return false
}

func (x *PlayAnimationTriggerRequest) GetIgnoreHeadTrack() bool {
	if x != nil {
		return x.IgnoreHeadTrack
	}
	return false
}

func (x *PlayAnimationTriggerRequest) GetIgnoreLiftTrack() bool {
	if x != nil {
		return x.IgnoreLiftTrack
	}
	return false
}

// See PlayAnimation rpc for more details.
type PlayAnimationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The animation to play.
	Animation *Animation `protobuf:"bytes,1,opt,name=animation,proto3" json:"animation,omitempty"`
	// The number of times to play the animation in a row.
	Loops uint32 `protobuf:"varint,2,opt,name=loops,proto3" json:"loops,omitempty"`
	// Ignore any movement of Vector's body in the given animation.
	IgnoreBodyTrack bool `protobuf:"varint,3,opt,name=ignore_body_track,json=ignoreBodyTrack,proto3" json:"ignore_body_track,omitempty"`
	// Ignore any movement of Vector's head in the given animation.
	IgnoreHeadTrack bool `protobuf:"varint,4,opt,name=ignore_head_track,json=ignoreHeadTrack,proto3" json:"ignore_head_track,omitempty"`
	// Ignore any movement of Vector's lift in the given animation.
	IgnoreLiftTrack bool `protobuf:"varint,5,opt,name=ignore_lift_track,json=ignoreLiftTrack,proto3" json:"ignore_lift_track,omitempty"`
}

func (x *PlayAnimationRequest) Reset() {
	*x = PlayAnimationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayAnimationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayAnimationRequest) ProtoMessage() {}

func (x *PlayAnimationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayAnimationRequest.ProtoReflect.Descriptor instead.
func (*PlayAnimationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{12}
}

func (x *PlayAnimationRequest) GetAnimation() *Animation {
	if x != nil {
		return x.Animation
	}
	return nil
}

func (x *PlayAnimationRequest) GetLoops() uint32 {
	if x != nil {
		return x.Loops
	}
	return 0
}

func (x *PlayAnimationRequest) GetIgnoreBodyTrack() bool {
	if x != nil {
		return x.IgnoreBodyTrack
	}
	return false
}

func (x *PlayAnimationRequest) GetIgnoreHeadTrack() bool {
	if x != nil {
		return x.IgnoreHeadTrack
	}
	return false
}

func (x *PlayAnimationRequest) GetIgnoreLiftTrack() bool {
	if x != nil {
		return x.IgnoreLiftTrack
	}
	return false
}

// See PlayAnimation rpc for more details.
type PlayAnimationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A generic status.
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Information on whether the animation played successfully.
	Result BehaviorResults `protobuf:"varint,2,opt,name=result,proto3,enum=Anki.Vector.external_interface.BehaviorResults" json:"result,omitempty"`
	// The animation that the robot executed.
	Animation *Animation `protobuf:"bytes,3,opt,name=animation,proto3" json:"animation,omitempty"`
}

func (x *PlayAnimationResponse) Reset() {
	*x = PlayAnimationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayAnimationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayAnimationResponse) ProtoMessage() {}

func (x *PlayAnimationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayAnimationResponse.ProtoReflect.Descriptor instead.
func (*PlayAnimationResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{13}
}

func (x *PlayAnimationResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PlayAnimationResponse) GetResult() BehaviorResults {
	if x != nil {
		return x.Result
	}
	return BehaviorResults_BEHAVIOR_INVALID_STATE
}

func (x *PlayAnimationResponse) GetAnimation() *Animation {
	if x != nil {
		return x.Animation
	}
	return nil
}

// See ListAnimations rpc for more details.
type ListAnimationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAnimationsRequest) Reset() {
	*x = ListAnimationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnimationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnimationsRequest) ProtoMessage() {}

func (x *ListAnimationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnimationsRequest.ProtoReflect.Descriptor instead.
func (*ListAnimationsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{14}
}

// See ListAnimations rpc for more details.
type ListAnimationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A generic status.
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The animations that Vector knows.
	AnimationNames []*Animation `protobuf:"bytes,2,rep,name=animation_names,json=animationNames,proto3" json:"animation_names,omitempty"`
}

func (x *ListAnimationsResponse) Reset() {
	*x = ListAnimationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnimationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnimationsResponse) ProtoMessage() {}

func (x *ListAnimationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnimationsResponse.ProtoReflect.Descriptor instead.
func (*ListAnimationsResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{15}
}

func (x *ListAnimationsResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListAnimationsResponse) GetAnimationNames() []*Animation {
	if x != nil {
		return x.AnimationNames
	}
	return nil
}

// See ListAnimationTriggers rpc for more details.
type ListAnimationTriggersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAnimationTriggersRequest) Reset() {
	*x = ListAnimationTriggersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnimationTriggersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnimationTriggersRequest) ProtoMessage() {}

func (x *ListAnimationTriggersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnimationTriggersRequest.ProtoReflect.Descriptor instead.
func (*ListAnimationTriggersRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{16}
}

// See ListAnimationTriggers rpc for more details.
type ListAnimationTriggersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A generic status.
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The animation triggers that Vector knows.
	AnimationTriggerNames []*AnimationTrigger `protobuf:"bytes,2,rep,name=animation_trigger_names,json=animationTriggerNames,proto3" json:"animation_trigger_names,omitempty"`
}

func (x *ListAnimationTriggersResponse) Reset() {
	*x = ListAnimationTriggersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnimationTriggersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnimationTriggersResponse) ProtoMessage() {}

func (x *ListAnimationTriggersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnimationTriggersResponse.ProtoReflect.Descriptor instead.
func (*ListAnimationTriggersResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{17}
}

func (x *ListAnimationTriggersResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListAnimationTriggersResponse) GetAnimationTriggerNames() []*AnimationTrigger {
	if x != nil {
		return x.AnimationTriggerNames
	}
	return nil
}

// See DisplayFaceImageRGB rpc for more details.
type DisplayFaceImageRGBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image to render.
	FaceData []byte `protobuf:"bytes,1,opt,name=face_data,json=faceData,proto3" json:"face_data,omitempty"`
	// How long to display the image on the face.
	DurationMs uint32 `protobuf:"varint,2,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// If this image should overwrite any current images on the face.
	InterruptRunning bool `protobuf:"varint,3,opt,name=interrupt_running,json=interruptRunning,proto3" json:"interrupt_running,omitempty"`
}

func (x *DisplayFaceImageRGBRequest) Reset() {
	*x = DisplayFaceImageRGBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayFaceImageRGBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayFaceImageRGBRequest) ProtoMessage() {}

func (x *DisplayFaceImageRGBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayFaceImageRGBRequest.ProtoReflect.Descriptor instead.
func (*DisplayFaceImageRGBRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{18}
}

func (x *DisplayFaceImageRGBRequest) GetFaceData() []byte {
	if x != nil {
		return x.FaceData
	}
	return nil
}

func (x *DisplayFaceImageRGBRequest) GetDurationMs() uint32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *DisplayFaceImageRGBRequest) GetInterruptRunning() bool {
	if x != nil {
		return x.InterruptRunning
	}
	return false
}

// See DisplayFaceImageRGB rpc for more details.
type DisplayFaceImageRGBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A generic status.
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DisplayFaceImageRGBResponse) Reset() {
	*x = DisplayFaceImageRGBResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayFaceImageRGBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayFaceImageRGBResponse) ProtoMessage() {}

func (x *DisplayFaceImageRGBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayFaceImageRGBResponse.ProtoReflect.Descriptor instead.
func (*DisplayFaceImageRGBResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{19}
}

func (x *DisplayFaceImageRGBResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type MeetVictorFaceScanStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MeetVictorFaceScanStarted) Reset() {
	*x = MeetVictorFaceScanStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetVictorFaceScanStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetVictorFaceScanStarted) ProtoMessage() {}

func (x *MeetVictorFaceScanStarted) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetVictorFaceScanStarted.ProtoReflect.Descriptor instead.
func (*MeetVictorFaceScanStarted) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{20}
}

type MeetVictorFaceScanComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MeetVictorFaceScanComplete) Reset() {
	*x = MeetVictorFaceScanComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetVictorFaceScanComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetVictorFaceScanComplete) ProtoMessage() {}

func (x *MeetVictorFaceScanComplete) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetVictorFaceScanComplete.ProtoReflect.Descriptor instead.
func (*MeetVictorFaceScanComplete) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{21}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StatusType:
	//	*Status_FeatureStatus
	//	*Status_MeetVictorFaceScanStarted
	//	*Status_MeetVictorFaceScanComplete
	//	*Status_FaceEnrollmentCompleted
	StatusType isStatus_StatusType `protobuf_oneof:"status_type"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{22}
}

func (m *Status) GetStatusType() isStatus_StatusType {
	if m != nil {
		return m.StatusType
	}
	return nil
}

func (x *Status) GetFeatureStatus() *FeatureStatus {
	if x, ok := x.GetStatusType().(*Status_FeatureStatus); ok {
		return x.FeatureStatus
	}
	return nil
}

func (x *Status) GetMeetVictorFaceScanStarted() *MeetVictorFaceScanStarted {
	if x, ok := x.GetStatusType().(*Status_MeetVictorFaceScanStarted); ok {
		return x.MeetVictorFaceScanStarted
	}
	return nil
}

func (x *Status) GetMeetVictorFaceScanComplete() *MeetVictorFaceScanComplete {
	if x, ok := x.GetStatusType().(*Status_MeetVictorFaceScanComplete); ok {
		return x.MeetVictorFaceScanComplete
	}
	return nil
}

func (x *Status) GetFaceEnrollmentCompleted() *FaceEnrollmentCompleted {
	if x, ok := x.GetStatusType().(*Status_FaceEnrollmentCompleted); ok {
		return x.FaceEnrollmentCompleted
	}
	return nil
}

type isStatus_StatusType interface {
	isStatus_StatusType()
}

type Status_FeatureStatus struct {
	FeatureStatus *FeatureStatus `protobuf:"bytes,1,opt,name=feature_status,json=featureStatus,proto3,oneof"`
}

type Status_MeetVictorFaceScanStarted struct {
	MeetVictorFaceScanStarted *MeetVictorFaceScanStarted `protobuf:"bytes,2,opt,name=meet_victor_face_scan_started,json=meetVictorFaceScanStarted,proto3,oneof"`
}

type Status_MeetVictorFaceScanComplete struct {
	MeetVictorFaceScanComplete *MeetVictorFaceScanComplete `protobuf:"bytes,3,opt,name=meet_victor_face_scan_complete,json=meetVictorFaceScanComplete,proto3,oneof"`
}

type Status_FaceEnrollmentCompleted struct {
	FaceEnrollmentCompleted *FaceEnrollmentCompleted `protobuf:"bytes,4,opt,name=face_enrollment_completed,json=faceEnrollmentCompleted,proto3,oneof"`
}

func (*Status_FeatureStatus) isStatus_StatusType() {}

func (*Status_MeetVictorFaceScanStarted) isStatus_StatusType() {}

func (*Status_MeetVictorFaceScanComplete) isStatus_StatusType() {}

func (*Status_FaceEnrollmentCompleted) isStatus_StatusType() {}

type WakeWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to WakeWordType:
	//	*WakeWord_WakeWordBegin
	//	*WakeWord_WakeWordEnd
	WakeWordType isWakeWord_WakeWordType `protobuf_oneof:"wake_word_type"`
}

func (x *WakeWord) Reset() {
	*x = WakeWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WakeWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WakeWord) ProtoMessage() {}

func (x *WakeWord) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WakeWord.ProtoReflect.Descriptor instead.
func (*WakeWord) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{23}
}

func (m *WakeWord) GetWakeWordType() isWakeWord_WakeWordType {
	if m != nil {
		return m.WakeWordType
	}
	return nil
}

func (x *WakeWord) GetWakeWordBegin() *WakeWordBegin {
	if x, ok := x.GetWakeWordType().(*WakeWord_WakeWordBegin); ok {
		return x.WakeWordBegin
	}
	return nil
}

func (x *WakeWord) GetWakeWordEnd() *WakeWordEnd {
	if x, ok := x.GetWakeWordType().(*WakeWord_WakeWordEnd); ok {
		return x.WakeWordEnd
	}
	return nil
}

type isWakeWord_WakeWordType interface {
	isWakeWord_WakeWordType()
}

type WakeWord_WakeWordBegin struct {
	WakeWordBegin *WakeWordBegin `protobuf:"bytes,1,opt,name=wake_word_begin,json=wakeWordBegin,proto3,oneof"`
}

type WakeWord_WakeWordEnd struct {
	WakeWordEnd *WakeWordEnd `protobuf:"bytes,2,opt,name=wake_word_end,json=wakeWordEnd,proto3,oneof"`
}

func (*WakeWord_WakeWordBegin) isWakeWord_WakeWordType() {}

func (*WakeWord_WakeWordEnd) isWakeWord_WakeWordType() {}

type TimeStampedStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TimestampUtc uint32  `protobuf:"varint,2,opt,name=timestamp_utc,json=timestampUtc,proto3" json:"timestamp_utc,omitempty"`
}

func (x *TimeStampedStatus) Reset() {
	*x = TimeStampedStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeStampedStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeStampedStatus) ProtoMessage() {}

func (x *TimeStampedStatus) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeStampedStatus.ProtoReflect.Descriptor instead.
func (*TimeStampedStatus) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{24}
}

func (x *TimeStampedStatus) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TimeStampedStatus) GetTimestampUtc() uint32 {
	if x != nil {
		return x.TimestampUtc
	}
	return 0
}

type PoseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Translation
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	// Rotation quaternion
	Q0       float32 `protobuf:"fixed32,4,opt,name=q0,proto3" json:"q0,omitempty"`
	Q1       float32 `protobuf:"fixed32,5,opt,name=q1,proto3" json:"q1,omitempty"`
	Q2       float32 `protobuf:"fixed32,6,opt,name=q2,proto3" json:"q2,omitempty"`
	Q3       float32 `protobuf:"fixed32,7,opt,name=q3,proto3" json:"q3,omitempty"`
	OriginId uint32  `protobuf:"varint,8,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"` // Which coordinate frame this pose is in (0 for none or unknown)
}

func (x *PoseStruct) Reset() {
	*x = PoseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoseStruct) ProtoMessage() {}

func (x *PoseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoseStruct.ProtoReflect.Descriptor instead.
func (*PoseStruct) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{25}
}

func (x *PoseStruct) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PoseStruct) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *PoseStruct) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *PoseStruct) GetQ0() float32 {
	if x != nil {
		return x.Q0
	}
	return 0
}

func (x *PoseStruct) GetQ1() float32 {
	if x != nil {
		return x.Q1
	}
	return 0
}

func (x *PoseStruct) GetQ2() float32 {
	if x != nil {
		return x.Q2
	}
	return 0
}

func (x *PoseStruct) GetQ3() float32 {
	if x != nil {
		return x.Q3
	}
	return 0
}

func (x *PoseStruct) GetOriginId() uint32 {
	if x != nil {
		return x.OriginId
	}
	return 0
}

// All values are in mm/s^2.
type AccelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *AccelData) Reset() {
	*x = AccelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccelData) ProtoMessage() {}

func (x *AccelData) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccelData.ProtoReflect.Descriptor instead.
func (*AccelData) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{26}
}

func (x *AccelData) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *AccelData) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *AccelData) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

// All values are in rad/s.
type GyroData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *GyroData) Reset() {
	*x = GyroData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GyroData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GyroData) ProtoMessage() {}

func (x *GyroData) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GyroData.ProtoReflect.Descriptor instead.
func (*GyroData) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{27}
}

func (x *GyroData) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *GyroData) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *GyroData) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type ProxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DistanceMm    uint32  `protobuf:"varint,1,opt,name=distance_mm,json=distanceMm,proto3" json:"distance_mm,omitempty"`
	SignalQuality float32 `protobuf:"fixed32,2,opt,name=signal_quality,json=signalQuality,proto3" json:"signal_quality,omitempty"`
	Unobstructed  bool    `protobuf:"varint,3,opt,name=unobstructed,proto3" json:"unobstructed,omitempty"`                      // The sensor has confirmed it has not detected anything up to its max range
	FoundObject   bool    `protobuf:"varint,4,opt,name=found_object,json=foundObject,proto3" json:"found_object,omitempty"`     // The sensor detected an object in the valid operating range
	IsLiftInFov   bool    `protobuf:"varint,5,opt,name=is_lift_in_fov,json=isLiftInFov,proto3" json:"is_lift_in_fov,omitempty"` // Lift (or object on lift) is occluding the sensor
}

func (x *ProxData) Reset() {
	*x = ProxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxData) ProtoMessage() {}

func (x *ProxData) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxData.ProtoReflect.Descriptor instead.
func (*ProxData) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{28}
}

func (x *ProxData) GetDistanceMm() uint32 {
	if x != nil {
		return x.DistanceMm
	}
	return 0
}

func (x *ProxData) GetSignalQuality() float32 {
	if x != nil {
		return x.SignalQuality
	}
	return 0
}

func (x *ProxData) GetUnobstructed() bool {
	if x != nil {
		return x.Unobstructed
	}
	return false
}

func (x *ProxData) GetFoundObject() bool {
	if x != nil {
		return x.FoundObject
	}
	return false
}

func (x *ProxData) GetIsLiftInFov() bool {
	if x != nil {
		return x.IsLiftInFov
	}
	return false
}

type TouchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawTouchValue  uint32 `protobuf:"varint,1,opt,name=raw_touch_value,json=rawTouchValue,proto3" json:"raw_touch_value,omitempty"`    // Raw input from the touch sensor
	IsBeingTouched bool   `protobuf:"varint,2,opt,name=is_being_touched,json=isBeingTouched,proto3" json:"is_being_touched,omitempty"` // Robot's context aware evaluation of whether it currently is or isn't being touched
}

func (x *TouchData) Reset() {
	*x = TouchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TouchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TouchData) ProtoMessage() {}

func (x *TouchData) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TouchData.ProtoReflect.Descriptor instead.
func (*TouchData) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{29}
}

func (x *TouchData) GetRawTouchValue() uint32 {
	if x != nil {
		return x.RawTouchValue
	}
	return 0
}

func (x *TouchData) GetIsBeingTouched() bool {
	if x != nil {
		return x.IsBeingTouched
	}
	return false
}

type RobotState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pose                  *PoseStruct `protobuf:"bytes,1,opt,name=pose,proto3" json:"pose,omitempty"`
	PoseAngleRad          float32     `protobuf:"fixed32,2,opt,name=pose_angle_rad,json=poseAngleRad,proto3" json:"pose_angle_rad,omitempty"`
	PosePitchRad          float32     `protobuf:"fixed32,3,opt,name=pose_pitch_rad,json=posePitchRad,proto3" json:"pose_pitch_rad,omitempty"`
	LeftWheelSpeedMmps    float32     `protobuf:"fixed32,4,opt,name=left_wheel_speed_mmps,json=leftWheelSpeedMmps,proto3" json:"left_wheel_speed_mmps,omitempty"`
	RightWheelSpeedMmps   float32     `protobuf:"fixed32,5,opt,name=right_wheel_speed_mmps,json=rightWheelSpeedMmps,proto3" json:"right_wheel_speed_mmps,omitempty"`
	HeadAngleRad          float32     `protobuf:"fixed32,6,opt,name=head_angle_rad,json=headAngleRad,proto3" json:"head_angle_rad,omitempty"`
	LiftHeightMm          float32     `protobuf:"fixed32,7,opt,name=lift_height_mm,json=liftHeightMm,proto3" json:"lift_height_mm,omitempty"`
	Accel                 *AccelData  `protobuf:"bytes,8,opt,name=accel,proto3" json:"accel,omitempty"`
	Gyro                  *GyroData   `protobuf:"bytes,9,opt,name=gyro,proto3" json:"gyro,omitempty"`
	CarryingObjectId      int32       `protobuf:"varint,10,opt,name=carrying_object_id,json=carryingObjectId,proto3" json:"carrying_object_id,omitempty"`
	CarryingObjectOnTopId int32       `protobuf:"varint,11,opt,name=carrying_object_on_top_id,json=carryingObjectOnTopId,proto3" json:"carrying_object_on_top_id,omitempty"` // Not supported by engine
	HeadTrackingObjectId  int32       `protobuf:"varint,12,opt,name=head_tracking_object_id,json=headTrackingObjectId,proto3" json:"head_tracking_object_id,omitempty"`
	LocalizedToObjectId   int32       `protobuf:"varint,13,opt,name=localized_to_object_id,json=localizedToObjectId,proto3" json:"localized_to_object_id,omitempty"`
	LastImageTimeStamp    uint32      `protobuf:"varint,14,opt,name=last_image_time_stamp,json=lastImageTimeStamp,proto3" json:"last_image_time_stamp,omitempty"`
	Status                uint32      `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	ProxData              *ProxData   `protobuf:"bytes,16,opt,name=prox_data,json=proxData,proto3" json:"prox_data,omitempty"`
	TouchData             *TouchData  `protobuf:"bytes,17,opt,name=touch_data,json=touchData,proto3" json:"touch_data,omitempty"`
}

func (x *RobotState) Reset() {
	*x = RobotState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotState) ProtoMessage() {}

func (x *RobotState) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotState.ProtoReflect.Descriptor instead.
func (*RobotState) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{30}
}

func (x *RobotState) GetPose() *PoseStruct {
	if x != nil {
		return x.Pose
	}
	return nil
}

func (x *RobotState) GetPoseAngleRad() float32 {
	if x != nil {
		return x.PoseAngleRad
	}
	return 0
}

func (x *RobotState) GetPosePitchRad() float32 {
	if x != nil {
		return x.PosePitchRad
	}
	return 0
}

func (x *RobotState) GetLeftWheelSpeedMmps() float32 {
	if x != nil {
		return x.LeftWheelSpeedMmps
	}
	return 0
}

func (x *RobotState) GetRightWheelSpeedMmps() float32 {
	if x != nil {
		return x.RightWheelSpeedMmps
	}
	return 0
}

func (x *RobotState) GetHeadAngleRad() float32 {
	if x != nil {
		return x.HeadAngleRad
	}
	return 0
}

func (x *RobotState) GetLiftHeightMm() float32 {
	if x != nil {
		return x.LiftHeightMm
	}
	return 0
}

func (x *RobotState) GetAccel() *AccelData {
	if x != nil {
		return x.Accel
	}
	return nil
}

func (x *RobotState) GetGyro() *GyroData {
	if x != nil {
		return x.Gyro
	}
	return nil
}

func (x *RobotState) GetCarryingObjectId() int32 {
	if x != nil {
		return x.CarryingObjectId
	}
	return 0
}

func (x *RobotState) GetCarryingObjectOnTopId() int32 {
	if x != nil {
		return x.CarryingObjectOnTopId
	}
	return 0
}

func (x *RobotState) GetHeadTrackingObjectId() int32 {
	if x != nil {
		return x.HeadTrackingObjectId
	}
	return 0
}

func (x *RobotState) GetLocalizedToObjectId() int32 {
	if x != nil {
		return x.LocalizedToObjectId
	}
	return 0
}

func (x *RobotState) GetLastImageTimeStamp() uint32 {
	if x != nil {
		return x.LastImageTimeStamp
	}
	return 0
}

func (x *RobotState) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RobotState) GetProxData() *ProxData {
	if x != nil {
		return x.ProxData
	}
	return nil
}

func (x *RobotState) GetTouchData() *TouchData {
	if x != nil {
		return x.TouchData
	}
	return nil
}

type CladPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *CladPoint) Reset() {
	*x = CladPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CladPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CladPoint) ProtoMessage() {}

func (x *CladPoint) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CladPoint.ProtoReflect.Descriptor instead.
func (*CladPoint) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{31}
}

func (x *CladPoint) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CladPoint) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type CladRect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTopLeft float32 `protobuf:"fixed32,1,opt,name=x_top_left,json=xTopLeft,proto3" json:"x_top_left,omitempty"`
	YTopLeft float32 `protobuf:"fixed32,2,opt,name=y_top_left,json=yTopLeft,proto3" json:"y_top_left,omitempty"`
	Width    float32 `protobuf:"fixed32,3,opt,name=width,proto3" json:"width,omitempty"`
	Height   float32 `protobuf:"fixed32,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *CladRect) Reset() {
	*x = CladRect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CladRect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CladRect) ProtoMessage() {}

func (x *CladRect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CladRect.ProtoReflect.Descriptor instead.
func (*CladRect) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{32}
}

func (x *CladRect) GetXTopLeft() float32 {
	if x != nil {
		return x.XTopLeft
	}
	return 0
}

func (x *CladRect) GetYTopLeft() float32 {
	if x != nil {
		return x.YTopLeft
	}
	return 0
}

func (x *CladRect) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CladRect) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type RobotObservedFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceId     int32            `protobuf:"varint,1,opt,name=face_id,json=faceId,proto3" json:"face_id,omitempty"` // negative: tracked but not recognized; positive: recognized face
	Timestamp  uint32           `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Pose       *PoseStruct      `protobuf:"bytes,3,opt,name=pose,proto3" json:"pose,omitempty"`
	ImgRect    *CladRect        `protobuf:"bytes,4,opt,name=img_rect,json=imgRect,proto3" json:"img_rect,omitempty"` // position in image coords
	Name       string           `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                      // Empty if none assigned yet
	Expression FacialExpression `protobuf:"varint,6,opt,name=expression,proto3,enum=Anki.Vector.external_interface.FacialExpression" json:"expression,omitempty"`
	// Individual expression values histogram, sums to 100 (Exception: all zero if expression=Unknown)
	ExpressionValues []uint32 `protobuf:"varint,7,rep,packed,name=expression_values,json=expressionValues,proto3" json:"expression_values,omitempty"`
	// Face landmarks
	LeftEye  []*CladPoint `protobuf:"bytes,8,rep,name=left_eye,json=leftEye,proto3" json:"left_eye,omitempty"`
	RightEye []*CladPoint `protobuf:"bytes,9,rep,name=right_eye,json=rightEye,proto3" json:"right_eye,omitempty"`
	Nose     []*CladPoint `protobuf:"bytes,10,rep,name=nose,proto3" json:"nose,omitempty"`
	Mouth    []*CladPoint `protobuf:"bytes,11,rep,name=mouth,proto3" json:"mouth,omitempty"`
}

func (x *RobotObservedFace) Reset() {
	*x = RobotObservedFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotObservedFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotObservedFace) ProtoMessage() {}

func (x *RobotObservedFace) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotObservedFace.ProtoReflect.Descriptor instead.
func (*RobotObservedFace) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{33}
}

func (x *RobotObservedFace) GetFaceId() int32 {
	if x != nil {
		return x.FaceId
	}
	return 0
}

func (x *RobotObservedFace) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RobotObservedFace) GetPose() *PoseStruct {
	if x != nil {
		return x.Pose
	}
	return nil
}

func (x *RobotObservedFace) GetImgRect() *CladRect {
	if x != nil {
		return x.ImgRect
	}
	return nil
}

func (x *RobotObservedFace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RobotObservedFace) GetExpression() FacialExpression {
	if x != nil {
		return x.Expression
	}
	return FacialExpression_EXPRESSION_UNKNOWN
}

func (x *RobotObservedFace) GetExpressionValues() []uint32 {
	if x != nil {
		return x.ExpressionValues
	}
	return nil
}

func (x *RobotObservedFace) GetLeftEye() []*CladPoint {
	if x != nil {
		return x.LeftEye
	}
	return nil
}

func (x *RobotObservedFace) GetRightEye() []*CladPoint {
	if x != nil {
		return x.RightEye
	}
	return nil
}

func (x *RobotObservedFace) GetNose() []*CladPoint {
	if x != nil {
		return x.Nose
	}
	return nil
}

func (x *RobotObservedFace) GetMouth() []*CladPoint {
	if x != nil {
		return x.Mouth
	}
	return nil
}

// RobotChangedObservedFaceID
//  This generally happens when a tracked face (negative ID) is recognized and
//  receives a positive ID or when face records get merged
type RobotChangedObservedFaceID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldId int32 `protobuf:"varint,1,opt,name=old_id,json=oldId,proto3" json:"old_id,omitempty"`
	NewId int32 `protobuf:"varint,2,opt,name=new_id,json=newId,proto3" json:"new_id,omitempty"`
}

func (x *RobotChangedObservedFaceID) Reset() {
	*x = RobotChangedObservedFaceID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotChangedObservedFaceID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotChangedObservedFaceID) ProtoMessage() {}

func (x *RobotChangedObservedFaceID) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotChangedObservedFaceID.ProtoReflect.Descriptor instead.
func (*RobotChangedObservedFaceID) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{34}
}

func (x *RobotChangedObservedFaceID) GetOldId() int32 {
	if x != nil {
		return x.OldId
	}
	return 0
}

func (x *RobotChangedObservedFaceID) GetNewId() int32 {
	if x != nil {
		return x.NewId
	}
	return 0
}

type FaceEnrollmentCompleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result FaceEnrollmentResult `protobuf:"varint,1,opt,name=result,proto3,enum=Anki.Vector.external_interface.FaceEnrollmentResult" json:"result,omitempty"`
	FaceId int32                `protobuf:"varint,2,opt,name=face_id,json=faceId,proto3" json:"face_id,omitempty"`
	Name   string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FaceEnrollmentCompleted) Reset() {
	*x = FaceEnrollmentCompleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaceEnrollmentCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceEnrollmentCompleted) ProtoMessage() {}

func (x *FaceEnrollmentCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceEnrollmentCompleted.ProtoReflect.Descriptor instead.
func (*FaceEnrollmentCompleted) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{35}
}

func (x *FaceEnrollmentCompleted) GetResult() FaceEnrollmentResult {
	if x != nil {
		return x.Result
	}
	return FaceEnrollmentResult_SUCCESS
}

func (x *FaceEnrollmentCompleted) GetFaceId() int32 {
	if x != nil {
		return x.FaceId
	}
	return 0
}

func (x *FaceEnrollmentCompleted) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CancelFaceEnrollmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelFaceEnrollmentRequest) Reset() {
	*x = CancelFaceEnrollmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelFaceEnrollmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelFaceEnrollmentRequest) ProtoMessage() {}

func (x *CancelFaceEnrollmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelFaceEnrollmentRequest.ProtoReflect.Descriptor instead.
func (*CancelFaceEnrollmentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{36}
}

type CancelFaceEnrollmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CancelFaceEnrollmentResponse) Reset() {
	*x = CancelFaceEnrollmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelFaceEnrollmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelFaceEnrollmentResponse) ProtoMessage() {}

func (x *CancelFaceEnrollmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelFaceEnrollmentResponse.ProtoReflect.Descriptor instead.
func (*CancelFaceEnrollmentResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{37}
}

func (x *CancelFaceEnrollmentResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type RequestEnrolledNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestEnrolledNamesRequest) Reset() {
	*x = RequestEnrolledNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestEnrolledNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEnrolledNamesRequest) ProtoMessage() {}

func (x *RequestEnrolledNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestEnrolledNamesRequest.ProtoReflect.Descriptor instead.
func (*RequestEnrolledNamesRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{38}
}

type LoadedKnownFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecondsSinceFirstEnrolled int64  `protobuf:"varint,1,opt,name=seconds_since_first_enrolled,json=secondsSinceFirstEnrolled,proto3" json:"seconds_since_first_enrolled,omitempty"`
	SecondsSinceLastUpdated   int64  `protobuf:"varint,2,opt,name=seconds_since_last_updated,json=secondsSinceLastUpdated,proto3" json:"seconds_since_last_updated,omitempty"`
	SecondsSinceLastSeen      int64  `protobuf:"varint,3,opt,name=seconds_since_last_seen,json=secondsSinceLastSeen,proto3" json:"seconds_since_last_seen,omitempty"`
	LastSeenSecondsSinceEpoch int64  `protobuf:"varint,4,opt,name=last_seen_seconds_since_epoch,json=lastSeenSecondsSinceEpoch,proto3" json:"last_seen_seconds_since_epoch,omitempty"`
	FaceId                    int32  `protobuf:"varint,5,opt,name=face_id,json=faceId,proto3" json:"face_id,omitempty"`
	Name                      string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LoadedKnownFace) Reset() {
	*x = LoadedKnownFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadedKnownFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadedKnownFace) ProtoMessage() {}

func (x *LoadedKnownFace) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadedKnownFace.ProtoReflect.Descriptor instead.
func (*LoadedKnownFace) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{39}
}

func (x *LoadedKnownFace) GetSecondsSinceFirstEnrolled() int64 {
	if x != nil {
		return x.SecondsSinceFirstEnrolled
	}
	return 0
}

func (x *LoadedKnownFace) GetSecondsSinceLastUpdated() int64 {
	if x != nil {
		return x.SecondsSinceLastUpdated
	}
	return 0
}

func (x *LoadedKnownFace) GetSecondsSinceLastSeen() int64 {
	if x != nil {
		return x.SecondsSinceLastSeen
	}
	return 0
}

func (x *LoadedKnownFace) GetLastSeenSecondsSinceEpoch() int64 {
	if x != nil {
		return x.LastSeenSecondsSinceEpoch
	}
	return 0
}

func (x *LoadedKnownFace) GetFaceId() int32 {
	if x != nil {
		return x.FaceId
	}
	return 0
}

func (x *LoadedKnownFace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RobotRenamedEnrolledFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceId int32  `protobuf:"varint,1,opt,name=face_id,json=faceId,proto3" json:"face_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RobotRenamedEnrolledFace) Reset() {
	*x = RobotRenamedEnrolledFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotRenamedEnrolledFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotRenamedEnrolledFace) ProtoMessage() {}

func (x *RobotRenamedEnrolledFace) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotRenamedEnrolledFace.ProtoReflect.Descriptor instead.
func (*RobotRenamedEnrolledFace) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{40}
}

func (x *RobotRenamedEnrolledFace) GetFaceId() int32 {
	if x != nil {
		return x.FaceId
	}
	return 0
}

func (x *RobotRenamedEnrolledFace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RequestEnrolledNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Faces  []*LoadedKnownFace `protobuf:"bytes,2,rep,name=faces,proto3" json:"faces,omitempty"`
}

func (x *RequestEnrolledNamesResponse) Reset() {
	*x = RequestEnrolledNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestEnrolledNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEnrolledNamesResponse) ProtoMessage() {}

func (x *RequestEnrolledNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestEnrolledNamesResponse.ProtoReflect.Descriptor instead.
func (*RequestEnrolledNamesResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{41}
}

func (x *RequestEnrolledNamesResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RequestEnrolledNamesResponse) GetFaces() []*LoadedKnownFace {
	if x != nil {
		return x.Faces
	}
	return nil
}

type UpdateEnrolledFaceByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceId  int32  `protobuf:"varint,1,opt,name=face_id,json=faceId,proto3" json:"face_id,omitempty"`
	OldName string `protobuf:"bytes,2,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	NewName string `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *UpdateEnrolledFaceByIDRequest) Reset() {
	*x = UpdateEnrolledFaceByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnrolledFaceByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnrolledFaceByIDRequest) ProtoMessage() {}

func (x *UpdateEnrolledFaceByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnrolledFaceByIDRequest.ProtoReflect.Descriptor instead.
func (*UpdateEnrolledFaceByIDRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateEnrolledFaceByIDRequest) GetFaceId() int32 {
	if x != nil {
		return x.FaceId
	}
	return 0
}

func (x *UpdateEnrolledFaceByIDRequest) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *UpdateEnrolledFaceByIDRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type UpdateEnrolledFaceByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateEnrolledFaceByIDResponse) Reset() {
	*x = UpdateEnrolledFaceByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnrolledFaceByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnrolledFaceByIDResponse) ProtoMessage() {}

func (x *UpdateEnrolledFaceByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnrolledFaceByIDResponse.ProtoReflect.Descriptor instead.
func (*UpdateEnrolledFaceByIDResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateEnrolledFaceByIDResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type EraseEnrolledFaceByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceId int32 `protobuf:"varint,1,opt,name=face_id,json=faceId,proto3" json:"face_id,omitempty"`
}

func (x *EraseEnrolledFaceByIDRequest) Reset() {
	*x = EraseEnrolledFaceByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EraseEnrolledFaceByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EraseEnrolledFaceByIDRequest) ProtoMessage() {}

func (x *EraseEnrolledFaceByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EraseEnrolledFaceByIDRequest.ProtoReflect.Descriptor instead.
func (*EraseEnrolledFaceByIDRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{44}
}

func (x *EraseEnrolledFaceByIDRequest) GetFaceId() int32 {
	if x != nil {
		return x.FaceId
	}
	return 0
}

type EraseEnrolledFaceByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *EraseEnrolledFaceByIDResponse) Reset() {
	*x = EraseEnrolledFaceByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EraseEnrolledFaceByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EraseEnrolledFaceByIDResponse) ProtoMessage() {}

func (x *EraseEnrolledFaceByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EraseEnrolledFaceByIDResponse.ProtoReflect.Descriptor instead.
func (*EraseEnrolledFaceByIDResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{45}
}

func (x *EraseEnrolledFaceByIDResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type EraseAllEnrolledFacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EraseAllEnrolledFacesRequest) Reset() {
	*x = EraseAllEnrolledFacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EraseAllEnrolledFacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EraseAllEnrolledFacesRequest) ProtoMessage() {}

func (x *EraseAllEnrolledFacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EraseAllEnrolledFacesRequest.ProtoReflect.Descriptor instead.
func (*EraseAllEnrolledFacesRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{46}
}

type EraseAllEnrolledFacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *EraseAllEnrolledFacesResponse) Reset() {
	*x = EraseAllEnrolledFacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EraseAllEnrolledFacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EraseAllEnrolledFacesResponse) ProtoMessage() {}

func (x *EraseAllEnrolledFacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EraseAllEnrolledFacesResponse.ProtoReflect.Descriptor instead.
func (*EraseAllEnrolledFacesResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{47}
}

func (x *EraseAllEnrolledFacesResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type SetFaceToEnrollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ObservedId  int32  `protobuf:"varint,2,opt,name=observed_id,json=observedId,proto3" json:"observed_id,omitempty"`      // The ID of a specific observed face to enroll (0 for next one we see)
	SaveId      int32  `protobuf:"varint,3,opt,name=save_id,json=saveId,proto3" json:"save_id,omitempty"`                  // The ID of an existing face to merge final enrollment into (0 for none,
	SaveToRobot bool   `protobuf:"varint,4,opt,name=save_to_robot,json=saveToRobot,proto3" json:"save_to_robot,omitempty"` // Save to robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)
	SayName     bool   `protobuf:"varint,5,opt,name=say_name,json=sayName,proto3" json:"say_name,omitempty"`               // Play say-name/celebration animations on success before completing
	UseMusic    bool   `protobuf:"varint,6,opt,name=use_music,json=useMusic,proto3" json:"use_music,omitempty"`            // Starts special music during say-name animations (will leave music playing!)
}

func (x *SetFaceToEnrollRequest) Reset() {
	*x = SetFaceToEnrollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFaceToEnrollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFaceToEnrollRequest) ProtoMessage() {}

func (x *SetFaceToEnrollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFaceToEnrollRequest.ProtoReflect.Descriptor instead.
func (*SetFaceToEnrollRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{48}
}

func (x *SetFaceToEnrollRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetFaceToEnrollRequest) GetObservedId() int32 {
	if x != nil {
		return x.ObservedId
	}
	return 0
}

func (x *SetFaceToEnrollRequest) GetSaveId() int32 {
	if x != nil {
		return x.SaveId
	}
	return 0
}

func (x *SetFaceToEnrollRequest) GetSaveToRobot() bool {
	if x != nil {
		return x.SaveToRobot
	}
	return false
}

func (x *SetFaceToEnrollRequest) GetSayName() bool {
	if x != nil {
		return x.SayName
	}
	return false
}

func (x *SetFaceToEnrollRequest) GetUseMusic() bool {
	if x != nil {
		return x.UseMusic
	}
	return false
}

type SetFaceToEnrollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetFaceToEnrollResponse) Reset() {
	*x = SetFaceToEnrollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFaceToEnrollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFaceToEnrollResponse) ProtoMessage() {}

func (x *SetFaceToEnrollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFaceToEnrollResponse.ProtoReflect.Descriptor instead.
func (*SetFaceToEnrollResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{49}
}

func (x *SetFaceToEnrollResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type DriveOffChargerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DriveOffChargerRequest) Reset() {
	*x = DriveOffChargerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveOffChargerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveOffChargerRequest) ProtoMessage() {}

func (x *DriveOffChargerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveOffChargerRequest.ProtoReflect.Descriptor instead.
func (*DriveOffChargerRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{50}
}

type DriveOffChargerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result BehaviorResults `protobuf:"varint,2,opt,name=result,proto3,enum=Anki.Vector.external_interface.BehaviorResults" json:"result,omitempty"`
}

func (x *DriveOffChargerResponse) Reset() {
	*x = DriveOffChargerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveOffChargerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveOffChargerResponse) ProtoMessage() {}

func (x *DriveOffChargerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveOffChargerResponse.ProtoReflect.Descriptor instead.
func (*DriveOffChargerResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{51}
}

func (x *DriveOffChargerResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DriveOffChargerResponse) GetResult() BehaviorResults {
	if x != nil {
		return x.Result
	}
	return BehaviorResults_BEHAVIOR_INVALID_STATE
}

type DriveOnChargerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DriveOnChargerRequest) Reset() {
	*x = DriveOnChargerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveOnChargerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveOnChargerRequest) ProtoMessage() {}

func (x *DriveOnChargerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveOnChargerRequest.ProtoReflect.Descriptor instead.
func (*DriveOnChargerRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{52}
}

type DriveOnChargerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result BehaviorResults `protobuf:"varint,2,opt,name=result,proto3,enum=Anki.Vector.external_interface.BehaviorResults" json:"result,omitempty"`
}

func (x *DriveOnChargerResponse) Reset() {
	*x = DriveOnChargerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveOnChargerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveOnChargerResponse) ProtoMessage() {}

func (x *DriveOnChargerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveOnChargerResponse.ProtoReflect.Descriptor instead.
func (*DriveOnChargerResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{53}
}

func (x *DriveOnChargerResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DriveOnChargerResponse) GetResult() BehaviorResults {
	if x != nil {
		return x.Result
	}
	return BehaviorResults_BEHAVIOR_INVALID_STATE
}

type FindFacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindFacesRequest) Reset() {
	*x = FindFacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFacesRequest) ProtoMessage() {}

func (x *FindFacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFacesRequest.ProtoReflect.Descriptor instead.
func (*FindFacesRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{54}
}

type FindFacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result BehaviorResults `protobuf:"varint,2,opt,name=result,proto3,enum=Anki.Vector.external_interface.BehaviorResults" json:"result,omitempty"`
}

func (x *FindFacesResponse) Reset() {
	*x = FindFacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFacesResponse) ProtoMessage() {}

func (x *FindFacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFacesResponse.ProtoReflect.Descriptor instead.
func (*FindFacesResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{55}
}

func (x *FindFacesResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindFacesResponse) GetResult() BehaviorResults {
	if x != nil {
		return x.Result
	}
	return BehaviorResults_BEHAVIOR_INVALID_STATE
}

type LookAroundInPlaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LookAroundInPlaceRequest) Reset() {
	*x = LookAroundInPlaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookAroundInPlaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookAroundInPlaceRequest) ProtoMessage() {}

func (x *LookAroundInPlaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookAroundInPlaceRequest.ProtoReflect.Descriptor instead.
func (*LookAroundInPlaceRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{56}
}

type LookAroundInPlaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result BehaviorResults `protobuf:"varint,2,opt,name=result,proto3,enum=Anki.Vector.external_interface.BehaviorResults" json:"result,omitempty"`
}

func (x *LookAroundInPlaceResponse) Reset() {
	*x = LookAroundInPlaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookAroundInPlaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookAroundInPlaceResponse) ProtoMessage() {}

func (x *LookAroundInPlaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookAroundInPlaceResponse.ProtoReflect.Descriptor instead.
func (*LookAroundInPlaceResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{57}
}

func (x *LookAroundInPlaceResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *LookAroundInPlaceResponse) GetResult() BehaviorResults {
	if x != nil {
		return x.Result
	}
	return BehaviorResults_BEHAVIOR_INVALID_STATE
}

//this triggers a Vector Behavior, different from RollObjectRequest which triggers an Action
type RollBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RollBlockRequest) Reset() {
	*x = RollBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollBlockRequest) ProtoMessage() {}

func (x *RollBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollBlockRequest.ProtoReflect.Descriptor instead.
func (*RollBlockRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{58}
}

type RollBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result BehaviorResults `protobuf:"varint,2,opt,name=result,proto3,enum=Anki.Vector.external_interface.BehaviorResults" json:"result,omitempty"`
}

func (x *RollBlockResponse) Reset() {
	*x = RollBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollBlockResponse) ProtoMessage() {}

func (x *RollBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollBlockResponse.ProtoReflect.Descriptor instead.
func (*RollBlockResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{59}
}

func (x *RollBlockResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RollBlockResponse) GetResult() BehaviorResults {
	if x != nil {
		return x.Result
	}
	return BehaviorResults_BEHAVIOR_INVALID_STATE
}

type WakeWordBegin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WakeWordBegin) Reset() {
	*x = WakeWordBegin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WakeWordBegin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WakeWordBegin) ProtoMessage() {}

func (x *WakeWordBegin) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WakeWordBegin.ProtoReflect.Descriptor instead.
func (*WakeWordBegin) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{60}
}

type WakeWordEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntentHeard bool   `protobuf:"varint,1,opt,name=intent_heard,json=intentHeard,proto3" json:"intent_heard,omitempty"`
	IntentJson  string `protobuf:"bytes,2,opt,name=intent_json,json=intentJson,proto3" json:"intent_json,omitempty"`
}

func (x *WakeWordEnd) Reset() {
	*x = WakeWordEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WakeWordEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WakeWordEnd) ProtoMessage() {}

func (x *WakeWordEnd) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WakeWordEnd.ProtoReflect.Descriptor instead.
func (*WakeWordEnd) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{61}
}

func (x *WakeWordEnd) GetIntentHeard() bool {
	if x != nil {
		return x.IntentHeard
	}
	return false
}

func (x *WakeWordEnd) GetIntentJson() string {
	if x != nil {
		return x.IntentJson
	}
	return ""
}

type UserIntent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntentId uint32 `protobuf:"varint,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	JsonData string `protobuf:"bytes,2,opt,name=json_data,json=jsonData,proto3" json:"json_data,omitempty"`
}

func (x *UserIntent) Reset() {
	*x = UserIntent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIntent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIntent) ProtoMessage() {}

func (x *UserIntent) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIntent.ProtoReflect.Descriptor instead.
func (*UserIntent) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{62}
}

func (x *UserIntent) GetIntentId() uint32 {
	if x != nil {
		return x.IntentId
	}
	return 0
}

func (x *UserIntent) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

type PhotoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoId          uint32 `protobuf:"varint,1,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
	TimestampUtc     uint32 `protobuf:"varint,2,opt,name=timestamp_utc,json=timestampUtc,proto3" json:"timestamp_utc,omitempty"`
	PhotoCopiedToApp bool   `protobuf:"varint,3,opt,name=photo_copied_to_app,json=photoCopiedToApp,proto3" json:"photo_copied_to_app,omitempty"`
	ThumbCopiedToApp bool   `protobuf:"varint,4,opt,name=thumb_copied_to_app,json=thumbCopiedToApp,proto3" json:"thumb_copied_to_app,omitempty"`
}

func (x *PhotoInfo) Reset() {
	*x = PhotoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoInfo) ProtoMessage() {}

func (x *PhotoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoInfo.ProtoReflect.Descriptor instead.
func (*PhotoInfo) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{63}
}

func (x *PhotoInfo) GetPhotoId() uint32 {
	if x != nil {
		return x.PhotoId
	}
	return 0
}

func (x *PhotoInfo) GetTimestampUtc() uint32 {
	if x != nil {
		return x.TimestampUtc
	}
	return 0
}

func (x *PhotoInfo) GetPhotoCopiedToApp() bool {
	if x != nil {
		return x.PhotoCopiedToApp
	}
	return false
}

func (x *PhotoInfo) GetThumbCopiedToApp() bool {
	if x != nil {
		return x.ThumbCopiedToApp
	}
	return false
}

type PhotosInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PhotosInfoRequest) Reset() {
	*x = PhotosInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotosInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotosInfoRequest) ProtoMessage() {}

func (x *PhotosInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotosInfoRequest.ProtoReflect.Descriptor instead.
func (*PhotosInfoRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{64}
}

type PhotosInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PhotoInfos []*PhotoInfo    `protobuf:"bytes,2,rep,name=photo_infos,json=photoInfos,proto3" json:"photo_infos,omitempty"`
}

func (x *PhotosInfoResponse) Reset() {
	*x = PhotosInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotosInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotosInfoResponse) ProtoMessage() {}

func (x *PhotosInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotosInfoResponse.ProtoReflect.Descriptor instead.
func (*PhotosInfoResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{65}
}

func (x *PhotosInfoResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PhotosInfoResponse) GetPhotoInfos() []*PhotoInfo {
	if x != nil {
		return x.PhotoInfos
	}
	return nil
}

type PhotoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoId uint32 `protobuf:"varint,1,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
}

func (x *PhotoRequest) Reset() {
	*x = PhotoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoRequest) ProtoMessage() {}

func (x *PhotoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoRequest.ProtoReflect.Descriptor instead.
func (*PhotoRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{66}
}

func (x *PhotoRequest) GetPhotoId() uint32 {
	if x != nil {
		return x.PhotoId
	}
	return 0
}

type PhotoPathMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	FullPath string `protobuf:"bytes,2,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
}

func (x *PhotoPathMessage) Reset() {
	*x = PhotoPathMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoPathMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoPathMessage) ProtoMessage() {}

func (x *PhotoPathMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoPathMessage.ProtoReflect.Descriptor instead.
func (*PhotoPathMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{67}
}

func (x *PhotoPathMessage) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PhotoPathMessage) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

type PhotoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Success bool            `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Image   []byte          `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *PhotoResponse) Reset() {
	*x = PhotoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoResponse) ProtoMessage() {}

func (x *PhotoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoResponse.ProtoReflect.Descriptor instead.
func (*PhotoResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{68}
}

func (x *PhotoResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PhotoResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PhotoResponse) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type ThumbnailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoId uint32 `protobuf:"varint,1,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
}

func (x *ThumbnailRequest) Reset() {
	*x = ThumbnailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailRequest) ProtoMessage() {}

func (x *ThumbnailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailRequest.ProtoReflect.Descriptor instead.
func (*ThumbnailRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{69}
}

func (x *ThumbnailRequest) GetPhotoId() uint32 {
	if x != nil {
		return x.PhotoId
	}
	return 0
}

type ThumbnailPathMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	FullPath string `protobuf:"bytes,2,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
}

func (x *ThumbnailPathMessage) Reset() {
	*x = ThumbnailPathMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailPathMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailPathMessage) ProtoMessage() {}

func (x *ThumbnailPathMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailPathMessage.ProtoReflect.Descriptor instead.
func (*ThumbnailPathMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{70}
}

func (x *ThumbnailPathMessage) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ThumbnailPathMessage) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

type ThumbnailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Success bool            `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Image   []byte          `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ThumbnailResponse) Reset() {
	*x = ThumbnailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailResponse) ProtoMessage() {}

func (x *ThumbnailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailResponse.ProtoReflect.Descriptor instead.
func (*ThumbnailResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{71}
}

func (x *ThumbnailResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ThumbnailResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ThumbnailResponse) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type DeletePhotoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoId uint32 `protobuf:"varint,1,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
}

func (x *DeletePhotoRequest) Reset() {
	*x = DeletePhotoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePhotoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePhotoRequest) ProtoMessage() {}

func (x *DeletePhotoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePhotoRequest.ProtoReflect.Descriptor instead.
func (*DeletePhotoRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{72}
}

func (x *DeletePhotoRequest) GetPhotoId() uint32 {
	if x != nil {
		return x.PhotoId
	}
	return 0
}

type DeletePhotoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Success bool            `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeletePhotoResponse) Reset() {
	*x = DeletePhotoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePhotoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePhotoResponse) ProtoMessage() {}

func (x *DeletePhotoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePhotoResponse.ProtoReflect.Descriptor instead.
func (*DeletePhotoResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{73}
}

func (x *DeletePhotoResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeletePhotoResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PhotoTaken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoId uint32 `protobuf:"varint,1,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
}

func (x *PhotoTaken) Reset() {
	*x = PhotoTaken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoTaken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoTaken) ProtoMessage() {}

func (x *PhotoTaken) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoTaken.ProtoReflect.Descriptor instead.
func (*PhotoTaken) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{74}
}

func (x *PhotoTaken) GetPhotoId() uint32 {
	if x != nil {
		return x.PhotoId
	}
	return 0
}

// Struct containing all the information relevant to how a
// path should be modified or traversed.
type PathMotionProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeedMmps                float32 `protobuf:"fixed32,1,opt,name=speed_mmps,json=speedMmps,proto3" json:"speed_mmps,omitempty"`
	AccelMmps2               float32 `protobuf:"fixed32,2,opt,name=accel_mmps2,json=accelMmps2,proto3" json:"accel_mmps2,omitempty"`
	DecelMmps2               float32 `protobuf:"fixed32,3,opt,name=decel_mmps2,json=decelMmps2,proto3" json:"decel_mmps2,omitempty"`
	PointTurnSpeedRadPerSec  float32 `protobuf:"fixed32,4,opt,name=point_turn_speed_rad_per_sec,json=pointTurnSpeedRadPerSec,proto3" json:"point_turn_speed_rad_per_sec,omitempty"`
	PointTurnAccelRadPerSec2 float32 `protobuf:"fixed32,5,opt,name=point_turn_accel_rad_per_sec2,json=pointTurnAccelRadPerSec2,proto3" json:"point_turn_accel_rad_per_sec2,omitempty"`
	PointTurnDecelRadPerSec2 float32 `protobuf:"fixed32,6,opt,name=point_turn_decel_rad_per_sec2,json=pointTurnDecelRadPerSec2,proto3" json:"point_turn_decel_rad_per_sec2,omitempty"`
	DockSpeedMmps            float32 `protobuf:"fixed32,7,opt,name=dock_speed_mmps,json=dockSpeedMmps,proto3" json:"dock_speed_mmps,omitempty"`
	DockAccelMmps2           float32 `protobuf:"fixed32,8,opt,name=dock_accel_mmps2,json=dockAccelMmps2,proto3" json:"dock_accel_mmps2,omitempty"`
	DockDecelMmps2           float32 `protobuf:"fixed32,9,opt,name=dock_decel_mmps2,json=dockDecelMmps2,proto3" json:"dock_decel_mmps2,omitempty"`
	ReverseSpeedMmps         float32 `protobuf:"fixed32,10,opt,name=reverse_speed_mmps,json=reverseSpeedMmps,proto3" json:"reverse_speed_mmps,omitempty"`
	IsCustom                 bool    `protobuf:"varint,11,opt,name=is_custom,json=isCustom,proto3" json:"is_custom,omitempty"`
}

func (x *PathMotionProfile) Reset() {
	*x = PathMotionProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathMotionProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathMotionProfile) ProtoMessage() {}

func (x *PathMotionProfile) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathMotionProfile.ProtoReflect.Descriptor instead.
func (*PathMotionProfile) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{75}
}

func (x *PathMotionProfile) GetSpeedMmps() float32 {
	if x != nil {
		return x.SpeedMmps
	}
	return 0
}

func (x *PathMotionProfile) GetAccelMmps2() float32 {
	if x != nil {
		return x.AccelMmps2
	}
	return 0
}

func (x *PathMotionProfile) GetDecelMmps2() float32 {
	if x != nil {
		return x.DecelMmps2
	}
	return 0
}

func (x *PathMotionProfile) GetPointTurnSpeedRadPerSec() float32 {
	if x != nil {
		return x.PointTurnSpeedRadPerSec
	}
	return 0
}

func (x *PathMotionProfile) GetPointTurnAccelRadPerSec2() float32 {
	if x != nil {
		return x.PointTurnAccelRadPerSec2
	}
	return 0
}

func (x *PathMotionProfile) GetPointTurnDecelRadPerSec2() float32 {
	if x != nil {
		return x.PointTurnDecelRadPerSec2
	}
	return 0
}

func (x *PathMotionProfile) GetDockSpeedMmps() float32 {
	if x != nil {
		return x.DockSpeedMmps
	}
	return 0
}

func (x *PathMotionProfile) GetDockAccelMmps2() float32 {
	if x != nil {
		return x.DockAccelMmps2
	}
	return 0
}

func (x *PathMotionProfile) GetDockDecelMmps2() float32 {
	if x != nil {
		return x.DockDecelMmps2
	}
	return 0
}

func (x *PathMotionProfile) GetReverseSpeedMmps() float32 {
	if x != nil {
		return x.ReverseSpeedMmps
	}
	return 0
}

func (x *PathMotionProfile) GetIsCustom() bool {
	if x != nil {
		return x.IsCustom
	}
	return false
}

// These codes are duplicated from actionResults.clad file and need to be kept in sync
// The possible results of running an action.
type ActionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ActionResult_ActionResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=Anki.Vector.external_interface.ActionResult_ActionResultCode" json:"code,omitempty"`
}

func (x *ActionResult) Reset() {
	*x = ActionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResult) ProtoMessage() {}

func (x *ActionResult) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResult.ProtoReflect.Descriptor instead.
func (*ActionResult) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{76}
}

func (x *ActionResult) GetCode() ActionResult_ActionResultCode {
	if x != nil {
		return x.Code
	}
	return ActionResult_ACTION_RESULT_SUCCESS
}

// Cancel a previously-requested action. Action requests include GoToPoseRequest, DockWithCubeRequest, DriveStraightRequest, TurnInPlaceRequest, SetHeadAngleRequest, and SetLiftHeightRequest.
type CancelActionByIdTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdTag uint32 `protobuf:"varint,1,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"` // Use the id_tag provided to the action request
}

func (x *CancelActionByIdTagRequest) Reset() {
	*x = CancelActionByIdTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelActionByIdTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelActionByIdTagRequest) ProtoMessage() {}

func (x *CancelActionByIdTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelActionByIdTagRequest.ProtoReflect.Descriptor instead.
func (*CancelActionByIdTagRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{77}
}

func (x *CancelActionByIdTagRequest) GetIdTag() uint32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

// Response from the robot to CancelActionByIdTagRequest.
type CancelActionByIdTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A generic status.
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CancelActionByIdTagResponse) Reset() {
	*x = CancelActionByIdTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelActionByIdTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelActionByIdTagResponse) ProtoMessage() {}

func (x *CancelActionByIdTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelActionByIdTagResponse.ProtoReflect.Descriptor instead.
func (*CancelActionByIdTagResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{78}
}

func (x *CancelActionByIdTagResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// GotoPose
type GoToPoseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMm        float32            `protobuf:"fixed32,1,opt,name=x_mm,json=xMm,proto3" json:"x_mm,omitempty"`
	YMm        float32            `protobuf:"fixed32,2,opt,name=y_mm,json=yMm,proto3" json:"y_mm,omitempty"`
	Rad        float32            `protobuf:"fixed32,3,opt,name=rad,proto3" json:"rad,omitempty"`
	MotionProf *PathMotionProfile `protobuf:"bytes,4,opt,name=motion_prof,json=motionProf,proto3" json:"motion_prof,omitempty"`
	IdTag      int32              `protobuf:"varint,5,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	NumRetries int32              `protobuf:"varint,6,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
}

func (x *GoToPoseRequest) Reset() {
	*x = GoToPoseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoToPoseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoToPoseRequest) ProtoMessage() {}

func (x *GoToPoseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoToPoseRequest.ProtoReflect.Descriptor instead.
func (*GoToPoseRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{79}
}

func (x *GoToPoseRequest) GetXMm() float32 {
	if x != nil {
		return x.XMm
	}
	return 0
}

func (x *GoToPoseRequest) GetYMm() float32 {
	if x != nil {
		return x.YMm
	}
	return 0
}

func (x *GoToPoseRequest) GetRad() float32 {
	if x != nil {
		return x.Rad
	}
	return 0
}

func (x *GoToPoseRequest) GetMotionProf() *PathMotionProfile {
	if x != nil {
		return x.MotionProf
	}
	return nil
}

func (x *GoToPoseRequest) GetIdTag() int32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

func (x *GoToPoseRequest) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

type GoToPoseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result *ActionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GoToPoseResponse) Reset() {
	*x = GoToPoseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoToPoseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoToPoseResponse) ProtoMessage() {}

func (x *GoToPoseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoToPoseResponse.ProtoReflect.Descriptor instead.
func (*GoToPoseResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{80}
}

func (x *GoToPoseResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GoToPoseResponse) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type DockWithCubeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId             int32              `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	DistanceFromMarkerMm float32            `protobuf:"fixed32,2,opt,name=distance_from_marker_mm,json=distanceFromMarkerMm,proto3" json:"distance_from_marker_mm,omitempty"`
	ApproachAngleRad     float32            `protobuf:"fixed32,3,opt,name=approach_angle_rad,json=approachAngleRad,proto3" json:"approach_angle_rad,omitempty"`
	AlignmentType        AlignmentType      `protobuf:"varint,4,opt,name=alignment_type,json=alignmentType,proto3,enum=Anki.Vector.external_interface.AlignmentType" json:"alignment_type,omitempty"`
	UseApproachAngle     bool               `protobuf:"varint,5,opt,name=use_approach_angle,json=useApproachAngle,proto3" json:"use_approach_angle,omitempty"`
	UsePreDockPose       bool               `protobuf:"varint,6,opt,name=use_pre_dock_pose,json=usePreDockPose,proto3" json:"use_pre_dock_pose,omitempty"`
	MotionProf           *PathMotionProfile `protobuf:"bytes,7,opt,name=motion_prof,json=motionProf,proto3" json:"motion_prof,omitempty"`
	IdTag                int32              `protobuf:"varint,8,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	NumRetries           int32              `protobuf:"varint,9,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
}

func (x *DockWithCubeRequest) Reset() {
	*x = DockWithCubeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockWithCubeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockWithCubeRequest) ProtoMessage() {}

func (x *DockWithCubeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockWithCubeRequest.ProtoReflect.Descriptor instead.
func (*DockWithCubeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{81}
}

func (x *DockWithCubeRequest) GetObjectId() int32 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *DockWithCubeRequest) GetDistanceFromMarkerMm() float32 {
	if x != nil {
		return x.DistanceFromMarkerMm
	}
	return 0
}

func (x *DockWithCubeRequest) GetApproachAngleRad() float32 {
	if x != nil {
		return x.ApproachAngleRad
	}
	return 0
}

func (x *DockWithCubeRequest) GetAlignmentType() AlignmentType {
	if x != nil {
		return x.AlignmentType
	}
	return AlignmentType_ALIGNMENT_TYPE_UNKNOWN
}

func (x *DockWithCubeRequest) GetUseApproachAngle() bool {
	if x != nil {
		return x.UseApproachAngle
	}
	return false
}

func (x *DockWithCubeRequest) GetUsePreDockPose() bool {
	if x != nil {
		return x.UsePreDockPose
	}
	return false
}

func (x *DockWithCubeRequest) GetMotionProf() *PathMotionProfile {
	if x != nil {
		return x.MotionProf
	}
	return nil
}

func (x *DockWithCubeRequest) GetIdTag() int32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

func (x *DockWithCubeRequest) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

type DockWithCubeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result *ActionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DockWithCubeResponse) Reset() {
	*x = DockWithCubeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockWithCubeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockWithCubeResponse) ProtoMessage() {}

func (x *DockWithCubeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockWithCubeResponse.ProtoReflect.Descriptor instead.
func (*DockWithCubeResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{82}
}

func (x *DockWithCubeResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DockWithCubeResponse) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type DriveStraightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeedMmps           float32 `protobuf:"fixed32,1,opt,name=speed_mmps,json=speedMmps,proto3" json:"speed_mmps,omitempty"` // Speed should be positive
	DistMm              float32 `protobuf:"fixed32,2,opt,name=dist_mm,json=distMm,proto3" json:"dist_mm,omitempty"`          // Use +ve for forward, -ve for backward
	ShouldPlayAnimation bool    `protobuf:"varint,3,opt,name=should_play_animation,json=shouldPlayAnimation,proto3" json:"should_play_animation,omitempty"`
	IdTag               int32   `protobuf:"varint,4,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	NumRetries          int32   `protobuf:"varint,5,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
}

func (x *DriveStraightRequest) Reset() {
	*x = DriveStraightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveStraightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveStraightRequest) ProtoMessage() {}

func (x *DriveStraightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveStraightRequest.ProtoReflect.Descriptor instead.
func (*DriveStraightRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{83}
}

func (x *DriveStraightRequest) GetSpeedMmps() float32 {
	if x != nil {
		return x.SpeedMmps
	}
	return 0
}

func (x *DriveStraightRequest) GetDistMm() float32 {
	if x != nil {
		return x.DistMm
	}
	return 0
}

func (x *DriveStraightRequest) GetShouldPlayAnimation() bool {
	if x != nil {
		return x.ShouldPlayAnimation
	}
	return false
}

func (x *DriveStraightRequest) GetIdTag() int32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

func (x *DriveStraightRequest) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

type DriveStraightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result *ActionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DriveStraightResponse) Reset() {
	*x = DriveStraightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveStraightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveStraightResponse) ProtoMessage() {}

func (x *DriveStraightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveStraightResponse.ProtoReflect.Descriptor instead.
func (*DriveStraightResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{84}
}

func (x *DriveStraightResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DriveStraightResponse) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// TurnInPlace
// If isAbsolute == 0, turns the specified number of radians, relative to the robot's current heading*
// If isAbsolute != 0, turns to the specified absolute orientation.
type TurnInPlaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AngleRad        float32 `protobuf:"fixed32,1,opt,name=angle_rad,json=angleRad,proto3" json:"angle_rad,omitempty"` // relative mode: positive turns left negative turns right
	SpeedRadPerSec  float32 `protobuf:"fixed32,2,opt,name=speed_rad_per_sec,json=speedRadPerSec,proto3" json:"speed_rad_per_sec,omitempty"`
	AccelRadPerSec2 float32 `protobuf:"fixed32,3,opt,name=accel_rad_per_sec2,json=accelRadPerSec2,proto3" json:"accel_rad_per_sec2,omitempty"`
	TolRad          float32 `protobuf:"fixed32,4,opt,name=tol_rad,json=tolRad,proto3" json:"tol_rad,omitempty"` // This should be no smaller than POINT_TURN_ANGLE_TOL (DEG_TO_RAD(2.f)).
	// Smaller values are ignored except 0 which is interpreted to mean
	// default tolerance of POINT_TURN_ANGLE_TOL.
	IsAbsolute uint32 `protobuf:"varint,5,opt,name=is_absolute,json=isAbsolute,proto3" json:"is_absolute,omitempty"` // 0: angle_rad is relative to current orientation, 1: angle_rad is absolute angle to turn to
	IdTag      int32  `protobuf:"varint,6,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	NumRetries int32  `protobuf:"varint,7,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
}

func (x *TurnInPlaceRequest) Reset() {
	*x = TurnInPlaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurnInPlaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnInPlaceRequest) ProtoMessage() {}

func (x *TurnInPlaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnInPlaceRequest.ProtoReflect.Descriptor instead.
func (*TurnInPlaceRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{85}
}

func (x *TurnInPlaceRequest) GetAngleRad() float32 {
	if x != nil {
		return x.AngleRad
	}
	return 0
}

func (x *TurnInPlaceRequest) GetSpeedRadPerSec() float32 {
	if x != nil {
		return x.SpeedRadPerSec
	}
	return 0
}

func (x *TurnInPlaceRequest) GetAccelRadPerSec2() float32 {
	if x != nil {
		return x.AccelRadPerSec2
	}
	return 0
}

func (x *TurnInPlaceRequest) GetTolRad() float32 {
	if x != nil {
		return x.TolRad
	}
	return 0
}

func (x *TurnInPlaceRequest) GetIsAbsolute() uint32 {
	if x != nil {
		return x.IsAbsolute
	}
	return 0
}

func (x *TurnInPlaceRequest) GetIdTag() int32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

func (x *TurnInPlaceRequest) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

type TurnInPlaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result *ActionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TurnInPlaceResponse) Reset() {
	*x = TurnInPlaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurnInPlaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnInPlaceResponse) ProtoMessage() {}

func (x *TurnInPlaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnInPlaceResponse.ProtoReflect.Descriptor instead.
func (*TurnInPlaceResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{86}
}

func (x *TurnInPlaceResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TurnInPlaceResponse) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// SetHeadAngle
type SetHeadAngleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AngleRad          float32 `protobuf:"fixed32,1,opt,name=angle_rad,json=angleRad,proto3" json:"angle_rad,omitempty"`
	MaxSpeedRadPerSec float32 `protobuf:"fixed32,2,opt,name=max_speed_rad_per_sec,json=maxSpeedRadPerSec,proto3" json:"max_speed_rad_per_sec,omitempty"`
	AccelRadPerSec2   float32 `protobuf:"fixed32,3,opt,name=accel_rad_per_sec2,json=accelRadPerSec2,proto3" json:"accel_rad_per_sec2,omitempty"`
	DurationSec       float32 `protobuf:"fixed32,4,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
	IdTag             int32   `protobuf:"varint,5,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	NumRetries        int32   `protobuf:"varint,6,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
}

func (x *SetHeadAngleRequest) Reset() {
	*x = SetHeadAngleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHeadAngleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHeadAngleRequest) ProtoMessage() {}

func (x *SetHeadAngleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHeadAngleRequest.ProtoReflect.Descriptor instead.
func (*SetHeadAngleRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{87}
}

func (x *SetHeadAngleRequest) GetAngleRad() float32 {
	if x != nil {
		return x.AngleRad
	}
	return 0
}

func (x *SetHeadAngleRequest) GetMaxSpeedRadPerSec() float32 {
	if x != nil {
		return x.MaxSpeedRadPerSec
	}
	return 0
}

func (x *SetHeadAngleRequest) GetAccelRadPerSec2() float32 {
	if x != nil {
		return x.AccelRadPerSec2
	}
	return 0
}

func (x *SetHeadAngleRequest) GetDurationSec() float32 {
	if x != nil {
		return x.DurationSec
	}
	return 0
}

func (x *SetHeadAngleRequest) GetIdTag() int32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

func (x *SetHeadAngleRequest) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

type SetHeadAngleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result *ActionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SetHeadAngleResponse) Reset() {
	*x = SetHeadAngleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHeadAngleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHeadAngleResponse) ProtoMessage() {}

func (x *SetHeadAngleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHeadAngleResponse.ProtoReflect.Descriptor instead.
func (*SetHeadAngleResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{88}
}

func (x *SetHeadAngleResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SetHeadAngleResponse) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// SetLiftHeight
type SetLiftHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeightMm          float32 `protobuf:"fixed32,1,opt,name=height_mm,json=heightMm,proto3" json:"height_mm,omitempty"`
	MaxSpeedRadPerSec float32 `protobuf:"fixed32,2,opt,name=max_speed_rad_per_sec,json=maxSpeedRadPerSec,proto3" json:"max_speed_rad_per_sec,omitempty"`
	AccelRadPerSec2   float32 `protobuf:"fixed32,3,opt,name=accel_rad_per_sec2,json=accelRadPerSec2,proto3" json:"accel_rad_per_sec2,omitempty"`
	DurationSec       float32 `protobuf:"fixed32,4,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
	IdTag             int32   `protobuf:"varint,5,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	NumRetries        int32   `protobuf:"varint,6,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
}

func (x *SetLiftHeightRequest) Reset() {
	*x = SetLiftHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLiftHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLiftHeightRequest) ProtoMessage() {}

func (x *SetLiftHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLiftHeightRequest.ProtoReflect.Descriptor instead.
func (*SetLiftHeightRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{89}
}

func (x *SetLiftHeightRequest) GetHeightMm() float32 {
	if x != nil {
		return x.HeightMm
	}
	return 0
}

func (x *SetLiftHeightRequest) GetMaxSpeedRadPerSec() float32 {
	if x != nil {
		return x.MaxSpeedRadPerSec
	}
	return 0
}

func (x *SetLiftHeightRequest) GetAccelRadPerSec2() float32 {
	if x != nil {
		return x.AccelRadPerSec2
	}
	return 0
}

func (x *SetLiftHeightRequest) GetDurationSec() float32 {
	if x != nil {
		return x.DurationSec
	}
	return 0
}

func (x *SetLiftHeightRequest) GetIdTag() int32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

func (x *SetLiftHeightRequest) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

type SetLiftHeightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result *ActionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SetLiftHeightResponse) Reset() {
	*x = SetLiftHeightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLiftHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLiftHeightResponse) ProtoMessage() {}

func (x *SetLiftHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLiftHeightResponse.ProtoReflect.Descriptor instead.
func (*SetLiftHeightResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{90}
}

func (x *SetLiftHeightResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SetLiftHeightResponse) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// TurnTowardsFace
type TurnTowardsFaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceId          int32   `protobuf:"varint,1,opt,name=face_id,json=faceId,proto3" json:"face_id,omitempty"`
	MaxTurnAngleRad float32 `protobuf:"fixed32,2,opt,name=max_turn_angle_rad,json=maxTurnAngleRad,proto3" json:"max_turn_angle_rad,omitempty"`
	IdTag           int32   `protobuf:"varint,3,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	NumRetries      int32   `protobuf:"varint,4,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
}

func (x *TurnTowardsFaceRequest) Reset() {
	*x = TurnTowardsFaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurnTowardsFaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnTowardsFaceRequest) ProtoMessage() {}

func (x *TurnTowardsFaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnTowardsFaceRequest.ProtoReflect.Descriptor instead.
func (*TurnTowardsFaceRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{91}
}

func (x *TurnTowardsFaceRequest) GetFaceId() int32 {
	if x != nil {
		return x.FaceId
	}
	return 0
}

func (x *TurnTowardsFaceRequest) GetMaxTurnAngleRad() float32 {
	if x != nil {
		return x.MaxTurnAngleRad
	}
	return 0
}

func (x *TurnTowardsFaceRequest) GetIdTag() int32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

func (x *TurnTowardsFaceRequest) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

type TurnTowardsFaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result *ActionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TurnTowardsFaceResponse) Reset() {
	*x = TurnTowardsFaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurnTowardsFaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnTowardsFaceResponse) ProtoMessage() {}

func (x *TurnTowardsFaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnTowardsFaceResponse.ProtoReflect.Descriptor instead.
func (*TurnTowardsFaceResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{92}
}

func (x *TurnTowardsFaceResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TurnTowardsFaceResponse) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// GoToObject
type GoToObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId                   int32              `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	MotionProf                 *PathMotionProfile `protobuf:"bytes,2,opt,name=motion_prof,json=motionProf,proto3" json:"motion_prof,omitempty"`
	DistanceFromObjectOriginMm float32            `protobuf:"fixed32,3,opt,name=distance_from_object_origin_mm,json=distanceFromObjectOriginMm,proto3" json:"distance_from_object_origin_mm,omitempty"`
	UsePreDockPose             bool               `protobuf:"varint,4,opt,name=use_pre_dock_pose,json=usePreDockPose,proto3" json:"use_pre_dock_pose,omitempty"`
	IdTag                      int32              `protobuf:"varint,5,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	NumRetries                 int32              `protobuf:"varint,6,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
}

func (x *GoToObjectRequest) Reset() {
	*x = GoToObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoToObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoToObjectRequest) ProtoMessage() {}

func (x *GoToObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoToObjectRequest.ProtoReflect.Descriptor instead.
func (*GoToObjectRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{93}
}

func (x *GoToObjectRequest) GetObjectId() int32 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *GoToObjectRequest) GetMotionProf() *PathMotionProfile {
	if x != nil {
		return x.MotionProf
	}
	return nil
}

func (x *GoToObjectRequest) GetDistanceFromObjectOriginMm() float32 {
	if x != nil {
		return x.DistanceFromObjectOriginMm
	}
	return 0
}

func (x *GoToObjectRequest) GetUsePreDockPose() bool {
	if x != nil {
		return x.UsePreDockPose
	}
	return false
}

func (x *GoToObjectRequest) GetIdTag() int32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

func (x *GoToObjectRequest) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

type GoToObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result *ActionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GoToObjectResponse) Reset() {
	*x = GoToObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoToObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoToObjectResponse) ProtoMessage() {}

func (x *GoToObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoToObjectResponse.ProtoReflect.Descriptor instead.
func (*GoToObjectResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{94}
}

func (x *GoToObjectResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GoToObjectResponse) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// RollObject
type RollObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId         int32              `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"` // negative value means "currently selected object"
	MotionProf       *PathMotionProfile `protobuf:"bytes,2,opt,name=motion_prof,json=motionProf,proto3" json:"motion_prof,omitempty"`
	ApproachAngleRad float32            `protobuf:"fixed32,3,opt,name=approach_angle_rad,json=approachAngleRad,proto3" json:"approach_angle_rad,omitempty"`
	UseApproachAngle bool               `protobuf:"varint,4,opt,name=use_approach_angle,json=useApproachAngle,proto3" json:"use_approach_angle,omitempty"`
	UsePreDockPose   bool               `protobuf:"varint,5,opt,name=use_pre_dock_pose,json=usePreDockPose,proto3" json:"use_pre_dock_pose,omitempty"`
	IdTag            int32              `protobuf:"varint,6,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	NumRetries       int32              `protobuf:"varint,7,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
}

func (x *RollObjectRequest) Reset() {
	*x = RollObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollObjectRequest) ProtoMessage() {}

func (x *RollObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollObjectRequest.ProtoReflect.Descriptor instead.
func (*RollObjectRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{95}
}

func (x *RollObjectRequest) GetObjectId() int32 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *RollObjectRequest) GetMotionProf() *PathMotionProfile {
	if x != nil {
		return x.MotionProf
	}
	return nil
}

func (x *RollObjectRequest) GetApproachAngleRad() float32 {
	if x != nil {
		return x.ApproachAngleRad
	}
	return 0
}

func (x *RollObjectRequest) GetUseApproachAngle() bool {
	if x != nil {
		return x.UseApproachAngle
	}
	return false
}

func (x *RollObjectRequest) GetUsePreDockPose() bool {
	if x != nil {
		return x.UsePreDockPose
	}
	return false
}

func (x *RollObjectRequest) GetIdTag() int32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

func (x *RollObjectRequest) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

type RollObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result *ActionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RollObjectResponse) Reset() {
	*x = RollObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollObjectResponse) ProtoMessage() {}

func (x *RollObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollObjectResponse.ProtoReflect.Descriptor instead.
func (*RollObjectResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{96}
}

func (x *RollObjectResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RollObjectResponse) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// PopAWheelie
type PopAWheelieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId         int32              `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"` // negative value means "currently selected object"
	MotionProf       *PathMotionProfile `protobuf:"bytes,2,opt,name=motion_prof,json=motionProf,proto3" json:"motion_prof,omitempty"`
	ApproachAngleRad float32            `protobuf:"fixed32,3,opt,name=approach_angle_rad,json=approachAngleRad,proto3" json:"approach_angle_rad,omitempty"`
	UseApproachAngle bool               `protobuf:"varint,4,opt,name=use_approach_angle,json=useApproachAngle,proto3" json:"use_approach_angle,omitempty"`
	UsePreDockPose   bool               `protobuf:"varint,5,opt,name=use_pre_dock_pose,json=usePreDockPose,proto3" json:"use_pre_dock_pose,omitempty"`
	IdTag            int32              `protobuf:"varint,6,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	NumRetries       int32              `protobuf:"varint,7,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
}

func (x *PopAWheelieRequest) Reset() {
	*x = PopAWheelieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopAWheelieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopAWheelieRequest) ProtoMessage() {}

func (x *PopAWheelieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopAWheelieRequest.ProtoReflect.Descriptor instead.
func (*PopAWheelieRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{97}
}

func (x *PopAWheelieRequest) GetObjectId() int32 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *PopAWheelieRequest) GetMotionProf() *PathMotionProfile {
	if x != nil {
		return x.MotionProf
	}
	return nil
}

func (x *PopAWheelieRequest) GetApproachAngleRad() float32 {
	if x != nil {
		return x.ApproachAngleRad
	}
	return 0
}

func (x *PopAWheelieRequest) GetUseApproachAngle() bool {
	if x != nil {
		return x.UseApproachAngle
	}
	return false
}

func (x *PopAWheelieRequest) GetUsePreDockPose() bool {
	if x != nil {
		return x.UsePreDockPose
	}
	return false
}

func (x *PopAWheelieRequest) GetIdTag() int32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

func (x *PopAWheelieRequest) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

type PopAWheelieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result *ActionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PopAWheelieResponse) Reset() {
	*x = PopAWheelieResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopAWheelieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopAWheelieResponse) ProtoMessage() {}

func (x *PopAWheelieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopAWheelieResponse.ProtoReflect.Descriptor instead.
func (*PopAWheelieResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{98}
}

func (x *PopAWheelieResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PopAWheelieResponse) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// PickupObject
type PickupObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId         int32              `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"` // negative value means "currently selected object"
	MotionProf       *PathMotionProfile `protobuf:"bytes,2,opt,name=motion_prof,json=motionProf,proto3" json:"motion_prof,omitempty"`
	ApproachAngleRad float32            `protobuf:"fixed32,3,opt,name=approach_angle_rad,json=approachAngleRad,proto3" json:"approach_angle_rad,omitempty"`
	UseApproachAngle bool               `protobuf:"varint,4,opt,name=use_approach_angle,json=useApproachAngle,proto3" json:"use_approach_angle,omitempty"`
	UsePreDockPose   bool               `protobuf:"varint,5,opt,name=use_pre_dock_pose,json=usePreDockPose,proto3" json:"use_pre_dock_pose,omitempty"`
	IdTag            int32              `protobuf:"varint,6,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	NumRetries       int32              `protobuf:"varint,7,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
}

func (x *PickupObjectRequest) Reset() {
	*x = PickupObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickupObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickupObjectRequest) ProtoMessage() {}

func (x *PickupObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickupObjectRequest.ProtoReflect.Descriptor instead.
func (*PickupObjectRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{99}
}

func (x *PickupObjectRequest) GetObjectId() int32 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *PickupObjectRequest) GetMotionProf() *PathMotionProfile {
	if x != nil {
		return x.MotionProf
	}
	return nil
}

func (x *PickupObjectRequest) GetApproachAngleRad() float32 {
	if x != nil {
		return x.ApproachAngleRad
	}
	return 0
}

func (x *PickupObjectRequest) GetUseApproachAngle() bool {
	if x != nil {
		return x.UseApproachAngle
	}
	return false
}

func (x *PickupObjectRequest) GetUsePreDockPose() bool {
	if x != nil {
		return x.UsePreDockPose
	}
	return false
}

func (x *PickupObjectRequest) GetIdTag() int32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

func (x *PickupObjectRequest) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

type PickupObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result *ActionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PickupObjectResponse) Reset() {
	*x = PickupObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickupObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickupObjectResponse) ProtoMessage() {}

func (x *PickupObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickupObjectResponse.ProtoReflect.Descriptor instead.
func (*PickupObjectResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{100}
}

func (x *PickupObjectResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PickupObjectResponse) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// PlaceObjectOnGroundHere
type PlaceObjectOnGroundHereRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdTag      int32 `protobuf:"varint,1,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	NumRetries int32 `protobuf:"varint,2,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
}

func (x *PlaceObjectOnGroundHereRequest) Reset() {
	*x = PlaceObjectOnGroundHereRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceObjectOnGroundHereRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceObjectOnGroundHereRequest) ProtoMessage() {}

func (x *PlaceObjectOnGroundHereRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceObjectOnGroundHereRequest.ProtoReflect.Descriptor instead.
func (*PlaceObjectOnGroundHereRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{101}
}

func (x *PlaceObjectOnGroundHereRequest) GetIdTag() int32 {
	if x != nil {
		return x.IdTag
	}
	return 0
}

func (x *PlaceObjectOnGroundHereRequest) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

type PlaceObjectOnGroundHereResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result *ActionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PlaceObjectOnGroundHereResponse) Reset() {
	*x = PlaceObjectOnGroundHereResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceObjectOnGroundHereResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceObjectOnGroundHereResponse) ProtoMessage() {}

func (x *PlaceObjectOnGroundHereResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceObjectOnGroundHereResponse.ProtoReflect.Descriptor instead.
func (*PlaceObjectOnGroundHereResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{102}
}

func (x *PlaceObjectOnGroundHereResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PlaceObjectOnGroundHereResponse) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type BatteryStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatteryStateRequest) Reset() {
	*x = BatteryStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryStateRequest) ProtoMessage() {}

func (x *BatteryStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryStateRequest.ProtoReflect.Descriptor instead.
func (*BatteryStateRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{103}
}

type BatteryStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BatteryLevel        BatteryLevel    `protobuf:"varint,2,opt,name=battery_level,json=batteryLevel,proto3,enum=Anki.Vector.external_interface.BatteryLevel" json:"battery_level,omitempty"`
	BatteryVolts        float32         `protobuf:"fixed32,3,opt,name=battery_volts,json=batteryVolts,proto3" json:"battery_volts,omitempty"`
	IsCharging          bool            `protobuf:"varint,4,opt,name=is_charging,json=isCharging,proto3" json:"is_charging,omitempty"`
	IsOnChargerPlatform bool            `protobuf:"varint,5,opt,name=is_on_charger_platform,json=isOnChargerPlatform,proto3" json:"is_on_charger_platform,omitempty"`
	SuggestedChargerSec float32         `protobuf:"fixed32,6,opt,name=suggested_charger_sec,json=suggestedChargerSec,proto3" json:"suggested_charger_sec,omitempty"`
	CubeBattery         *CubeBattery    `protobuf:"bytes,7,opt,name=cube_battery,json=cubeBattery,proto3" json:"cube_battery,omitempty"`
}

func (x *BatteryStateResponse) Reset() {
	*x = BatteryStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryStateResponse) ProtoMessage() {}

func (x *BatteryStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryStateResponse.ProtoReflect.Descriptor instead.
func (*BatteryStateResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{104}
}

func (x *BatteryStateResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatteryStateResponse) GetBatteryLevel() BatteryLevel {
	if x != nil {
		return x.BatteryLevel
	}
	return BatteryLevel_BATTERY_LEVEL_UNKNOWN
}

func (x *BatteryStateResponse) GetBatteryVolts() float32 {
	if x != nil {
		return x.BatteryVolts
	}
	return 0
}

func (x *BatteryStateResponse) GetIsCharging() bool {
	if x != nil {
		return x.IsCharging
	}
	return false
}

func (x *BatteryStateResponse) GetIsOnChargerPlatform() bool {
	if x != nil {
		return x.IsOnChargerPlatform
	}
	return false
}

func (x *BatteryStateResponse) GetSuggestedChargerSec() float32 {
	if x != nil {
		return x.SuggestedChargerSec
	}
	return 0
}

func (x *BatteryStateResponse) GetCubeBattery() *CubeBattery {
	if x != nil {
		return x.CubeBattery
	}
	return nil
}

type CubeBattery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                   CubeBattery_CubeBatteryLevel `protobuf:"varint,1,opt,name=level,proto3,enum=Anki.Vector.external_interface.CubeBattery_CubeBatteryLevel" json:"level,omitempty"`
	FactoryId               string                       `protobuf:"bytes,2,opt,name=factory_id,json=factoryId,proto3" json:"factory_id,omitempty"`
	BatteryVolts            float32                      `protobuf:"fixed32,3,opt,name=battery_volts,json=batteryVolts,proto3" json:"battery_volts,omitempty"`
	TimeSinceLastReadingSec float32                      `protobuf:"fixed32,4,opt,name=time_since_last_reading_sec,json=timeSinceLastReadingSec,proto3" json:"time_since_last_reading_sec,omitempty"`
}

func (x *CubeBattery) Reset() {
	*x = CubeBattery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CubeBattery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CubeBattery) ProtoMessage() {}

func (x *CubeBattery) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CubeBattery.ProtoReflect.Descriptor instead.
func (*CubeBattery) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{105}
}

func (x *CubeBattery) GetLevel() CubeBattery_CubeBatteryLevel {
	if x != nil {
		return x.Level
	}
	return CubeBattery_Low
}

func (x *CubeBattery) GetFactoryId() string {
	if x != nil {
		return x.FactoryId
	}
	return ""
}

func (x *CubeBattery) GetBatteryVolts() float32 {
	if x != nil {
		return x.BatteryVolts
	}
	return 0
}

func (x *CubeBattery) GetTimeSinceLastReadingSec() float32 {
	if x != nil {
		return x.TimeSinceLastReadingSec
	}
	return 0
}

type VersionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionStateRequest) Reset() {
	*x = VersionStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionStateRequest) ProtoMessage() {}

func (x *VersionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionStateRequest.ProtoReflect.Descriptor instead.
func (*VersionStateRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{106}
}

type VersionStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	OsVersion     string          `protobuf:"bytes,2,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	EngineBuildId string          `protobuf:"bytes,3,opt,name=engine_build_id,json=engineBuildId,proto3" json:"engine_build_id,omitempty"`
}

func (x *VersionStateResponse) Reset() {
	*x = VersionStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionStateResponse) ProtoMessage() {}

func (x *VersionStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionStateResponse.ProtoReflect.Descriptor instead.
func (*VersionStateResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{107}
}

func (x *VersionStateResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *VersionStateResponse) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *VersionStateResponse) GetEngineBuildId() string {
	if x != nil {
		return x.EngineBuildId
	}
	return ""
}

type SayTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text           string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	UseVectorVoice bool    `protobuf:"varint,2,opt,name=use_vector_voice,json=useVectorVoice,proto3" json:"use_vector_voice,omitempty"`
	DurationScalar float32 `protobuf:"fixed32,3,opt,name=duration_scalar,json=durationScalar,proto3" json:"duration_scalar,omitempty"`
}

func (x *SayTextRequest) Reset() {
	*x = SayTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SayTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SayTextRequest) ProtoMessage() {}

func (x *SayTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SayTextRequest.ProtoReflect.Descriptor instead.
func (*SayTextRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{108}
}

func (x *SayTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SayTextRequest) GetUseVectorVoice() bool {
	if x != nil {
		return x.UseVectorVoice
	}
	return false
}

func (x *SayTextRequest) GetDurationScalar() float32 {
	if x != nil {
		return x.DurationScalar
	}
	return 0
}

type SayTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	State  SayTextResponse_UtteranceState `protobuf:"varint,2,opt,name=state,proto3,enum=Anki.Vector.external_interface.SayTextResponse_UtteranceState" json:"state,omitempty"`
}

func (x *SayTextResponse) Reset() {
	*x = SayTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SayTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SayTextResponse) ProtoMessage() {}

func (x *SayTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SayTextResponse.ProtoReflect.Descriptor instead.
func (*SayTextResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{109}
}

func (x *SayTextResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SayTextResponse) GetState() SayTextResponse_UtteranceState {
	if x != nil {
		return x.State
	}
	return SayTextResponse_INVALID
}

type StimulationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmotionEvents    []string `protobuf:"bytes,1,rep,name=emotion_events,json=emotionEvents,proto3" json:"emotion_events,omitempty"` // may be empty
	Value            float32  `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	Velocity         float32  `protobuf:"fixed32,3,opt,name=velocity,proto3" json:"velocity,omitempty"`                                           // value per second
	Accel            float32  `protobuf:"fixed32,4,opt,name=accel,proto3" json:"accel,omitempty"`                                                 // value per sec per sec
	ValueBeforeEvent float32  `protobuf:"fixed32,5,opt,name=value_before_event,json=valueBeforeEvent,proto3" json:"value_before_event,omitempty"` // matches value if there were no emotion events
	MinValue         float32  `protobuf:"fixed32,6,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue         float32  `protobuf:"fixed32,7,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
}

func (x *StimulationInfo) Reset() {
	*x = StimulationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StimulationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StimulationInfo) ProtoMessage() {}

func (x *StimulationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StimulationInfo.ProtoReflect.Descriptor instead.
func (*StimulationInfo) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{110}
}

func (x *StimulationInfo) GetEmotionEvents() []string {
	if x != nil {
		return x.EmotionEvents
	}
	return nil
}

func (x *StimulationInfo) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StimulationInfo) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *StimulationInfo) GetAccel() float32 {
	if x != nil {
		return x.Accel
	}
	return 0
}

func (x *StimulationInfo) GetValueBeforeEvent() float32 {
	if x != nil {
		return x.ValueBeforeEvent
	}
	return 0
}

func (x *StimulationInfo) GetMinValue() float32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *StimulationInfo) GetMaxValue() float32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

// Request how the robot should process and send audio
type AudioSendModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode AudioProcessingMode `protobuf:"varint,1,opt,name=mode,proto3,enum=Anki.Vector.external_interface.AudioProcessingMode" json:"mode,omitempty"`
}

func (x *AudioSendModeRequest) Reset() {
	*x = AudioSendModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSendModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSendModeRequest) ProtoMessage() {}

func (x *AudioSendModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSendModeRequest.ProtoReflect.Descriptor instead.
func (*AudioSendModeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{111}
}

func (x *AudioSendModeRequest) GetMode() AudioProcessingMode {
	if x != nil {
		return x.Mode
	}
	return AudioProcessingMode_AUDIO_UNKNOWN
}

// Event sent when the robot changes the mode it's processing and sending audio
type AudioSendModeChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode AudioProcessingMode `protobuf:"varint,1,opt,name=mode,proto3,enum=Anki.Vector.external_interface.AudioProcessingMode" json:"mode,omitempty"`
}

func (x *AudioSendModeChanged) Reset() {
	*x = AudioSendModeChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSendModeChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSendModeChanged) ProtoMessage() {}

func (x *AudioSendModeChanged) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSendModeChanged.ProtoReflect.Descriptor instead.
func (*AudioSendModeChanged) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{112}
}

func (x *AudioSendModeChanged) GetMode() AudioProcessingMode {
	if x != nil {
		return x.Mode
	}
	return AudioProcessingMode_AUDIO_UNKNOWN
}

// One frame of robot audio data and associated metadata
type AudioChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotTimeStamp     uint32 `protobuf:"varint,1,opt,name=robot_time_stamp,json=robotTimeStamp,proto3" json:"robot_time_stamp,omitempty"`          // robot time at the final chunk of this audio sample group transmission
	GroupId            uint32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                 // the id of this sample transmission group
	ChunkId            uint32 `protobuf:"varint,3,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`                                 // the current batched chunk id within in this group id
	AudioChunkCount    uint32 `protobuf:"varint,4,opt,name=audio_chunk_count,json=audioChunkCount,proto3" json:"audio_chunk_count,omitempty"`       // number of chunks batched within this group id
	SignalPower        []byte `protobuf:"bytes,5,opt,name=signal_power,json=signalPower,proto3" json:"signal_power,omitempty"`                      // mono audio amplitude samples
	DirectionStrengths []byte `protobuf:"bytes,6,opt,name=direction_strengths,json=directionStrengths,proto3" json:"direction_strengths,omitempty"` // histogram data of which directions this audio chunk came from
	SourceDirection    uint32 `protobuf:"varint,7,opt,name=source_direction,json=sourceDirection,proto3" json:"source_direction,omitempty"`         // 0-11, with 12 representing "invalid"
	SourceConfidence   uint32 `protobuf:"varint,8,opt,name=source_confidence,json=sourceConfidence,proto3" json:"source_confidence,omitempty"`      // accuracy of the calculated source_direction
	NoiseFloorPower    uint32 `protobuf:"varint,9,opt,name=noise_floor_power,json=noiseFloorPower,proto3" json:"noise_floor_power,omitempty"`       // power value, convert to db with log_10(value)
}

func (x *AudioChunk) Reset() {
	*x = AudioChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunk) ProtoMessage() {}

func (x *AudioChunk) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunk.ProtoReflect.Descriptor instead.
func (*AudioChunk) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{113}
}

func (x *AudioChunk) GetRobotTimeStamp() uint32 {
	if x != nil {
		return x.RobotTimeStamp
	}
	return 0
}

func (x *AudioChunk) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AudioChunk) GetChunkId() uint32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *AudioChunk) GetAudioChunkCount() uint32 {
	if x != nil {
		return x.AudioChunkCount
	}
	return 0
}

func (x *AudioChunk) GetSignalPower() []byte {
	if x != nil {
		return x.SignalPower
	}
	return nil
}

func (x *AudioChunk) GetDirectionStrengths() []byte {
	if x != nil {
		return x.DirectionStrengths
	}
	return nil
}

func (x *AudioChunk) GetSourceDirection() uint32 {
	if x != nil {
		return x.SourceDirection
	}
	return 0
}

func (x *AudioChunk) GetSourceConfidence() uint32 {
	if x != nil {
		return x.SourceConfidence
	}
	return 0
}

func (x *AudioChunk) GetNoiseFloorPower() uint32 {
	if x != nil {
		return x.NoiseFloorPower
	}
	return 0
}

// Request the robot to send audio data
type AudioFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AudioFeedRequest) Reset() {
	*x = AudioFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFeedRequest) ProtoMessage() {}

func (x *AudioFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFeedRequest.ProtoReflect.Descriptor instead.
func (*AudioFeedRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{114}
}

// Streamed audio data from the robot
type AudioFeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotTimeStamp     uint32 `protobuf:"varint,1,opt,name=robot_time_stamp,json=robotTimeStamp,proto3" json:"robot_time_stamp,omitempty"`          // robot time at the transmission of this audio sample group
	GroupId            uint32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                 // the index of this audio feed response
	SignalPower        []byte `protobuf:"bytes,3,opt,name=signal_power,json=signalPower,proto3" json:"signal_power,omitempty"`                      // mono audio amplitude samples
	DirectionStrengths []byte `protobuf:"bytes,4,opt,name=direction_strengths,json=directionStrengths,proto3" json:"direction_strengths,omitempty"` // histogram data of which directions this audio chunk came from
	SourceDirection    uint32 `protobuf:"varint,5,opt,name=source_direction,json=sourceDirection,proto3" json:"source_direction,omitempty"`         // 0-11, with 12 representing "invalid"
	SourceConfidence   uint32 `protobuf:"varint,6,opt,name=source_confidence,json=sourceConfidence,proto3" json:"source_confidence,omitempty"`      // accuracy of the calculated source_direction
	NoiseFloorPower    uint32 `protobuf:"varint,7,opt,name=noise_floor_power,json=noiseFloorPower,proto3" json:"noise_floor_power,omitempty"`       // power value, convert to db with log_10(value)
}

func (x *AudioFeedResponse) Reset() {
	*x = AudioFeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFeedResponse) ProtoMessage() {}

func (x *AudioFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFeedResponse.ProtoReflect.Descriptor instead.
func (*AudioFeedResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{115}
}

func (x *AudioFeedResponse) GetRobotTimeStamp() uint32 {
	if x != nil {
		return x.RobotTimeStamp
	}
	return 0
}

func (x *AudioFeedResponse) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AudioFeedResponse) GetSignalPower() []byte {
	if x != nil {
		return x.SignalPower
	}
	return nil
}

func (x *AudioFeedResponse) GetDirectionStrengths() []byte {
	if x != nil {
		return x.DirectionStrengths
	}
	return nil
}

func (x *AudioFeedResponse) GetSourceDirection() uint32 {
	if x != nil {
		return x.SourceDirection
	}
	return 0
}

func (x *AudioFeedResponse) GetSourceConfidence() uint32 {
	if x != nil {
		return x.SourceConfidence
	}
	return 0
}

func (x *AudioFeedResponse) GetNoiseFloorPower() uint32 {
	if x != nil {
		return x.NoiseFloorPower
	}
	return 0
}

// Preflight and initialization for audio streaming to robot
type ExternalAudioStreamPrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioFrameRate uint32 `protobuf:"varint,1,opt,name=audio_frame_rate,json=audioFrameRate,proto3" json:"audio_frame_rate,omitempty"` // 8000 - 16025
	AudioVolume    uint32 `protobuf:"varint,2,opt,name=audio_volume,json=audioVolume,proto3" json:"audio_volume,omitempty"`            // 0 - 100
}

func (x *ExternalAudioStreamPrepare) Reset() {
	*x = ExternalAudioStreamPrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAudioStreamPrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAudioStreamPrepare) ProtoMessage() {}

func (x *ExternalAudioStreamPrepare) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAudioStreamPrepare.ProtoReflect.Descriptor instead.
func (*ExternalAudioStreamPrepare) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{116}
}

func (x *ExternalAudioStreamPrepare) GetAudioFrameRate() uint32 {
	if x != nil {
		return x.AudioFrameRate
	}
	return 0
}

func (x *ExternalAudioStreamPrepare) GetAudioVolume() uint32 {
	if x != nil {
		return x.AudioVolume
	}
	return 0
}

// Send chunk of audio data to stream on robot
type ExternalAudioStreamChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioChunkSizeBytes uint32 `protobuf:"varint,1,opt,name=audio_chunk_size_bytes,json=audioChunkSizeBytes,proto3" json:"audio_chunk_size_bytes,omitempty"` //current engine maximum of 1024 bytes
	AudioChunkSamples   []byte `protobuf:"bytes,2,opt,name=audio_chunk_samples,json=audioChunkSamples,proto3" json:"audio_chunk_samples,omitempty"`          //16-bit little-endian PCM audio data
}

func (x *ExternalAudioStreamChunk) Reset() {
	*x = ExternalAudioStreamChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAudioStreamChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAudioStreamChunk) ProtoMessage() {}

func (x *ExternalAudioStreamChunk) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAudioStreamChunk.ProtoReflect.Descriptor instead.
func (*ExternalAudioStreamChunk) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{117}
}

func (x *ExternalAudioStreamChunk) GetAudioChunkSizeBytes() uint32 {
	if x != nil {
		return x.AudioChunkSizeBytes
	}
	return 0
}

func (x *ExternalAudioStreamChunk) GetAudioChunkSamples() []byte {
	if x != nil {
		return x.AudioChunkSamples
	}
	return nil
}

// Send notification of last chunk of audio sent to robot
type ExternalAudioStreamComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExternalAudioStreamComplete) Reset() {
	*x = ExternalAudioStreamComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAudioStreamComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAudioStreamComplete) ProtoMessage() {}

func (x *ExternalAudioStreamComplete) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAudioStreamComplete.ProtoReflect.Descriptor instead.
func (*ExternalAudioStreamComplete) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{118}
}

// Cancel a playing external robot audio stream
type ExternalAudioStreamCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExternalAudioStreamCancel) Reset() {
	*x = ExternalAudioStreamCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAudioStreamCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAudioStreamCancel) ProtoMessage() {}

func (x *ExternalAudioStreamCancel) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAudioStreamCancel.ProtoReflect.Descriptor instead.
func (*ExternalAudioStreamCancel) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{119}
}

// Request to stream audio to the robot
type ExternalAudioStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AudioRequestType:
	//	*ExternalAudioStreamRequest_AudioStreamPrepare
	//	*ExternalAudioStreamRequest_AudioStreamChunk
	//	*ExternalAudioStreamRequest_AudioStreamComplete
	//	*ExternalAudioStreamRequest_AudioStreamCancel
	AudioRequestType isExternalAudioStreamRequest_AudioRequestType `protobuf_oneof:"audio_request_type"`
}

func (x *ExternalAudioStreamRequest) Reset() {
	*x = ExternalAudioStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAudioStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAudioStreamRequest) ProtoMessage() {}

func (x *ExternalAudioStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAudioStreamRequest.ProtoReflect.Descriptor instead.
func (*ExternalAudioStreamRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{120}
}

func (m *ExternalAudioStreamRequest) GetAudioRequestType() isExternalAudioStreamRequest_AudioRequestType {
	if m != nil {
		return m.AudioRequestType
	}
	return nil
}

func (x *ExternalAudioStreamRequest) GetAudioStreamPrepare() *ExternalAudioStreamPrepare {
	if x, ok := x.GetAudioRequestType().(*ExternalAudioStreamRequest_AudioStreamPrepare); ok {
		return x.AudioStreamPrepare
	}
	return nil
}

func (x *ExternalAudioStreamRequest) GetAudioStreamChunk() *ExternalAudioStreamChunk {
	if x, ok := x.GetAudioRequestType().(*ExternalAudioStreamRequest_AudioStreamChunk); ok {
		return x.AudioStreamChunk
	}
	return nil
}

func (x *ExternalAudioStreamRequest) GetAudioStreamComplete() *ExternalAudioStreamComplete {
	if x, ok := x.GetAudioRequestType().(*ExternalAudioStreamRequest_AudioStreamComplete); ok {
		return x.AudioStreamComplete
	}
	return nil
}

func (x *ExternalAudioStreamRequest) GetAudioStreamCancel() *ExternalAudioStreamCancel {
	if x, ok := x.GetAudioRequestType().(*ExternalAudioStreamRequest_AudioStreamCancel); ok {
		return x.AudioStreamCancel
	}
	return nil
}

type isExternalAudioStreamRequest_AudioRequestType interface {
	isExternalAudioStreamRequest_AudioRequestType()
}

type ExternalAudioStreamRequest_AudioStreamPrepare struct {
	AudioStreamPrepare *ExternalAudioStreamPrepare `protobuf:"bytes,1,opt,name=audio_stream_prepare,json=audioStreamPrepare,proto3,oneof"`
}

type ExternalAudioStreamRequest_AudioStreamChunk struct {
	AudioStreamChunk *ExternalAudioStreamChunk `protobuf:"bytes,2,opt,name=audio_stream_chunk,json=audioStreamChunk,proto3,oneof"`
}

type ExternalAudioStreamRequest_AudioStreamComplete struct {
	AudioStreamComplete *ExternalAudioStreamComplete `protobuf:"bytes,3,opt,name=audio_stream_complete,json=audioStreamComplete,proto3,oneof"`
}

type ExternalAudioStreamRequest_AudioStreamCancel struct {
	AudioStreamCancel *ExternalAudioStreamCancel `protobuf:"bytes,4,opt,name=audio_stream_cancel,json=audioStreamCancel,proto3,oneof"`
}

func (*ExternalAudioStreamRequest_AudioStreamPrepare) isExternalAudioStreamRequest_AudioRequestType() {
}

func (*ExternalAudioStreamRequest_AudioStreamChunk) isExternalAudioStreamRequest_AudioRequestType() {}

func (*ExternalAudioStreamRequest_AudioStreamComplete) isExternalAudioStreamRequest_AudioRequestType() {
}

func (*ExternalAudioStreamRequest_AudioStreamCancel) isExternalAudioStreamRequest_AudioRequestType() {
}

// Audio has been played on the Robot
type ExternalAudioStreamPlaybackComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExternalAudioStreamPlaybackComplete) Reset() {
	*x = ExternalAudioStreamPlaybackComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAudioStreamPlaybackComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAudioStreamPlaybackComplete) ProtoMessage() {}

func (x *ExternalAudioStreamPlaybackComplete) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAudioStreamPlaybackComplete.ProtoReflect.Descriptor instead.
func (*ExternalAudioStreamPlaybackComplete) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{121}
}

// Audio playback failure
type ExternalAudioStreamPlaybackFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExternalAudioStreamPlaybackFailure) Reset() {
	*x = ExternalAudioStreamPlaybackFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAudioStreamPlaybackFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAudioStreamPlaybackFailure) ProtoMessage() {}

func (x *ExternalAudioStreamPlaybackFailure) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAudioStreamPlaybackFailure.ProtoReflect.Descriptor instead.
func (*ExternalAudioStreamPlaybackFailure) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{122}
}

// Audio has been sent to robot that would overrun the memory buffer
type ExternalAudioStreamBufferOverrun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioSamplesSent   uint32 `protobuf:"varint,1,opt,name=audio_samples_sent,json=audioSamplesSent,proto3" json:"audio_samples_sent,omitempty"`
	AudioSamplesPlayed uint32 `protobuf:"varint,2,opt,name=audio_samples_played,json=audioSamplesPlayed,proto3" json:"audio_samples_played,omitempty"`
}

func (x *ExternalAudioStreamBufferOverrun) Reset() {
	*x = ExternalAudioStreamBufferOverrun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAudioStreamBufferOverrun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAudioStreamBufferOverrun) ProtoMessage() {}

func (x *ExternalAudioStreamBufferOverrun) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAudioStreamBufferOverrun.ProtoReflect.Descriptor instead.
func (*ExternalAudioStreamBufferOverrun) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{123}
}

func (x *ExternalAudioStreamBufferOverrun) GetAudioSamplesSent() uint32 {
	if x != nil {
		return x.AudioSamplesSent
	}
	return 0
}

func (x *ExternalAudioStreamBufferOverrun) GetAudioSamplesPlayed() uint32 {
	if x != nil {
		return x.AudioSamplesPlayed
	}
	return 0
}

// Response from streaming audio to robot
type ExternalAudioStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AudioResponseType:
	//	*ExternalAudioStreamResponse_AudioStreamPlaybackComplete
	//	*ExternalAudioStreamResponse_AudioStreamBufferOverrun
	//	*ExternalAudioStreamResponse_AudioStreamPlaybackFailyer
	AudioResponseType isExternalAudioStreamResponse_AudioResponseType `protobuf_oneof:"audio_response_type"`
}

func (x *ExternalAudioStreamResponse) Reset() {
	*x = ExternalAudioStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAudioStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAudioStreamResponse) ProtoMessage() {}

func (x *ExternalAudioStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAudioStreamResponse.ProtoReflect.Descriptor instead.
func (*ExternalAudioStreamResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{124}
}

func (m *ExternalAudioStreamResponse) GetAudioResponseType() isExternalAudioStreamResponse_AudioResponseType {
	if m != nil {
		return m.AudioResponseType
	}
	return nil
}

func (x *ExternalAudioStreamResponse) GetAudioStreamPlaybackComplete() *ExternalAudioStreamPlaybackComplete {
	if x, ok := x.GetAudioResponseType().(*ExternalAudioStreamResponse_AudioStreamPlaybackComplete); ok {
		return x.AudioStreamPlaybackComplete
	}
	return nil
}

func (x *ExternalAudioStreamResponse) GetAudioStreamBufferOverrun() *ExternalAudioStreamBufferOverrun {
	if x, ok := x.GetAudioResponseType().(*ExternalAudioStreamResponse_AudioStreamBufferOverrun); ok {
		return x.AudioStreamBufferOverrun
	}
	return nil
}

func (x *ExternalAudioStreamResponse) GetAudioStreamPlaybackFailyer() *ExternalAudioStreamPlaybackFailure {
	if x, ok := x.GetAudioResponseType().(*ExternalAudioStreamResponse_AudioStreamPlaybackFailyer); ok {
		return x.AudioStreamPlaybackFailyer
	}
	return nil
}

type isExternalAudioStreamResponse_AudioResponseType interface {
	isExternalAudioStreamResponse_AudioResponseType()
}

type ExternalAudioStreamResponse_AudioStreamPlaybackComplete struct {
	AudioStreamPlaybackComplete *ExternalAudioStreamPlaybackComplete `protobuf:"bytes,1,opt,name=audio_stream_playback_complete,json=audioStreamPlaybackComplete,proto3,oneof"`
}

type ExternalAudioStreamResponse_AudioStreamBufferOverrun struct {
	AudioStreamBufferOverrun *ExternalAudioStreamBufferOverrun `protobuf:"bytes,2,opt,name=audio_stream_buffer_overrun,json=audioStreamBufferOverrun,proto3,oneof"`
}

type ExternalAudioStreamResponse_AudioStreamPlaybackFailyer struct {
	AudioStreamPlaybackFailyer *ExternalAudioStreamPlaybackFailure `protobuf:"bytes,3,opt,name=audio_stream_playback_failyer,json=audioStreamPlaybackFailyer,proto3,oneof"`
}

func (*ExternalAudioStreamResponse_AudioStreamPlaybackComplete) isExternalAudioStreamResponse_AudioResponseType() {
}

func (*ExternalAudioStreamResponse_AudioStreamBufferOverrun) isExternalAudioStreamResponse_AudioResponseType() {
}

func (*ExternalAudioStreamResponse_AudioStreamPlaybackFailyer) isExternalAudioStreamResponse_AudioResponseType() {
}

type MasterVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeLevel MasterVolumeLevel `protobuf:"varint,1,opt,name=volume_level,json=volumeLevel,proto3,enum=Anki.Vector.external_interface.MasterVolumeLevel" json:"volume_level,omitempty"`
}

func (x *MasterVolumeRequest) Reset() {
	*x = MasterVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterVolumeRequest) ProtoMessage() {}

func (x *MasterVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterVolumeRequest.ProtoReflect.Descriptor instead.
func (*MasterVolumeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{125}
}

func (x *MasterVolumeRequest) GetVolumeLevel() MasterVolumeLevel {
	if x != nil {
		return x.VolumeLevel
	}
	return MasterVolumeLevel_VOLUME_LOW
}

type MasterVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MasterVolumeResponse) Reset() {
	*x = MasterVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterVolumeResponse) ProtoMessage() {}

func (x *MasterVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterVolumeResponse.ProtoReflect.Descriptor instead.
func (*MasterVolumeResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{126}
}

func (x *MasterVolumeResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// When enabled, RobotObservedObject messages will be produced
type EnableMarkerDetectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *EnableMarkerDetectionRequest) Reset() {
	*x = EnableMarkerDetectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMarkerDetectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMarkerDetectionRequest) ProtoMessage() {}

func (x *EnableMarkerDetectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMarkerDetectionRequest.ProtoReflect.Descriptor instead.
func (*EnableMarkerDetectionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{127}
}

func (x *EnableMarkerDetectionRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type EnableMarkerDetectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *EnableMarkerDetectionResponse) Reset() {
	*x = EnableMarkerDetectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMarkerDetectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMarkerDetectionResponse) ProtoMessage() {}

func (x *EnableMarkerDetectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMarkerDetectionResponse.ProtoReflect.Descriptor instead.
func (*EnableMarkerDetectionResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{128}
}

func (x *EnableMarkerDetectionResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// When enabled, RobotObservedFace messages will be produced
type EnableFaceDetectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable                     bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	EnableSmileDetection       bool `protobuf:"varint,2,opt,name=enable_smile_detection,json=enableSmileDetection,proto3" json:"enable_smile_detection,omitempty"`
	EnableExpressionEstimation bool `protobuf:"varint,3,opt,name=enable_expression_estimation,json=enableExpressionEstimation,proto3" json:"enable_expression_estimation,omitempty"`
	EnableBlinkDetection       bool `protobuf:"varint,4,opt,name=enable_blink_detection,json=enableBlinkDetection,proto3" json:"enable_blink_detection,omitempty"`
	EnableGazeDetection        bool `protobuf:"varint,5,opt,name=enable_gaze_detection,json=enableGazeDetection,proto3" json:"enable_gaze_detection,omitempty"`
}

func (x *EnableFaceDetectionRequest) Reset() {
	*x = EnableFaceDetectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableFaceDetectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableFaceDetectionRequest) ProtoMessage() {}

func (x *EnableFaceDetectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableFaceDetectionRequest.ProtoReflect.Descriptor instead.
func (*EnableFaceDetectionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{129}
}

func (x *EnableFaceDetectionRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *EnableFaceDetectionRequest) GetEnableSmileDetection() bool {
	if x != nil {
		return x.EnableSmileDetection
	}
	return false
}

func (x *EnableFaceDetectionRequest) GetEnableExpressionEstimation() bool {
	if x != nil {
		return x.EnableExpressionEstimation
	}
	return false
}

func (x *EnableFaceDetectionRequest) GetEnableBlinkDetection() bool {
	if x != nil {
		return x.EnableBlinkDetection
	}
	return false
}

func (x *EnableFaceDetectionRequest) GetEnableGazeDetection() bool {
	if x != nil {
		return x.EnableGazeDetection
	}
	return false
}

type EnableFaceDetectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *EnableFaceDetectionResponse) Reset() {
	*x = EnableFaceDetectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableFaceDetectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableFaceDetectionResponse) ProtoMessage() {}

func (x *EnableFaceDetectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableFaceDetectionResponse.ProtoReflect.Descriptor instead.
func (*EnableFaceDetectionResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{130}
}

func (x *EnableFaceDetectionResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// When enabled, RobotObservedMotion messages will be produced
type EnableMotionDetectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *EnableMotionDetectionRequest) Reset() {
	*x = EnableMotionDetectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMotionDetectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMotionDetectionRequest) ProtoMessage() {}

func (x *EnableMotionDetectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMotionDetectionRequest.ProtoReflect.Descriptor instead.
func (*EnableMotionDetectionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{131}
}

func (x *EnableMotionDetectionRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type EnableMotionDetectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *EnableMotionDetectionResponse) Reset() {
	*x = EnableMotionDetectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMotionDetectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMotionDetectionResponse) ProtoMessage() {}

func (x *EnableMotionDetectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMotionDetectionResponse.ProtoReflect.Descriptor instead.
func (*EnableMotionDetectionResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{132}
}

func (x *EnableMotionDetectionResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// When enabled, camera feed will appear on the robot's face, along with any
// detections that are enabled from above messages
type EnableMirrorModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *EnableMirrorModeRequest) Reset() {
	*x = EnableMirrorModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMirrorModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMirrorModeRequest) ProtoMessage() {}

func (x *EnableMirrorModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMirrorModeRequest.ProtoReflect.Descriptor instead.
func (*EnableMirrorModeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{133}
}

func (x *EnableMirrorModeRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type EnableMirrorModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *EnableMirrorModeResponse) Reset() {
	*x = EnableMirrorModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMirrorModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMirrorModeResponse) ProtoMessage() {}

func (x *EnableMirrorModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMirrorModeResponse.ProtoReflect.Descriptor instead.
func (*EnableMirrorModeResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{134}
}

func (x *EnableMirrorModeResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Sent if MirrorMode (camera feed displayed on face) is currently enabled but is automatically
// being disabled
type MirrorModeDisabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MirrorModeDisabled) Reset() {
	*x = MirrorModeDisabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirrorModeDisabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorModeDisabled) ProtoMessage() {}

func (x *MirrorModeDisabled) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorModeDisabled.ProtoReflect.Descriptor instead.
func (*MirrorModeDisabled) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{135}
}

// Toggle image streaming at the given resolution
type EnableImageStreamingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool 				  `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	EnableHighResolution bool     `protobuf:"varint,1,opt,name=enable_high_resolution,json=enableHighResolution" json:"enable_high_resolution,omitempty"`
}

func (x *EnableImageStreamingRequest) Reset() {
	*x = EnableImageStreamingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableImageStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableImageStreamingRequest) ProtoMessage() {}

func (x *EnableImageStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableImageStreamingRequest.ProtoReflect.Descriptor instead.
func (*EnableImageStreamingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{136}
}

func (x *EnableImageStreamingRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type EnableImageStreamingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *EnableImageStreamingResponse) Reset() {
	*x = EnableImageStreamingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableImageStreamingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableImageStreamingResponse) ProtoMessage() {}

func (x *EnableImageStreamingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableImageStreamingResponse.ProtoReflect.Descriptor instead.
func (*EnableImageStreamingResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{137}
}

func (x *EnableImageStreamingResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Request whether or not image streaming is enabled on the robot
type IsImageStreamingEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsImageStreamingEnabledRequest) Reset() {
	*x = IsImageStreamingEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsImageStreamingEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsImageStreamingEnabledRequest) ProtoMessage() {}

func (x *IsImageStreamingEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsImageStreamingEnabledRequest.ProtoReflect.Descriptor instead.
func (*IsImageStreamingEnabledRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{138}
}

// Indicates whether or not image streaming is enabled on the robot
type IsImageStreamingEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsImageStreamingEnabled bool `protobuf:"varint,1,opt,name=is_image_streaming_enabled,json=isImageStreamingEnabled,proto3" json:"is_image_streaming_enabled,omitempty"`
}

func (x *IsImageStreamingEnabledResponse) Reset() {
	*x = IsImageStreamingEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsImageStreamingEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsImageStreamingEnabledResponse) ProtoMessage() {}

func (x *IsImageStreamingEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsImageStreamingEnabledResponse.ProtoReflect.Descriptor instead.
func (*IsImageStreamingEnabledResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{139}
}

func (x *IsImageStreamingEnabledResponse) GetIsImageStreamingEnabled() bool {
	if x != nil {
		return x.IsImageStreamingEnabled
	}
	return false
}

// Sent when vision modes are automatically disabled due to the SDK no longer having control
// of the robot
type VisionModesAutoDisabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VisionModesAutoDisabled) Reset() {
	*x = VisionModesAutoDisabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisionModesAutoDisabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionModesAutoDisabled) ProtoMessage() {}

func (x *VisionModesAutoDisabled) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionModesAutoDisabled.ProtoReflect.Descriptor instead.
func (*VisionModesAutoDisabled) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{140}
}

// One frame of image data and associated metadata
type ImageChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameTimeStamp  uint32                   `protobuf:"varint,1,opt,name=frame_time_stamp,json=frameTimeStamp,proto3" json:"frame_time_stamp,omitempty"`
	ImageId         uint32                   `protobuf:"varint,2,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	Width           uint32                   `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height          uint32                   `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	ImageEncoding   ImageChunk_ImageEncoding `protobuf:"varint,5,opt,name=image_encoding,json=imageEncoding,proto3,enum=Anki.Vector.external_interface.ImageChunk_ImageEncoding" json:"image_encoding,omitempty"`
	DisplayIndex    uint32                   `protobuf:"varint,6,opt,name=display_index,json=displayIndex,proto3" json:"display_index,omitempty"`
	ImageChunkCount uint32                   `protobuf:"varint,7,opt,name=image_chunk_count,json=imageChunkCount,proto3" json:"image_chunk_count,omitempty"`
	ChunkId         uint32                   `protobuf:"varint,8,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Data            []byte                   `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ImageChunk) Reset() {
	*x = ImageChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageChunk) ProtoMessage() {}

func (x *ImageChunk) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageChunk.ProtoReflect.Descriptor instead.
func (*ImageChunk) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{141}
}

func (x *ImageChunk) GetFrameTimeStamp() uint32 {
	if x != nil {
		return x.FrameTimeStamp
	}
	return 0
}

func (x *ImageChunk) GetImageId() uint32 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *ImageChunk) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageChunk) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageChunk) GetImageEncoding() ImageChunk_ImageEncoding {
	if x != nil {
		return x.ImageEncoding
	}
	return ImageChunk_NONE_IMAGE_ENCODING
}

func (x *ImageChunk) GetDisplayIndex() uint32 {
	if x != nil {
		return x.DisplayIndex
	}
	return 0
}

func (x *ImageChunk) GetImageChunkCount() uint32 {
	if x != nil {
		return x.ImageChunkCount
	}
	return 0
}

func (x *ImageChunk) GetChunkId() uint32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *ImageChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CameraFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CameraFeedRequest) Reset() {
	*x = CameraFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraFeedRequest) ProtoMessage() {}

func (x *CameraFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraFeedRequest.ProtoReflect.Descriptor instead.
func (*CameraFeedRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{142}
}

type CameraFeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameTimeStamp uint32                   `protobuf:"varint,1,opt,name=frame_time_stamp,json=frameTimeStamp,proto3" json:"frame_time_stamp,omitempty"`
	ImageId        uint32                   `protobuf:"varint,2,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ImageEncoding  ImageChunk_ImageEncoding `protobuf:"varint,3,opt,name=image_encoding,json=imageEncoding,proto3,enum=Anki.Vector.external_interface.ImageChunk_ImageEncoding" json:"image_encoding,omitempty"`
	Data           []byte                   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CameraFeedResponse) Reset() {
	*x = CameraFeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraFeedResponse) ProtoMessage() {}

func (x *CameraFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraFeedResponse.ProtoReflect.Descriptor instead.
func (*CameraFeedResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{143}
}

func (x *CameraFeedResponse) GetFrameTimeStamp() uint32 {
	if x != nil {
		return x.FrameTimeStamp
	}
	return 0
}

func (x *CameraFeedResponse) GetImageId() uint32 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *CameraFeedResponse) GetImageEncoding() ImageChunk_ImageEncoding {
	if x != nil {
		return x.ImageEncoding
	}
	return ImageChunk_NONE_IMAGE_ENCODING
}

func (x *CameraFeedResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CaptureSingleImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableHighResolution bool     `protobuf:"varint,1,opt,name=enable_high_resolution,json=enableHighResolution" json:"enable_high_resolution,omitempty"`
}

func (x *CaptureSingleImageRequest) Reset() {
	*x = CaptureSingleImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureSingleImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureSingleImageRequest) ProtoMessage() {}

func (x *CaptureSingleImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureSingleImageRequest.ProtoReflect.Descriptor instead.
func (*CaptureSingleImageRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{144}
}

type CaptureSingleImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *ResponseStatus          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	FrameTimeStamp uint32                   `protobuf:"varint,2,opt,name=frame_time_stamp,json=frameTimeStamp,proto3" json:"frame_time_stamp,omitempty"`
	ImageId        uint32                   `protobuf:"varint,3,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ImageEncoding  ImageChunk_ImageEncoding `protobuf:"varint,4,opt,name=image_encoding,json=imageEncoding,proto3,enum=Anki.Vector.external_interface.ImageChunk_ImageEncoding" json:"image_encoding,omitempty"`
	Data           []byte                   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CaptureSingleImageResponse) Reset() {
	*x = CaptureSingleImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureSingleImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureSingleImageResponse) ProtoMessage() {}

func (x *CaptureSingleImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureSingleImageResponse.ProtoReflect.Descriptor instead.
func (*CaptureSingleImageResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{145}
}

func (x *CaptureSingleImageResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CaptureSingleImageResponse) GetFrameTimeStamp() uint32 {
	if x != nil {
		return x.FrameTimeStamp
	}
	return 0
}

func (x *CaptureSingleImageResponse) GetImageId() uint32 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *CaptureSingleImageResponse) GetImageEncoding() ImageChunk_ImageEncoding {
	if x != nil {
		return x.ImageEncoding
	}
	return ImageChunk_NONE_IMAGE_ENCODING
}

func (x *CaptureSingleImageResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SetEyeColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hue        float32 `protobuf:"fixed32,1,opt,name=hue,proto3" json:"hue,omitempty"`
	Saturation float32 `protobuf:"fixed32,2,opt,name=saturation,proto3" json:"saturation,omitempty"`
}

func (x *SetEyeColorRequest) Reset() {
	*x = SetEyeColorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEyeColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEyeColorRequest) ProtoMessage() {}

func (x *SetEyeColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEyeColorRequest.ProtoReflect.Descriptor instead.
func (*SetEyeColorRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{146}
}

func (x *SetEyeColorRequest) GetHue() float32 {
	if x != nil {
		return x.Hue
	}
	return 0
}

func (x *SetEyeColorRequest) GetSaturation() float32 {
	if x != nil {
		return x.Saturation
	}
	return 0
}

type SetEyeColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetEyeColorResponse) Reset() {
	*x = SetEyeColorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEyeColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEyeColorResponse) ProtoMessage() {}

func (x *SetEyeColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEyeColorResponse.ProtoReflect.Descriptor instead.
func (*SetEyeColorResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{147}
}

func (x *SetEyeColorResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type SDKInitializationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SdkModuleVersion     string `protobuf:"bytes,1,opt,name=sdk_module_version,json=sdkModuleVersion,proto3" json:"sdk_module_version,omitempty"`
	PythonVersion        string `protobuf:"bytes,2,opt,name=python_version,json=pythonVersion,proto3" json:"python_version,omitempty"`
	PythonImplementation string `protobuf:"bytes,3,opt,name=python_implementation,json=pythonImplementation,proto3" json:"python_implementation,omitempty"`
	OsVersion            string `protobuf:"bytes,4,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	CpuVersion           string `protobuf:"bytes,5,opt,name=cpu_version,json=cpuVersion,proto3" json:"cpu_version,omitempty"`
}

func (x *SDKInitializationRequest) Reset() {
	*x = SDKInitializationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKInitializationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKInitializationRequest) ProtoMessage() {}

func (x *SDKInitializationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKInitializationRequest.ProtoReflect.Descriptor instead.
func (*SDKInitializationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{148}
}

func (x *SDKInitializationRequest) GetSdkModuleVersion() string {
	if x != nil {
		return x.SdkModuleVersion
	}
	return ""
}

func (x *SDKInitializationRequest) GetPythonVersion() string {
	if x != nil {
		return x.PythonVersion
	}
	return ""
}

func (x *SDKInitializationRequest) GetPythonImplementation() string {
	if x != nil {
		return x.PythonImplementation
	}
	return ""
}

func (x *SDKInitializationRequest) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *SDKInitializationRequest) GetCpuVersion() string {
	if x != nil {
		return x.CpuVersion
	}
	return ""
}

type SDKInitializationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SDKInitializationResponse) Reset() {
	*x = SDKInitializationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKInitializationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKInitializationResponse) ProtoMessage() {}

func (x *SDKInitializationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKInitializationResponse.ProtoReflect.Descriptor instead.
func (*SDKInitializationResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{149}
}

func (x *SDKInitializationResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type AppDisconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AppDisconnected) Reset() {
	*x = AppDisconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppDisconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDisconnected) ProtoMessage() {}

func (x *AppDisconnected) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDisconnected.ProtoReflect.Descriptor instead.
func (*AppDisconnected) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{150}
}

type AppIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intent string `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
	Param  string `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *AppIntentRequest) Reset() {
	*x = AppIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIntentRequest) ProtoMessage() {}

func (x *AppIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIntentRequest.ProtoReflect.Descriptor instead.
func (*AppIntentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{151}
}

func (x *AppIntentRequest) GetIntent() string {
	if x != nil {
		return x.Intent
	}
	return ""
}

func (x *AppIntentRequest) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

type AppIntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AppIntentResponse) Reset() {
	*x = AppIntentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIntentResponse) ProtoMessage() {}

func (x *AppIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIntentResponse.ProtoReflect.Descriptor instead.
func (*AppIntentResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{152}
}

func (x *AppIntentResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type FeatureStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureName string `protobuf:"bytes,1,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
	Source      string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"` // Voice, App, AI, Unknown
}

func (x *FeatureStatus) Reset() {
	*x = FeatureStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureStatus) ProtoMessage() {}

func (x *FeatureStatus) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureStatus.ProtoReflect.Descriptor instead.
func (*FeatureStatus) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{153}
}

func (x *FeatureStatus) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

func (x *FeatureStatus) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type Onboarding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OnboardingType:
	//	*Onboarding_OnboardingState
	//	*Onboarding_OnboardingWakeUpFinished
	//	*Onboarding_Onboarding_1P0ChargingInfo
	OnboardingType isOnboarding_OnboardingType `protobuf_oneof:"onboarding_type"`
}

func (x *Onboarding) Reset() {
	*x = Onboarding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Onboarding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Onboarding) ProtoMessage() {}

func (x *Onboarding) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Onboarding.ProtoReflect.Descriptor instead.
func (*Onboarding) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{154}
}

func (m *Onboarding) GetOnboardingType() isOnboarding_OnboardingType {
	if m != nil {
		return m.OnboardingType
	}
	return nil
}

func (x *Onboarding) GetOnboardingState() *OnboardingState {
	if x, ok := x.GetOnboardingType().(*Onboarding_OnboardingState); ok {
		return x.OnboardingState
	}
	return nil
}

func (x *Onboarding) GetOnboardingWakeUpFinished() *OnboardingWakeUpFinished {
	if x, ok := x.GetOnboardingType().(*Onboarding_OnboardingWakeUpFinished); ok {
		return x.OnboardingWakeUpFinished
	}
	return nil
}

func (x *Onboarding) GetOnboarding_1P0ChargingInfo() *Onboarding1P0ChargingInfo {
	if x, ok := x.GetOnboardingType().(*Onboarding_Onboarding_1P0ChargingInfo); ok {
		return x.Onboarding_1P0ChargingInfo
	}
	return nil
}

type isOnboarding_OnboardingType interface {
	isOnboarding_OnboardingType()
}

type Onboarding_OnboardingState struct {
	OnboardingState *OnboardingState `protobuf:"bytes,1,opt,name=onboarding_state,json=onboardingState,proto3,oneof"`
}

type Onboarding_OnboardingWakeUpFinished struct {
	OnboardingWakeUpFinished *OnboardingWakeUpFinished `protobuf:"bytes,9,opt,name=onboarding_wake_up_finished,json=onboardingWakeUpFinished,proto3,oneof"`
}

type Onboarding_Onboarding_1P0ChargingInfo struct {
	Onboarding_1P0ChargingInfo *Onboarding1P0ChargingInfo `protobuf:"bytes,10,opt,name=onboarding_1p0_charging_info,json=onboarding1p0ChargingInfo,proto3,oneof"` // 1p0 backward compatibility messages ^^^
}

func (*Onboarding_OnboardingState) isOnboarding_OnboardingType() {}

func (*Onboarding_OnboardingWakeUpFinished) isOnboarding_OnboardingType() {}

func (*Onboarding_Onboarding_1P0ChargingInfo) isOnboarding_OnboardingType() {}

type RobotHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RobotHistoryRequest) Reset() {
	*x = RobotHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotHistoryRequest) ProtoMessage() {}

func (x *RobotHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotHistoryRequest.ProtoReflect.Descriptor instead.
func (*RobotHistoryRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{155}
}

type RobotHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*TimeStampedStatus `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *RobotHistoryResponse) Reset() {
	*x = RobotHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotHistoryResponse) ProtoMessage() {}

func (x *RobotHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotHistoryResponse.ProtoReflect.Descriptor instead.
func (*RobotHistoryResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{156}
}

func (x *RobotHistoryResponse) GetMessages() []*TimeStampedStatus {
	if x != nil {
		return x.Messages
	}
	return nil
}

type OnboardingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage OnboardingStages `protobuf:"varint,1,opt,name=stage,proto3,enum=Anki.Vector.external_interface.OnboardingStages" json:"stage,omitempty"`
}

func (x *OnboardingState) Reset() {
	*x = OnboardingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingState) ProtoMessage() {}

func (x *OnboardingState) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingState.ProtoReflect.Descriptor instead.
func (*OnboardingState) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{157}
}

func (x *OnboardingState) GetStage() OnboardingStages {
	if x != nil {
		return x.Stage
	}
	return OnboardingStages_NotStarted
}

type OnboardingStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnboardingStateRequest) Reset() {
	*x = OnboardingStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingStateRequest) ProtoMessage() {}

func (x *OnboardingStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingStateRequest.ProtoReflect.Descriptor instead.
func (*OnboardingStateRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{158}
}

type OnboardingStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *ResponseStatus  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	OnboardingState *OnboardingState `protobuf:"bytes,2,opt,name=onboarding_state,json=onboardingState,proto3" json:"onboarding_state,omitempty"`
}

func (x *OnboardingStateResponse) Reset() {
	*x = OnboardingStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingStateResponse) ProtoMessage() {}

func (x *OnboardingStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingStateResponse.ProtoReflect.Descriptor instead.
func (*OnboardingStateResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{159}
}

func (x *OnboardingStateResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *OnboardingStateResponse) GetOnboardingState() *OnboardingState {
	if x != nil {
		return x.OnboardingState
	}
	return nil
}

type OnboardingSetPhaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase OnboardingPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=Anki.Vector.external_interface.OnboardingPhase" json:"phase,omitempty"`
}

func (x *OnboardingSetPhaseRequest) Reset() {
	*x = OnboardingSetPhaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingSetPhaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingSetPhaseRequest) ProtoMessage() {}

func (x *OnboardingSetPhaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingSetPhaseRequest.ProtoReflect.Descriptor instead.
func (*OnboardingSetPhaseRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{160}
}

func (x *OnboardingSetPhaseRequest) GetPhase() OnboardingPhase {
	if x != nil {
		return x.Phase
	}
	return OnboardingPhase_InvalidPhase
}

type OnboardingSetPhaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *ResponseStatus      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Phase      OnboardingPhase      `protobuf:"varint,2,opt,name=phase,proto3,enum=Anki.Vector.external_interface.OnboardingPhase" json:"phase,omitempty"`
	PhaseState OnboardingPhaseState `protobuf:"varint,3,opt,name=phase_state,json=phaseState,proto3,enum=Anki.Vector.external_interface.OnboardingPhaseState" json:"phase_state,omitempty"`
}

func (x *OnboardingSetPhaseResponse) Reset() {
	*x = OnboardingSetPhaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingSetPhaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingSetPhaseResponse) ProtoMessage() {}

func (x *OnboardingSetPhaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingSetPhaseResponse.ProtoReflect.Descriptor instead.
func (*OnboardingSetPhaseResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{161}
}

func (x *OnboardingSetPhaseResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *OnboardingSetPhaseResponse) GetPhase() OnboardingPhase {
	if x != nil {
		return x.Phase
	}
	return OnboardingPhase_InvalidPhase
}

func (x *OnboardingSetPhaseResponse) GetPhaseState() OnboardingPhaseState {
	if x != nil {
		return x.PhaseState
	}
	return OnboardingPhaseState_PhaseInvalid
}

type OnboardingPhaseProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnboardingPhaseProgressRequest) Reset() {
	*x = OnboardingPhaseProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingPhaseProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingPhaseProgressRequest) ProtoMessage() {}

func (x *OnboardingPhaseProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingPhaseProgressRequest.ProtoReflect.Descriptor instead.
func (*OnboardingPhaseProgressRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{162}
}

type OnboardingPhaseProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *ResponseStatus      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LastSetPhase      OnboardingPhase      `protobuf:"varint,2,opt,name=last_set_phase,json=lastSetPhase,proto3,enum=Anki.Vector.external_interface.OnboardingPhase" json:"last_set_phase,omitempty"`
	LastSetPhaseState OnboardingPhaseState `protobuf:"varint,3,opt,name=last_set_phase_state,json=lastSetPhaseState,proto3,enum=Anki.Vector.external_interface.OnboardingPhaseState" json:"last_set_phase_state,omitempty"`
	PercentCompleted  int32                `protobuf:"varint,4,opt,name=percent_completed,json=percentCompleted,proto3" json:"percent_completed,omitempty"`
}

func (x *OnboardingPhaseProgressResponse) Reset() {
	*x = OnboardingPhaseProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingPhaseProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingPhaseProgressResponse) ProtoMessage() {}

func (x *OnboardingPhaseProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingPhaseProgressResponse.ProtoReflect.Descriptor instead.
func (*OnboardingPhaseProgressResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{163}
}

func (x *OnboardingPhaseProgressResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *OnboardingPhaseProgressResponse) GetLastSetPhase() OnboardingPhase {
	if x != nil {
		return x.LastSetPhase
	}
	return OnboardingPhase_InvalidPhase
}

func (x *OnboardingPhaseProgressResponse) GetLastSetPhaseState() OnboardingPhaseState {
	if x != nil {
		return x.LastSetPhaseState
	}
	return OnboardingPhaseState_PhaseInvalid
}

func (x *OnboardingPhaseProgressResponse) GetPercentCompleted() int32 {
	if x != nil {
		return x.PercentCompleted
	}
	return 0
}

type OnboardingChargeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnboardingChargeInfoRequest) Reset() {
	*x = OnboardingChargeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingChargeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingChargeInfoRequest) ProtoMessage() {}

func (x *OnboardingChargeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingChargeInfoRequest.ProtoReflect.Descriptor instead.
func (*OnboardingChargeInfoRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{164}
}

type OnboardingChargeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	OnCharger          bool            `protobuf:"varint,2,opt,name=on_charger,json=onCharger,proto3" json:"on_charger,omitempty"`
	NeedsToCharge      bool            `protobuf:"varint,3,opt,name=needs_to_charge,json=needsToCharge,proto3" json:"needs_to_charge,omitempty"`
	RequiredChargeTime float32         `protobuf:"fixed32,4,opt,name=required_charge_time,json=requiredChargeTime,proto3" json:"required_charge_time,omitempty"`
}

func (x *OnboardingChargeInfoResponse) Reset() {
	*x = OnboardingChargeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingChargeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingChargeInfoResponse) ProtoMessage() {}

func (x *OnboardingChargeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingChargeInfoResponse.ProtoReflect.Descriptor instead.
func (*OnboardingChargeInfoResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{165}
}

func (x *OnboardingChargeInfoResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *OnboardingChargeInfoResponse) GetOnCharger() bool {
	if x != nil {
		return x.OnCharger
	}
	return false
}

func (x *OnboardingChargeInfoResponse) GetNeedsToCharge() bool {
	if x != nil {
		return x.NeedsToCharge
	}
	return false
}

func (x *OnboardingChargeInfoResponse) GetRequiredChargeTime() float32 {
	if x != nil {
		return x.RequiredChargeTime
	}
	return 0
}

type OnboardingSkipOnboarding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnboardingSkipOnboarding) Reset() {
	*x = OnboardingSkipOnboarding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingSkipOnboarding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingSkipOnboarding) ProtoMessage() {}

func (x *OnboardingSkipOnboarding) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingSkipOnboarding.ProtoReflect.Descriptor instead.
func (*OnboardingSkipOnboarding) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{166}
}

type OnboardingRestart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnboardingRestart) Reset() {
	*x = OnboardingRestart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingRestart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingRestart) ProtoMessage() {}

func (x *OnboardingRestart) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingRestart.ProtoReflect.Descriptor instead.
func (*OnboardingRestart) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{167}
}

type OnboardingMarkCompleteAndExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnboardingMarkCompleteAndExit) Reset() {
	*x = OnboardingMarkCompleteAndExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingMarkCompleteAndExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingMarkCompleteAndExit) ProtoMessage() {}

func (x *OnboardingMarkCompleteAndExit) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingMarkCompleteAndExit.ProtoReflect.Descriptor instead.
func (*OnboardingMarkCompleteAndExit) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{168}
}

type OnboardingInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofMessageType:
	//	*OnboardingInputRequest_OnboardingCompleteRequest
	//	*OnboardingInputRequest_OnboardingWakeUpRequest
	//	*OnboardingInputRequest_OnboardingSkipOnboarding
	//	*OnboardingInputRequest_OnboardingRestart
	//	*OnboardingInputRequest_OnboardingWakeUpStartedRequest
	//	*OnboardingInputRequest_OnboardingSetPhaseRequest
	//	*OnboardingInputRequest_OnboardingPhaseProgressRequest
	//	*OnboardingInputRequest_OnboardingChargeInfoRequest
	//	*OnboardingInputRequest_OnboardingMarkCompleteAndExit
	OneofMessageType isOnboardingInputRequest_OneofMessageType `protobuf_oneof:"oneof_message_type"`
}

func (x *OnboardingInputRequest) Reset() {
	*x = OnboardingInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingInputRequest) ProtoMessage() {}

func (x *OnboardingInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingInputRequest.ProtoReflect.Descriptor instead.
func (*OnboardingInputRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{169}
}

func (m *OnboardingInputRequest) GetOneofMessageType() isOnboardingInputRequest_OneofMessageType {
	if m != nil {
		return m.OneofMessageType
	}
	return nil
}

func (x *OnboardingInputRequest) GetOnboardingCompleteRequest() *OnboardingCompleteRequest {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputRequest_OnboardingCompleteRequest); ok {
		return x.OnboardingCompleteRequest
	}
	return nil
}

func (x *OnboardingInputRequest) GetOnboardingWakeUpRequest() *OnboardingWakeUpRequest {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputRequest_OnboardingWakeUpRequest); ok {
		return x.OnboardingWakeUpRequest
	}
	return nil
}

func (x *OnboardingInputRequest) GetOnboardingSkipOnboarding() *OnboardingSkipOnboarding {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputRequest_OnboardingSkipOnboarding); ok {
		return x.OnboardingSkipOnboarding
	}
	return nil
}

func (x *OnboardingInputRequest) GetOnboardingRestart() *OnboardingRestart {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputRequest_OnboardingRestart); ok {
		return x.OnboardingRestart
	}
	return nil
}

func (x *OnboardingInputRequest) GetOnboardingWakeUpStartedRequest() *OnboardingWakeUpStartedRequest {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputRequest_OnboardingWakeUpStartedRequest); ok {
		return x.OnboardingWakeUpStartedRequest
	}
	return nil
}

func (x *OnboardingInputRequest) GetOnboardingSetPhaseRequest() *OnboardingSetPhaseRequest {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputRequest_OnboardingSetPhaseRequest); ok {
		return x.OnboardingSetPhaseRequest
	}
	return nil
}

func (x *OnboardingInputRequest) GetOnboardingPhaseProgressRequest() *OnboardingPhaseProgressRequest {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputRequest_OnboardingPhaseProgressRequest); ok {
		return x.OnboardingPhaseProgressRequest
	}
	return nil
}

func (x *OnboardingInputRequest) GetOnboardingChargeInfoRequest() *OnboardingChargeInfoRequest {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputRequest_OnboardingChargeInfoRequest); ok {
		return x.OnboardingChargeInfoRequest
	}
	return nil
}

func (x *OnboardingInputRequest) GetOnboardingMarkCompleteAndExit() *OnboardingMarkCompleteAndExit {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputRequest_OnboardingMarkCompleteAndExit); ok {
		return x.OnboardingMarkCompleteAndExit
	}
	return nil
}

type isOnboardingInputRequest_OneofMessageType interface {
	isOnboardingInputRequest_OneofMessageType()
}

type OnboardingInputRequest_OnboardingCompleteRequest struct {
	OnboardingCompleteRequest *OnboardingCompleteRequest `protobuf:"bytes,1,opt,name=onboarding_complete_request,json=onboardingCompleteRequest,proto3,oneof"`
}

type OnboardingInputRequest_OnboardingWakeUpRequest struct {
	OnboardingWakeUpRequest *OnboardingWakeUpRequest `protobuf:"bytes,2,opt,name=onboarding_wake_up_request,json=onboardingWakeUpRequest,proto3,oneof"`
}

type OnboardingInputRequest_OnboardingSkipOnboarding struct {
	OnboardingSkipOnboarding *OnboardingSkipOnboarding `protobuf:"bytes,7,opt,name=onboarding_skip_onboarding,json=onboardingSkipOnboarding,proto3,oneof"`
}

type OnboardingInputRequest_OnboardingRestart struct {
	OnboardingRestart *OnboardingRestart `protobuf:"bytes,8,opt,name=onboarding_restart,json=onboardingRestart,proto3,oneof"`
}

type OnboardingInputRequest_OnboardingWakeUpStartedRequest struct {
	OnboardingWakeUpStartedRequest *OnboardingWakeUpStartedRequest `protobuf:"bytes,9,opt,name=onboarding_wake_up_started_request,json=onboardingWakeUpStartedRequest,proto3,oneof"`
}

type OnboardingInputRequest_OnboardingSetPhaseRequest struct {
	// 1p0 backward compatibility messages ^^^
	OnboardingSetPhaseRequest *OnboardingSetPhaseRequest `protobuf:"bytes,10,opt,name=onboarding_set_phase_request,json=onboardingSetPhaseRequest,proto3,oneof"`
}

type OnboardingInputRequest_OnboardingPhaseProgressRequest struct {
	OnboardingPhaseProgressRequest *OnboardingPhaseProgressRequest `protobuf:"bytes,11,opt,name=onboarding_phase_progress_request,json=onboardingPhaseProgressRequest,proto3,oneof"`
}

type OnboardingInputRequest_OnboardingChargeInfoRequest struct {
	OnboardingChargeInfoRequest *OnboardingChargeInfoRequest `protobuf:"bytes,12,opt,name=onboarding_charge_info_request,json=onboardingChargeInfoRequest,proto3,oneof"`
}

type OnboardingInputRequest_OnboardingMarkCompleteAndExit struct {
	OnboardingMarkCompleteAndExit *OnboardingMarkCompleteAndExit `protobuf:"bytes,13,opt,name=onboarding_mark_complete_and_exit,json=onboardingMarkCompleteAndExit,proto3,oneof"`
}

func (*OnboardingInputRequest_OnboardingCompleteRequest) isOnboardingInputRequest_OneofMessageType() {
}

func (*OnboardingInputRequest_OnboardingWakeUpRequest) isOnboardingInputRequest_OneofMessageType() {}

func (*OnboardingInputRequest_OnboardingSkipOnboarding) isOnboardingInputRequest_OneofMessageType() {}

func (*OnboardingInputRequest_OnboardingRestart) isOnboardingInputRequest_OneofMessageType() {}

func (*OnboardingInputRequest_OnboardingWakeUpStartedRequest) isOnboardingInputRequest_OneofMessageType() {
}

func (*OnboardingInputRequest_OnboardingSetPhaseRequest) isOnboardingInputRequest_OneofMessageType() {
}

func (*OnboardingInputRequest_OnboardingPhaseProgressRequest) isOnboardingInputRequest_OneofMessageType() {
}

func (*OnboardingInputRequest_OnboardingChargeInfoRequest) isOnboardingInputRequest_OneofMessageType() {
}

func (*OnboardingInputRequest_OnboardingMarkCompleteAndExit) isOnboardingInputRequest_OneofMessageType() {
}

type OnboardingInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are assignable to OneofMessageType:
	//	*OnboardingInputResponse_OnboardingCompleteResponse
	//	*OnboardingInputResponse_OnboardingWakeUpResponse
	//	*OnboardingInputResponse_OnboardingWakeUpStartedResponse
	//	*OnboardingInputResponse_OnboardingSetPhaseResponse
	//	*OnboardingInputResponse_OnboardingPhaseProgressResponse
	//	*OnboardingInputResponse_OnboardingChargeInfoResponse
	OneofMessageType isOnboardingInputResponse_OneofMessageType `protobuf_oneof:"oneof_message_type"`
}

func (x *OnboardingInputResponse) Reset() {
	*x = OnboardingInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingInputResponse) ProtoMessage() {}

func (x *OnboardingInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingInputResponse.ProtoReflect.Descriptor instead.
func (*OnboardingInputResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{170}
}

func (x *OnboardingInputResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (m *OnboardingInputResponse) GetOneofMessageType() isOnboardingInputResponse_OneofMessageType {
	if m != nil {
		return m.OneofMessageType
	}
	return nil
}

func (x *OnboardingInputResponse) GetOnboardingCompleteResponse() *OnboardingCompleteResponse {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputResponse_OnboardingCompleteResponse); ok {
		return x.OnboardingCompleteResponse
	}
	return nil
}

func (x *OnboardingInputResponse) GetOnboardingWakeUpResponse() *OnboardingWakeUpResponse {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputResponse_OnboardingWakeUpResponse); ok {
		return x.OnboardingWakeUpResponse
	}
	return nil
}

func (x *OnboardingInputResponse) GetOnboardingWakeUpStartedResponse() *OnboardingWakeUpStartedResponse {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputResponse_OnboardingWakeUpStartedResponse); ok {
		return x.OnboardingWakeUpStartedResponse
	}
	return nil
}

func (x *OnboardingInputResponse) GetOnboardingSetPhaseResponse() *OnboardingSetPhaseResponse {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputResponse_OnboardingSetPhaseResponse); ok {
		return x.OnboardingSetPhaseResponse
	}
	return nil
}

func (x *OnboardingInputResponse) GetOnboardingPhaseProgressResponse() *OnboardingPhaseProgressResponse {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputResponse_OnboardingPhaseProgressResponse); ok {
		return x.OnboardingPhaseProgressResponse
	}
	return nil
}

func (x *OnboardingInputResponse) GetOnboardingChargeInfoResponse() *OnboardingChargeInfoResponse {
	if x, ok := x.GetOneofMessageType().(*OnboardingInputResponse_OnboardingChargeInfoResponse); ok {
		return x.OnboardingChargeInfoResponse
	}
	return nil
}

type isOnboardingInputResponse_OneofMessageType interface {
	isOnboardingInputResponse_OneofMessageType()
}

type OnboardingInputResponse_OnboardingCompleteResponse struct {
	OnboardingCompleteResponse *OnboardingCompleteResponse `protobuf:"bytes,2,opt,name=onboarding_complete_response,json=onboardingCompleteResponse,proto3,oneof"`
}

type OnboardingInputResponse_OnboardingWakeUpResponse struct {
	OnboardingWakeUpResponse *OnboardingWakeUpResponse `protobuf:"bytes,3,opt,name=onboarding_wake_up_response,json=onboardingWakeUpResponse,proto3,oneof"`
}

type OnboardingInputResponse_OnboardingWakeUpStartedResponse struct {
	OnboardingWakeUpStartedResponse *OnboardingWakeUpStartedResponse `protobuf:"bytes,6,opt,name=onboarding_wake_up_started_response,json=onboardingWakeUpStartedResponse,proto3,oneof"`
}

type OnboardingInputResponse_OnboardingSetPhaseResponse struct {
	// 1p0 backward compatibility messages ^^^
	OnboardingSetPhaseResponse *OnboardingSetPhaseResponse `protobuf:"bytes,7,opt,name=onboarding_set_phase_response,json=onboardingSetPhaseResponse,proto3,oneof"`
}

type OnboardingInputResponse_OnboardingPhaseProgressResponse struct {
	OnboardingPhaseProgressResponse *OnboardingPhaseProgressResponse `protobuf:"bytes,8,opt,name=onboarding_phase_progress_response,json=onboardingPhaseProgressResponse,proto3,oneof"`
}

type OnboardingInputResponse_OnboardingChargeInfoResponse struct {
	OnboardingChargeInfoResponse *OnboardingChargeInfoResponse `protobuf:"bytes,9,opt,name=onboarding_charge_info_response,json=onboardingChargeInfoResponse,proto3,oneof"`
}

func (*OnboardingInputResponse_OnboardingCompleteResponse) isOnboardingInputResponse_OneofMessageType() {
}

func (*OnboardingInputResponse_OnboardingWakeUpResponse) isOnboardingInputResponse_OneofMessageType() {
}

func (*OnboardingInputResponse_OnboardingWakeUpStartedResponse) isOnboardingInputResponse_OneofMessageType() {
}

func (*OnboardingInputResponse_OnboardingSetPhaseResponse) isOnboardingInputResponse_OneofMessageType() {
}

func (*OnboardingInputResponse_OnboardingPhaseProgressResponse) isOnboardingInputResponse_OneofMessageType() {
}

func (*OnboardingInputResponse_OnboardingChargeInfoResponse) isOnboardingInputResponse_OneofMessageType() {
}

// 1p0 backward compatibility messages - - - - -
type OnboardingCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnboardingCompleteRequest) Reset() {
	*x = OnboardingCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingCompleteRequest) ProtoMessage() {}

func (x *OnboardingCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingCompleteRequest.ProtoReflect.Descriptor instead.
func (*OnboardingCompleteRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{171}
}

type OnboardingCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Completed bool `protobuf:"varint,1,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (x *OnboardingCompleteResponse) Reset() {
	*x = OnboardingCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingCompleteResponse) ProtoMessage() {}

func (x *OnboardingCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingCompleteResponse.ProtoReflect.Descriptor instead.
func (*OnboardingCompleteResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{172}
}

func (x *OnboardingCompleteResponse) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

type OnboardingWakeUpStartedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnboardingWakeUpStartedRequest) Reset() {
	*x = OnboardingWakeUpStartedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingWakeUpStartedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingWakeUpStartedRequest) ProtoMessage() {}

func (x *OnboardingWakeUpStartedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingWakeUpStartedRequest.ProtoReflect.Descriptor instead.
func (*OnboardingWakeUpStartedRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{173}
}

type OnboardingWakeUpStartedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlreadyStarted bool `protobuf:"varint,1,opt,name=already_started,json=alreadyStarted,proto3" json:"already_started,omitempty"`
}

func (x *OnboardingWakeUpStartedResponse) Reset() {
	*x = OnboardingWakeUpStartedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingWakeUpStartedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingWakeUpStartedResponse) ProtoMessage() {}

func (x *OnboardingWakeUpStartedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingWakeUpStartedResponse.ProtoReflect.Descriptor instead.
func (*OnboardingWakeUpStartedResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{174}
}

func (x *OnboardingWakeUpStartedResponse) GetAlreadyStarted() bool {
	if x != nil {
		return x.AlreadyStarted
	}
	return false
}

type OnboardingWakeUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnboardingWakeUpRequest) Reset() {
	*x = OnboardingWakeUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingWakeUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingWakeUpRequest) ProtoMessage() {}

func (x *OnboardingWakeUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingWakeUpRequest.ProtoReflect.Descriptor instead.
func (*OnboardingWakeUpRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{175}
}

type OnboardingWakeUpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WakingUp     bool                       `protobuf:"varint,1,opt,name=waking_up,json=wakingUp,proto3" json:"waking_up,omitempty"`
	ChargingInfo *Onboarding1P0ChargingInfo `protobuf:"bytes,2,opt,name=charging_info,json=chargingInfo,proto3" json:"charging_info,omitempty"`
}

func (x *OnboardingWakeUpResponse) Reset() {
	*x = OnboardingWakeUpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingWakeUpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingWakeUpResponse) ProtoMessage() {}

func (x *OnboardingWakeUpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingWakeUpResponse.ProtoReflect.Descriptor instead.
func (*OnboardingWakeUpResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{176}
}

func (x *OnboardingWakeUpResponse) GetWakingUp() bool {
	if x != nil {
		return x.WakingUp
	}
	return false
}

func (x *OnboardingWakeUpResponse) GetChargingInfo() *Onboarding1P0ChargingInfo {
	if x != nil {
		return x.ChargingInfo
	}
	return nil
}

type Onboarding1P0ChargingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnCharger            bool    `protobuf:"varint,1,opt,name=on_charger,json=onCharger,proto3" json:"on_charger,omitempty"`
	NeedsToCharge        bool    `protobuf:"varint,2,opt,name=needs_to_charge,json=needsToCharge,proto3" json:"needs_to_charge,omitempty"`
	SuggestedChargerTime float32 `protobuf:"fixed32,3,opt,name=suggested_charger_time,json=suggestedChargerTime,proto3" json:"suggested_charger_time,omitempty"`
}

func (x *Onboarding1P0ChargingInfo) Reset() {
	*x = Onboarding1P0ChargingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Onboarding1P0ChargingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Onboarding1P0ChargingInfo) ProtoMessage() {}

func (x *Onboarding1P0ChargingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Onboarding1P0ChargingInfo.ProtoReflect.Descriptor instead.
func (*Onboarding1P0ChargingInfo) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{177}
}

func (x *Onboarding1P0ChargingInfo) GetOnCharger() bool {
	if x != nil {
		return x.OnCharger
	}
	return false
}

func (x *Onboarding1P0ChargingInfo) GetNeedsToCharge() bool {
	if x != nil {
		return x.NeedsToCharge
	}
	return false
}

func (x *Onboarding1P0ChargingInfo) GetSuggestedChargerTime() float32 {
	if x != nil {
		return x.SuggestedChargerTime
	}
	return 0
}

type OnboardingWakeUpFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnboardingWakeUpFinished) Reset() {
	*x = OnboardingWakeUpFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingWakeUpFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingWakeUpFinished) ProtoMessage() {}

func (x *OnboardingWakeUpFinished) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingWakeUpFinished.ProtoReflect.Descriptor instead.
func (*OnboardingWakeUpFinished) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{178}
}

type FeatureFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureName string `protobuf:"bytes,1,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
}

func (x *FeatureFlagRequest) Reset() {
	*x = FeatureFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureFlagRequest) ProtoMessage() {}

func (x *FeatureFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureFlagRequest.ProtoReflect.Descriptor instead.
func (*FeatureFlagRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{179}
}

func (x *FeatureFlagRequest) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

type FeatureFlagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ValidFeature   bool            `protobuf:"varint,2,opt,name=valid_feature,json=validFeature,proto3" json:"valid_feature,omitempty"`
	FeatureEnabled bool            `protobuf:"varint,3,opt,name=feature_enabled,json=featureEnabled,proto3" json:"feature_enabled,omitempty"`
}

func (x *FeatureFlagResponse) Reset() {
	*x = FeatureFlagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureFlagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureFlagResponse) ProtoMessage() {}

func (x *FeatureFlagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureFlagResponse.ProtoReflect.Descriptor instead.
func (*FeatureFlagResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{180}
}

func (x *FeatureFlagResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FeatureFlagResponse) GetValidFeature() bool {
	if x != nil {
		return x.ValidFeature
	}
	return false
}

func (x *FeatureFlagResponse) GetFeatureEnabled() bool {
	if x != nil {
		return x.FeatureEnabled
	}
	return false
}

type FeatureFlagListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestList []string `protobuf:"bytes,1,rep,name=request_list,json=requestList,proto3" json:"request_list,omitempty"`
}

func (x *FeatureFlagListRequest) Reset() {
	*x = FeatureFlagListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureFlagListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureFlagListRequest) ProtoMessage() {}

func (x *FeatureFlagListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureFlagListRequest.ProtoReflect.Descriptor instead.
func (*FeatureFlagListRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{181}
}

func (x *FeatureFlagListRequest) GetRequestList() []string {
	if x != nil {
		return x.RequestList
	}
	return nil
}

type FeatureFlagListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	List   []string        `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FeatureFlagListResponse) Reset() {
	*x = FeatureFlagListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureFlagListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureFlagListResponse) ProtoMessage() {}

func (x *FeatureFlagListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureFlagListResponse.ProtoReflect.Descriptor instead.
func (*FeatureFlagListResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{182}
}

func (x *FeatureFlagListResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FeatureFlagListResponse) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type AttentionTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason     AttentionTransferReason `protobuf:"varint,1,opt,name=reason,proto3,enum=Anki.Vector.external_interface.AttentionTransferReason" json:"reason,omitempty"`
	SecondsAgo float32                 `protobuf:"fixed32,2,opt,name=seconds_ago,json=secondsAgo,proto3" json:"seconds_ago,omitempty"`
}

func (x *AttentionTransfer) Reset() {
	*x = AttentionTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttentionTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttentionTransfer) ProtoMessage() {}

func (x *AttentionTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttentionTransfer.ProtoReflect.Descriptor instead.
func (*AttentionTransfer) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{183}
}

func (x *AttentionTransfer) GetReason() AttentionTransferReason {
	if x != nil {
		return x.Reason
	}
	return AttentionTransferReason_Invalid
}

func (x *AttentionTransfer) GetSecondsAgo() float32 {
	if x != nil {
		return x.SecondsAgo
	}
	return 0
}

type LatestAttentionTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LatestAttentionTransferRequest) Reset() {
	*x = LatestAttentionTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestAttentionTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestAttentionTransferRequest) ProtoMessage() {}

func (x *LatestAttentionTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestAttentionTransferRequest.ProtoReflect.Descriptor instead.
func (*LatestAttentionTransferRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{184}
}

type LatestAttentionTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofMessageType:
	//	*LatestAttentionTransfer_AttentionTransfer
	OneofMessageType isLatestAttentionTransfer_OneofMessageType `protobuf_oneof:"oneof_message_type"`
}

func (x *LatestAttentionTransfer) Reset() {
	*x = LatestAttentionTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestAttentionTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestAttentionTransfer) ProtoMessage() {}

func (x *LatestAttentionTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestAttentionTransfer.ProtoReflect.Descriptor instead.
func (*LatestAttentionTransfer) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{185}
}

func (m *LatestAttentionTransfer) GetOneofMessageType() isLatestAttentionTransfer_OneofMessageType {
	if m != nil {
		return m.OneofMessageType
	}
	return nil
}

func (x *LatestAttentionTransfer) GetAttentionTransfer() *AttentionTransfer {
	if x, ok := x.GetOneofMessageType().(*LatestAttentionTransfer_AttentionTransfer); ok {
		return x.AttentionTransfer
	}
	return nil
}

type isLatestAttentionTransfer_OneofMessageType interface {
	isLatestAttentionTransfer_OneofMessageType()
}

type LatestAttentionTransfer_AttentionTransfer struct {
	AttentionTransfer *AttentionTransfer `protobuf:"bytes,1,opt,name=attention_transfer,json=attentionTransfer,proto3,oneof"`
}

func (*LatestAttentionTransfer_AttentionTransfer) isLatestAttentionTransfer_OneofMessageType() {}

type LatestAttentionTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                  *ResponseStatus          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LatestAttentionTransfer *LatestAttentionTransfer `protobuf:"bytes,2,opt,name=latest_attention_transfer,json=latestAttentionTransfer,proto3" json:"latest_attention_transfer,omitempty"`
}

func (x *LatestAttentionTransferResponse) Reset() {
	*x = LatestAttentionTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestAttentionTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestAttentionTransferResponse) ProtoMessage() {}

func (x *LatestAttentionTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestAttentionTransferResponse.ProtoReflect.Descriptor instead.
func (*LatestAttentionTransferResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{186}
}

func (x *LatestAttentionTransferResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *LatestAttentionTransferResponse) GetLatestAttentionTransfer() *LatestAttentionTransfer {
	if x != nil {
		return x.LatestAttentionTransfer
	}
	return nil
}

type UpdateAndRestartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAndRestartRequest) Reset() {
	*x = UpdateAndRestartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAndRestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAndRestartRequest) ProtoMessage() {}

func (x *UpdateAndRestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAndRestartRequest.ProtoReflect.Descriptor instead.
func (*UpdateAndRestartRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{187}
}

type UpdateAndRestartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateAndRestartResponse) Reset() {
	*x = UpdateAndRestartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAndRestartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAndRestartResponse) ProtoMessage() {}

func (x *UpdateAndRestartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAndRestartResponse.ProtoReflect.Descriptor instead.
func (*UpdateAndRestartResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{188}
}

func (x *UpdateAndRestartResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type CheckUpdateStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckUpdateStatusRequest) Reset() {
	*x = CheckUpdateStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUpdateStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUpdateStatusRequest) ProtoMessage() {}

func (x *CheckUpdateStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUpdateStatusRequest.ProtoReflect.Descriptor instead.
func (*CheckUpdateStatusRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{189}
}

type CheckUpdateStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *ResponseStatus                        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UpdateStatus  CheckUpdateStatusResponse_UpdateStatus `protobuf:"varint,2,opt,name=update_status,json=updateStatus,proto3,enum=Anki.Vector.external_interface.CheckUpdateStatusResponse_UpdateStatus" json:"update_status,omitempty"`
	Expected      int64                                  `protobuf:"varint,3,opt,name=expected,proto3" json:"expected,omitempty"`
	Progress      int64                                  `protobuf:"varint,4,opt,name=progress,proto3" json:"progress,omitempty"`
	UpdateVersion string                                 `protobuf:"bytes,5,opt,name=update_version,json=updateVersion,proto3" json:"update_version,omitempty"`
}

func (x *CheckUpdateStatusResponse) Reset() {
	*x = CheckUpdateStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUpdateStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUpdateStatusResponse) ProtoMessage() {}

func (x *CheckUpdateStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUpdateStatusResponse.ProtoReflect.Descriptor instead.
func (*CheckUpdateStatusResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{190}
}

func (x *CheckUpdateStatusResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CheckUpdateStatusResponse) GetUpdateStatus() CheckUpdateStatusResponse_UpdateStatus {
	if x != nil {
		return x.UpdateStatus
	}
	return CheckUpdateStatusResponse_NO_UPDATE
}

func (x *CheckUpdateStatusResponse) GetExpected() int64 {
	if x != nil {
		return x.Expected
	}
	return 0
}

func (x *CheckUpdateStatusResponse) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *CheckUpdateStatusResponse) GetUpdateVersion() string {
	if x != nil {
		return x.UpdateVersion
	}
	return ""
}

type CheckCloudRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckCloudRequest) Reset() {
	*x = CheckCloudRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCloudRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCloudRequest) ProtoMessage() {}

func (x *CheckCloudRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCloudRequest.ProtoReflect.Descriptor instead.
func (*CheckCloudRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{191}
}

type CheckCloudResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *ResponseStatus                   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Code            CheckCloudResponse_ConnectionCode `protobuf:"varint,2,opt,name=code,proto3,enum=Anki.Vector.external_interface.CheckCloudResponse_ConnectionCode" json:"code,omitempty"`
	StatusMessage   string                            `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	NumPackets      int32                             `protobuf:"varint,4,opt,name=num_packets,json=numPackets,proto3" json:"num_packets,omitempty"`
	ExpectedPackets int32                             `protobuf:"varint,5,opt,name=expected_packets,json=expectedPackets,proto3" json:"expected_packets,omitempty"`
}

func (x *CheckCloudResponse) Reset() {
	*x = CheckCloudResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCloudResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCloudResponse) ProtoMessage() {}

func (x *CheckCloudResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCloudResponse.ProtoReflect.Descriptor instead.
func (*CheckCloudResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{192}
}

func (x *CheckCloudResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CheckCloudResponse) GetCode() CheckCloudResponse_ConnectionCode {
	if x != nil {
		return x.Code
	}
	return CheckCloudResponse_UNKNOWN
}

func (x *CheckCloudResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *CheckCloudResponse) GetNumPackets() int32 {
	if x != nil {
		return x.NumPackets
	}
	return 0
}

func (x *CheckCloudResponse) GetExpectedPackets() int32 {
	if x != nil {
		return x.ExpectedPackets
	}
	return 0
}

var File_messages_proto protoreflect.FileDescriptor

var file_messages_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x1a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x61, 0x6c, 0x65, 0x78, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x26, 0x0a, 0x10, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x1f, 0x0a, 0x09, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xbc, 0x01, 0x0a, 0x12, 0x44, 0x72, 0x69, 0x76, 0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6d, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x6d, 0x70, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6d,
	0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x6d, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6d, 0x6d, 0x70, 0x73, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x6d,
	0x70, 0x73, 0x32, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x77, 0x68, 0x65,
	0x65, 0x6c, 0x5f, 0x6d, 0x6d, 0x70, 0x73, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x6d, 0x70, 0x73, 0x32, 0x22,
	0x5d, 0x0a, 0x13, 0x44, 0x72, 0x69, 0x76, 0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c,
	0x0a, 0x0f, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x52, 0x61, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x22, 0x5a, 0x0a, 0x10,
	0x4d, 0x6f, 0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x0f, 0x4d, 0x6f, 0x76, 0x65,
	0x4c, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x64,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x22, 0x5a, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x69,
	0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x15, 0x53, 0x74,
	0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x1b,
	0x50, 0x6c, 0x61, 0x79, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x11, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x10, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f,
	0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x6f, 0x6f, 0x70, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x61, 0x66,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x66, 0x74,
	0x53, 0x61, 0x66, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x48, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c,
	0x69, 0x66, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x22, 0xf9, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61,
	0x79, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f,
	0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x6f, 0x6f, 0x70, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x66, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x47, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xb4, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x68, 0x0a, 0x17, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x15, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a,
	0x1a, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x47, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x66, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x65, 0x0a, 0x1b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x46, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x47, 0x42, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1b, 0x0a,
	0x19, 0x4d, 0x65, 0x65, 0x74, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x63, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x4d, 0x65,
	0x65, 0x74, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xe8, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7d, 0x0a, 0x1d, 0x6d,
	0x65, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x61,
	0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x19, 0x6d, 0x65, 0x65, 0x74, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x63, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x1e, 0x6d,
	0x65, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x46,
	0x61, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x1a, 0x6d, 0x65, 0x65, 0x74, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x63,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x75, 0x0a,
	0x19, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x17, 0x66, 0x61, 0x63,
	0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x08, 0x57, 0x61, 0x6b, 0x65, 0x57, 0x6f, 0x72, 0x64,
	0x12, 0x57, 0x0a, 0x0f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x57, 0x61, 0x6b, 0x65, 0x57,
	0x6f, 0x72, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x61, 0x6b, 0x65,
	0x57, 0x6f, 0x72, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x0d, 0x77, 0x61, 0x6b,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x57, 0x61, 0x6b, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x77, 0x61, 0x6b, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x77, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x78,
	0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x75, 0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x74, 0x63, 0x22, 0x93, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x71,
	0x30, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x71,
	0x31, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x71,
	0x32, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x71,
	0x33, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x35,
	0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x34, 0x0a, 0x08, 0x47, 0x79, 0x72, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a,
	0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0xbe, 0x01, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x6f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x6e, 0x6f, 0x62, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6c, 0x69,
	0x66, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x4c, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x46, 0x6f, 0x76, 0x22, 0x5d, 0x0a, 0x09,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x77,
	0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x42,
	0x65, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x22, 0xfb, 0x06, 0x0a, 0x0a,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x70, 0x6f,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f,
	0x73, 0x65, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x61, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x77,
	0x68, 0x65, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x6d, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6c, 0x65, 0x66, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6d, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d,
	0x6d, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x57, 0x68, 0x65, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6d, 0x70, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6c, 0x69,
	0x66, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6d, 0x12, 0x3f, 0x0a, 0x05, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x04, 0x67,
	0x79, 0x72, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x79, 0x72, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x67, 0x79, 0x72, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x72,
	0x72, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x61, 0x72, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x19, 0x63, 0x61, 0x72, 0x72, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x61, 0x72, 0x72,
	0x79, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x54, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x68, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x48, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x74, 0x6f, 0x75, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x09, 0x43, 0x6c, 0x61,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x79, 0x22, 0x74, 0x0a, 0x08, 0x43, 0x6c, 0x61, 0x64, 0x52, 0x65, 0x63, 0x74, 0x12, 0x1c,
	0x0a, 0x0a, 0x78, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x78, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1c, 0x0a, 0x0a,
	0x79, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x79, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xf0, 0x04, 0x0a, 0x11, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x5f, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x64, 0x52, 0x65, 0x63,
	0x74, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x52, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x43, 0x6c, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x6c, 0x65, 0x66, 0x74,
	0x45, 0x79, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x79, 0x65,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x08, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x79, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6e,
	0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x6e, 0x6f, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x6d, 0x6f,
	0x75, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x22, 0x4a, 0x0a, 0x1a, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6e, 0x65, 0x77, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x46, 0x61, 0x63, 0x65,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1d,
	0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a,
	0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x40, 0x0a,
	0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x18,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45,
	0x0a, 0x05, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x52, 0x05,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x37, 0x0a, 0x1c, 0x45, 0x72, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
	0x46, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1d, 0x45, 0x72, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x45, 0x72, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x67, 0x0a, 0x1d, 0x45, 0x72, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x16, 0x53,
	0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x61,
	0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x61, 0x76,
	0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65,
	0x54, 0x6f, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x22,
	0x61, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xaa, 0x01, 0x0a,
	0x17, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x12,
	0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x6f, 0x6f,
	0x6b, 0x41, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x19, 0x4c, 0x6f, 0x6f, 0x6b, 0x41, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x6f, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x52, 0x6f, 0x6c,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x0f, 0x0a, 0x0d, 0x57, 0x61, 0x6b, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x22, 0x51, 0x0a, 0x0b, 0x57, 0x61, 0x6b, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61,
	0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4a,
	0x73, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x01, 0x0a, 0x09,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x74, 0x63, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x70,
	0x69, 0x65, 0x64, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x43, 0x6f, 0x70, 0x69,
	0x65, 0x64, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa8, 0x01, 0x0a,
	0x12, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x29, 0x0a, 0x0c, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x49, 0x64, 0x22, 0x49, 0x0a, 0x10, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0x87, 0x01,
	0x0a, 0x0d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x10, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x14, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x27, 0x0a,
	0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x22, 0xfc, 0x03, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x68, 0x4d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6d, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x5f, 0x6d, 0x6d, 0x70, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x4d, 0x6d, 0x70, 0x73, 0x32, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x63, 0x65, 0x6c, 0x5f, 0x6d, 0x6d, 0x70, 0x73, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x65, 0x6c, 0x4d, 0x6d, 0x70, 0x73, 0x32, 0x12, 0x3d, 0x0a,
	0x1c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x17, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x52, 0x61, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x1d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x5f, 0x72, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x18, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x41, 0x63,
	0x63, 0x65, 0x6c, 0x52, 0x61, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x32, 0x12, 0x3f, 0x0a,
	0x1d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x65,
	0x6c, 0x5f, 0x72, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x32, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x44,
	0x65, 0x63, 0x65, 0x6c, 0x52, 0x61, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x32, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x6d, 0x70,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x4d, 0x6d, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x5f, 0x6d, 0x6d, 0x70, 0x73, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x4d, 0x6d, 0x70, 0x73, 0x32,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x63, 0x65, 0x6c, 0x5f, 0x6d,
	0x6d, 0x70, 0x73, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b,
	0x44, 0x65, 0x63, 0x65, 0x6c, 0x4d, 0x6d, 0x70, 0x73, 0x32, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x6d, 0x70, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x4d, 0x6d, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0xfe, 0x0c, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x9a, 0x0c, 0x0a, 0x10, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x15, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x80, 0x80, 0x80, 0x08, 0x12, 0x2c, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x5f, 0x57, 0x48, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x80, 0x80, 0x80, 0x10, 0x12, 0x12, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x81, 0x80, 0x80, 0x10, 0x12, 0x0c, 0x0a, 0x05, 0x41, 0x42, 0x4f,
	0x52, 0x54, 0x10, 0x80, 0x80, 0x80, 0x18, 0x12, 0x13, 0x0a, 0x0c, 0x41, 0x4e, 0x49, 0x4d, 0x5f,
	0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x81, 0x80, 0x80, 0x18, 0x12, 0x11, 0x0a, 0x0a,
	0x42, 0x41, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x82, 0x80, 0x80, 0x18, 0x12,
	0x16, 0x0a, 0x0f, 0x42, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x41, 0x47, 0x10, 0x83, 0x80, 0x80, 0x18, 0x12, 0x11, 0x0a, 0x0a, 0x42, 0x41, 0x44, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x84, 0x80, 0x80, 0x18, 0x12, 0x0f, 0x0a, 0x08, 0x42, 0x41,
	0x44, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x85, 0x80, 0x80, 0x18, 0x12, 0x0e, 0x0a, 0x07, 0x42,
	0x41, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x86, 0x80, 0x80, 0x18, 0x12, 0x1e, 0x0a, 0x17, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x50, 0x4c, 0x55, 0x47, 0x47, 0x45, 0x44,
	0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0x87, 0x80, 0x80, 0x18, 0x12, 0x21, 0x0a, 0x1a, 0x43,
	0x4c, 0x49, 0x46, 0x46, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x88, 0x80, 0x80, 0x18, 0x12, 0x24,
	0x0a, 0x1d, 0x43, 0x4c, 0x49, 0x46, 0x46, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x89, 0x80, 0x80, 0x18, 0x12, 0x26, 0x0a, 0x1f, 0x43, 0x4c, 0x49, 0x46, 0x46, 0x5f, 0x41, 0x4c,
	0x49, 0x47, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x54, 0x55, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x8a, 0x80, 0x80, 0x18, 0x12, 0x22, 0x0a, 0x1b,
	0x43, 0x4c, 0x49, 0x46, 0x46, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x8b, 0x80, 0x80, 0x18,
	0x12, 0x21, 0x0a, 0x1a, 0x43, 0x4c, 0x49, 0x46, 0x46, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x8c,
	0x80, 0x80, 0x18, 0x12, 0x21, 0x0a, 0x1a, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x8d, 0x80, 0x80, 0x18, 0x12, 0x28, 0x0a, 0x21, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x8e, 0x80, 0x80, 0x18,
	0x12, 0x12, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x10,
	0x8f, 0x80, 0x80, 0x18, 0x12, 0x1f, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x4f, 0x46, 0x46, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x90, 0x80, 0x80, 0x18, 0x12, 0x19, 0x0a, 0x12, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x45, 0x44, 0x5f, 0x55, 0x50, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x10, 0x91, 0x80, 0x80, 0x18,
	0x12, 0x13, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x92, 0x80, 0x80, 0x18, 0x12, 0x16, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x93, 0x80, 0x80, 0x18, 0x12, 0x0e, 0x0a,
	0x07, 0x4e, 0x4f, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x94, 0x80, 0x80, 0x18, 0x12, 0x12, 0x0a,
	0x0b, 0x4e, 0x4f, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x95, 0x80, 0x80,
	0x18, 0x12, 0x19, 0x0a, 0x12, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x53, 0x10, 0x96, 0x80, 0x80, 0x18, 0x12, 0x20, 0x0a, 0x19,
	0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0x97, 0x80, 0x80, 0x18, 0x12, 0x1b,
	0x0a, 0x14, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x52,
	0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0x98, 0x80, 0x80, 0x18, 0x12, 0x15, 0x0a, 0x0e, 0x4e,
	0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x99, 0x80,
	0x80, 0x18, 0x12, 0x21, 0x0a, 0x1a, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54,
	0x10, 0x9a, 0x80, 0x80, 0x18, 0x12, 0x28, 0x0a, 0x21, 0x50, 0x49, 0x43, 0x4b, 0x55, 0x50, 0x5f,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x9b, 0x80, 0x80, 0x18, 0x12,
	0x23, 0x0a, 0x1c, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x4f, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x9c, 0x80, 0x80, 0x18, 0x12, 0x1c, 0x0a, 0x15, 0x53, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x41,
	0x52, 0x52, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x9d, 0x80,
	0x80, 0x18, 0x12, 0x0e, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x9e, 0x80,
	0x80, 0x18, 0x12, 0x14, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x53, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x9f, 0x80, 0x80, 0x18, 0x12, 0x1d, 0x0a, 0x16, 0x55, 0x4e, 0x45, 0x58,
	0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xa0, 0x80, 0x80, 0x18, 0x12, 0x18, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa1, 0x80, 0x80,
	0x18, 0x12, 0x1c, 0x0a, 0x15, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x52, 0x49,
	0x56, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xa2, 0x80, 0x80, 0x18, 0x12,
	0x20, 0x0a, 0x19, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xa3, 0x80, 0x80,
	0x18, 0x12, 0x20, 0x0a, 0x19, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x4e, 0x54, 0x5f, 0x44, 0x52,
	0x49, 0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x52, 0x10, 0xa4,
	0x80, 0x80, 0x18, 0x12, 0x0c, 0x0a, 0x05, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x80, 0x80, 0x80,
	0x20, 0x12, 0x23, 0x0a, 0x1c, 0x44, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x53,
	0x45, 0x10, 0x81, 0x80, 0x80, 0x20, 0x12, 0x1d, 0x0a, 0x16, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x54, 0x48,
	0x10, 0x82, 0x80, 0x80, 0x20, 0x12, 0x21, 0x0a, 0x1a, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x49,
	0x43, 0x4b, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x83, 0x80, 0x80, 0x20, 0x12, 0x24, 0x0a, 0x1d, 0x4d, 0x4f, 0x54, 0x4f,
	0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x84, 0x80, 0x80, 0x20, 0x12, 0x20,
	0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x85, 0x80, 0x80, 0x20,
	0x12, 0x1b, 0x0a, 0x14, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x86, 0x80, 0x80, 0x20, 0x12, 0x21, 0x0a,
	0x1a, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x87, 0x80, 0x80, 0x20,
	0x12, 0x1e, 0x0a, 0x17, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x4f,
	0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x88, 0x80, 0x80, 0x20,
	0x12, 0x2c, 0x0a, 0x25, 0x50, 0x49, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x4c, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x89, 0x80, 0x80, 0x20, 0x12, 0x17,
	0x0a, 0x10, 0x53, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x52, 0x10, 0x8a, 0x80, 0x80, 0x20, 0x12, 0x1d, 0x0a, 0x16, 0x55, 0x4e, 0x45, 0x58, 0x50,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x4e, 0x47, 0x4c,
	0x45, 0x10, 0x8b, 0x80, 0x80, 0x20, 0x22, 0x33, 0x0a, 0x1a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x64, 0x54, 0x61, 0x67, 0x22, 0x65, 0x0a, 0x1b, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x47, 0x6f, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x11, 0x0a, 0x04, 0x78, 0x5f, 0x6d, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x78, 0x4d, 0x6d, 0x12, 0x11, 0x0a, 0x04, 0x79, 0x5f, 0x6d,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x79, 0x4d, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x72, 0x61, 0x64, 0x12, 0x52,
	0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x47,
	0x6f, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd2, 0x03,
	0x0a, 0x13, 0x44, 0x6f, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x41,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x50, 0x72, 0x65, 0x44, 0x6f,
	0x63, 0x6b, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0a,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x64, 0x54, 0x61,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x44, 0x6f, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x75, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x6d, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6d, 0x70,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x64, 0x69, 0x73, 0x74, 0x4d, 0x6d, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xfb,
	0x01, 0x0a, 0x12, 0x54, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x61, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x64, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x2b, 0x0a,
	0x12, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x52, 0x61, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f,
	0x6c, 0x5f, 0x72, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x74, 0x6f, 0x6c,
	0x52, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x62, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a,
	0x13, 0x54, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x52, 0x61, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x52, 0x61, 0x64, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x64, 0x54, 0x61, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x67,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x66, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6d, 0x12, 0x30,
	0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x64, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d,
	0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x12, 0x2b, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x52, 0x61, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x32, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x66, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x96, 0x01, 0x0a, 0x16, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x46, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x54, 0x75, 0x72, 0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e,
	0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x54, 0x75,
	0x72, 0x6e, 0x54, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x11, 0x47, 0x6f, 0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0a,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x12, 0x42, 0x0a, 0x1e, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4d, 0x6d, 0x12, 0x29,
	0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x70,
	0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x50, 0x72,
	0x65, 0x44, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x64, 0x54, 0x61, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x47, 0x6f, 0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc3, 0x02, 0x0a, 0x11, 0x52, 0x6f, 0x6c, 0x6c, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x72, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x61, 0x63, 0x68, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75,
	0x73, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x61, 0x63, 0x68, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x6b,
	0x50, 0x6f, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a,
	0x12, 0x52, 0x6f, 0x6c, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xc4, 0x02, 0x0a, 0x12, 0x50, 0x6f, 0x70, 0x41, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x69,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x41,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x70,
	0x41, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc5,
	0x02, 0x0a, 0x13, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x61, 0x63, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x41, 0x6e, 0x67,
	0x6c, 0x65, 0x52, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x41, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x64,
	0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x75, 0x73, 0x65, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x58, 0x0a,
	0x1e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x48, 0x65, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x48,
	0x65, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xb0, 0x03, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x51, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f,
	0x76, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73,
	0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4f, 0x6e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x12, 0x4e, 0x0a, 0x0c, 0x63, 0x75, 0x62, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x62, 0x65, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x75, 0x62, 0x65, 0x42, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x22, 0x8c, 0x02, 0x0a, 0x0b, 0x43, 0x75, 0x62, 0x65, 0x42, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x62, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x75, 0x62, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x22, 0x27, 0x0a, 0x10, 0x43, 0x75, 0x62,
	0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x10, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x14, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x22, 0x77, 0x0a, 0x0e, 0x53, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x22, 0x84, 0x02, 0x0a, 0x0f, 0x53,
	0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x0e,
	0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x59, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x04, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a, 0x14,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x5f, 0x0a,
	0x14, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xf0,
	0x02, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x22, 0x69,
	0x0a, 0x1a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x18, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x22, 0xec, 0x03, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x14, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x68, 0x0a, 0x12, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x10, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x71, 0x0a, 0x15, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x6b, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x14, 0x0a, 0x12, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x24, 0x0a, 0x22,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22, 0xcf, 0x03, 0x0a, 0x1b, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1e, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x18,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x1d, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x79,
	0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x13, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x5e, 0x0a, 0x14, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x1c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x67,
	0x0a, 0x1d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x1a, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6d, 0x69, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6d, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c,
	0x69, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x61, 0x7a, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x65, 0x0a, 0x1b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x1c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x67, 0x0a, 0x1d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x31, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x62, 0x0a, 0x18, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x14, 0x0a, 0x12, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x35, 0x0a, 0x1b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x66, 0x0a, 0x1c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x49, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x1f, 0x49, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69,
	0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0xb6, 0x04, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x5f, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xd3, 0x01, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x41, 0x57, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x41, 0x57, 0x5f, 0x52, 0x47, 0x42, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x59, 0x55,
	0x59, 0x56, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x55, 0x56, 0x34, 0x32, 0x30, 0x53, 0x50,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x59, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0d, 0x0a,
	0x09, 0x4a, 0x50, 0x45, 0x47, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a,
	0x4a, 0x50, 0x45, 0x47, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15,
	0x4a, 0x50, 0x45, 0x47, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f,
	0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x50, 0x45, 0x47, 0x5f,
	0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x10, 0x09,
	0x12, 0x18, 0x0a, 0x14, 0x4a, 0x50, 0x45, 0x47, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49, 0x5a,
	0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x0a, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xd4, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x1a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x5f, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x45, 0x79, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x68, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x18,
	0x53, 0x44, 0x4b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x64, 0x6b, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x64, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x15, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x19, 0x53, 0x44, 0x4b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x40, 0x0a, 0x10, 0x41, 0x70,
	0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x5b, 0x0a, 0x11,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4a, 0x0a, 0x0d, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x0a, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x10, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x79, 0x0a, 0x1b, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x18, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x57,
	0x61, 0x6b, 0x65, 0x55, 0x70, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x7c, 0x0a,
	0x1c, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x70, 0x30, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x31,
	0x70, 0x30, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x19, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x31, 0x70, 0x30, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x15,
	0x0a, 0x13, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x14, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x0f,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x46, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x62, 0x0a, 0x19, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x1a, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd4, 0x02, 0x0a,
	0x1f, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x1c, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x65, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x6b, 0x69, 0x70, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x22, 0x13, 0x0a, 0x11, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x45, 0x78, 0x69, 0x74, 0x22, 0xad, 0x09, 0x0a, 0x16, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x7b, 0x0a, 0x1b, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x19, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76,
	0x0a, 0x1a, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x6b,
	0x65, 0x5f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61,
	0x6b, 0x65, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x1a, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6b, 0x69, 0x70, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x18, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x6b, 0x69, 0x70, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x62, 0x0a, 0x12, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41,
	0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x11, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x22, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6b,
	0x65, 0x55, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x1e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x57,
	0x61, 0x6b, 0x65, 0x55, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x1c, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x8b, 0x01, 0x0a, 0x21, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x1e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x82, 0x01, 0x0a, 0x1e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x21, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x1d, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x69, 0x74,
	0x42, 0x14, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9e, 0x07, 0x0a, 0x17, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7e, 0x0a, 0x1c, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1a,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x1b, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6b, 0x65, 0x55,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x23, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x57,
	0x61, 0x6b, 0x65, 0x55, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x1d, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x22, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x1f, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x1c, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x1a, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x22, 0x20, 0x0a, 0x1e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61,
	0x6b, 0x65, 0x55, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x4a, 0x0a, 0x1f, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x22, 0x19,
	0x0a, 0x17, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6b, 0x65,
	0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x55, 0x70, 0x12, 0x5e, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x31, 0x70, 0x30, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x31, 0x70, 0x30, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x54, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x1a,
	0x0a, 0x18, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6b, 0x65,
	0x55, 0x70, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x37, 0x0a, 0x12, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x3b, 0x0a, 0x16, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x75,
	0x0a, 0x17, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x41, 0x6e,
	0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x67, 0x6f, 0x22, 0x20, 0x0a,
	0x1e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x93, 0x01, 0x0a, 0x17, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x12, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42,
	0x14, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x1f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x73, 0x0a, 0x19, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x17, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x62, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x84, 0x03, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6b, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46,
	0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44,
	0x10, 0x02, 0x3a, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa7, 0x03,
	0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x6e, 0x6b, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x41, 0x6e, 0x6b,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x7f, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x49,
	0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x44,
	0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0x05, 0x2a, 0xdc, 0x04, 0x0a, 0x0b, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x42, 0x4f, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x53, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x4f,
	0x42, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x41,
	0x52, 0x52, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x26,
	0x0a, 0x22, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x53, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41,
	0x43, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x45, 0x44,
	0x5f, 0x55, 0x50, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4f, 0x42,
	0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x46, 0x41, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x20, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x40, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x49, 0x4e, 0x47,
	0x10, 0x80, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x46, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x10,
	0x80, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x80,
	0x04, 0x12, 0x21, 0x0a, 0x1c, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4d, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x10, 0x80, 0x08, 0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x52, 0x10, 0x80, 0x20, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e,
	0x47, 0x10, 0x80, 0x40, 0x12, 0x21, 0x0a, 0x1b, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x49, 0x46, 0x46, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x80, 0x80, 0x01, 0x12, 0x24, 0x0a, 0x1e, 0x52, 0x4f, 0x42, 0x4f, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x52, 0x45, 0x5f, 0x57, 0x48, 0x45, 0x45,
	0x4c, 0x53, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x80, 0x80, 0x02, 0x12, 0x20, 0x0a,
	0x1a, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53,
	0x5f, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x45, 0x4c, 0x44, 0x10, 0x80, 0x80, 0x04, 0x12,
	0x25, 0x0a, 0x1f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x53, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x80, 0x80, 0x08, 0x2a, 0xbd, 0x01, 0x0a, 0x10, 0x46, 0x61, 0x63, 0x69, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x50, 0x50, 0x49, 0x4e,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x47,
	0x45, 0x52, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x44, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x05, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0xcc, 0x01, 0x0a, 0x14, 0x46, 0x61, 0x63, 0x65, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x41, 0x57, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x41, 0x57, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45,
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45,
	0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x41, 0x56, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x4d, 0x45,
	0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x08,
	0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x09, 0x2a, 0x6c, 0x0a, 0x0f, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x45, 0x48, 0x41,
	0x56, 0x49, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x57, 0x4f,
	0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x2a, 0x53, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x44, 0x4b, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0d, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x53, 0x44, 0x4b, 0x5f, 0x54, 0x41, 0x47, 0x10,
	0x81, 0x89, 0x7a, 0x12, 0x13, 0x0a, 0x0c, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x44, 0x4b, 0x5f,
	0x54, 0x41, 0x47, 0x10, 0xc0, 0x8d, 0xb7, 0x01, 0x2a, 0x9e, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x46, 0x54, 0x5f, 0x46, 0x49,
	0x4e, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x46, 0x54, 0x5f, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x2a, 0x73, 0x0a, 0x0c, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42,
	0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x4d,
	0x49, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0xcc,
	0x01, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x54, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d,
	0x49, 0x43, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x41, 0x4d,
	0x50, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x45,
	0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0xa0, 0x01,
	0x12, 0x22, 0x0a, 0x1d, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x44, 0x4b, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0xc0, 0x0c, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x89,
	0x7a, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x53,
	0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x80, 0x7d, 0x2a, 0x85, 0x01,
	0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x04, 0x2a, 0x76, 0x0a, 0x11, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x2a, 0x50, 0x0a,
	0x10, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x65, 0x76, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x2a,
	0x98, 0x01, 0x0a, 0x0f, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x6f, 0x6f, 0x6b, 0x41, 0x74, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x4c, 0x6f, 0x6f, 0x6b, 0x41, 0x74, 0x55, 0x73, 0x65, 0x72, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x6b, 0x65, 0x57, 0x6f, 0x72, 0x64,
	0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x65, 0x61, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x65, 0x48,
	0x65, 0x72, 0x65, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x63, 0x68, 0x4d, 0x65,
	0x65, 0x74, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x07, 0x2a, 0x62, 0x0a, 0x14, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x03, 0x2a, 0x5e,
	0x0a, 0x17, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x6f, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x6f, 0x57, 0x69, 0x66, 0x69, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x42, 0x3a,
	0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x2d, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData = file_messages_proto_rawDesc
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_proto_rawDescData)
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 193)
var file_messages_proto_goTypes = []interface{}{
	(RobotStatus)(0),                            // 0: Anki.Vector.external_interface.RobotStatus
	(FacialExpression)(0),                       // 1: Anki.Vector.external_interface.FacialExpression
	(FaceEnrollmentResult)(0),                   // 2: Anki.Vector.external_interface.FaceEnrollmentResult
	(BehaviorResults)(0),                        // 3: Anki.Vector.external_interface.BehaviorResults
	(ActionTagConstants)(0),                     // 4: Anki.Vector.external_interface.ActionTagConstants
	(AlignmentType)(0),                          // 5: Anki.Vector.external_interface.AlignmentType
	(BatteryLevel)(0),                           // 6: Anki.Vector.external_interface.BatteryLevel
	(AudioConstants)(0),                         // 7: Anki.Vector.external_interface.AudioConstants
	(AudioProcessingMode)(0),                    // 8: Anki.Vector.external_interface.AudioProcessingMode
	(MasterVolumeLevel)(0),                      // 9: Anki.Vector.external_interface.MasterVolumeLevel
	(OnboardingStages)(0),                       // 10: Anki.Vector.external_interface.OnboardingStages
	(OnboardingPhase)(0),                        // 11: Anki.Vector.external_interface.OnboardingPhase
	(OnboardingPhaseState)(0),                   // 12: Anki.Vector.external_interface.OnboardingPhaseState
	(AttentionTransferReason)(0),                // 13: Anki.Vector.external_interface.AttentionTransferReason
	(ActionResult_ActionResultCode)(0),          // 14: Anki.Vector.external_interface.ActionResult.ActionResultCode
	(CubeBattery_CubeBatteryLevel)(0),           // 15: Anki.Vector.external_interface.CubeBattery.CubeBatteryLevel
	(SayTextResponse_UtteranceState)(0),         // 16: Anki.Vector.external_interface.SayTextResponse.UtteranceState
	(ImageChunk_ImageEncoding)(0),               // 17: Anki.Vector.external_interface.ImageChunk.ImageEncoding
	(CheckUpdateStatusResponse_UpdateStatus)(0), // 18: Anki.Vector.external_interface.CheckUpdateStatusResponse.UpdateStatus
	(CheckCloudResponse_ConnectionCode)(0),      // 19: Anki.Vector.external_interface.CheckCloudResponse.ConnectionCode
	(*KeepAlivePing)(nil),                       // 20: Anki.Vector.external_interface.KeepAlivePing
	(*AnimationTrigger)(nil),                    // 21: Anki.Vector.external_interface.AnimationTrigger
	(*Animation)(nil),                           // 22: Anki.Vector.external_interface.Animation
	(*DriveWheelsRequest)(nil),                  // 23: Anki.Vector.external_interface.DriveWheelsRequest
	(*DriveWheelsResponse)(nil),                 // 24: Anki.Vector.external_interface.DriveWheelsResponse
	(*MoveHeadRequest)(nil),                     // 25: Anki.Vector.external_interface.MoveHeadRequest
	(*MoveHeadResponse)(nil),                    // 26: Anki.Vector.external_interface.MoveHeadResponse
	(*MoveLiftRequest)(nil),                     // 27: Anki.Vector.external_interface.MoveLiftRequest
	(*MoveLiftResponse)(nil),                    // 28: Anki.Vector.external_interface.MoveLiftResponse
	(*StopAllMotorsRequest)(nil),                // 29: Anki.Vector.external_interface.StopAllMotorsRequest
	(*StopAllMotorsResponse)(nil),               // 30: Anki.Vector.external_interface.StopAllMotorsResponse
	(*PlayAnimationTriggerRequest)(nil),         // 31: Anki.Vector.external_interface.PlayAnimationTriggerRequest
	(*PlayAnimationRequest)(nil),                // 32: Anki.Vector.external_interface.PlayAnimationRequest
	(*PlayAnimationResponse)(nil),               // 33: Anki.Vector.external_interface.PlayAnimationResponse
	(*ListAnimationsRequest)(nil),               // 34: Anki.Vector.external_interface.ListAnimationsRequest
	(*ListAnimationsResponse)(nil),              // 35: Anki.Vector.external_interface.ListAnimationsResponse
	(*ListAnimationTriggersRequest)(nil),        // 36: Anki.Vector.external_interface.ListAnimationTriggersRequest
	(*ListAnimationTriggersResponse)(nil),       // 37: Anki.Vector.external_interface.ListAnimationTriggersResponse
	(*DisplayFaceImageRGBRequest)(nil),          // 38: Anki.Vector.external_interface.DisplayFaceImageRGBRequest
	(*DisplayFaceImageRGBResponse)(nil),         // 39: Anki.Vector.external_interface.DisplayFaceImageRGBResponse
	(*MeetVictorFaceScanStarted)(nil),           // 40: Anki.Vector.external_interface.MeetVictorFaceScanStarted
	(*MeetVictorFaceScanComplete)(nil),          // 41: Anki.Vector.external_interface.MeetVictorFaceScanComplete
	(*Status)(nil),                              // 42: Anki.Vector.external_interface.Status
	(*WakeWord)(nil),                            // 43: Anki.Vector.external_interface.WakeWord
	(*TimeStampedStatus)(nil),                   // 44: Anki.Vector.external_interface.TimeStampedStatus
	(*PoseStruct)(nil),                          // 45: Anki.Vector.external_interface.PoseStruct
	(*AccelData)(nil),                           // 46: Anki.Vector.external_interface.AccelData
	(*GyroData)(nil),                            // 47: Anki.Vector.external_interface.GyroData
	(*ProxData)(nil),                            // 48: Anki.Vector.external_interface.ProxData
	(*TouchData)(nil),                           // 49: Anki.Vector.external_interface.TouchData
	(*RobotState)(nil),                          // 50: Anki.Vector.external_interface.RobotState
	(*CladPoint)(nil),                           // 51: Anki.Vector.external_interface.CladPoint
	(*CladRect)(nil),                            // 52: Anki.Vector.external_interface.CladRect
	(*RobotObservedFace)(nil),                   // 53: Anki.Vector.external_interface.RobotObservedFace
	(*RobotChangedObservedFaceID)(nil),          // 54: Anki.Vector.external_interface.RobotChangedObservedFaceID
	(*FaceEnrollmentCompleted)(nil),             // 55: Anki.Vector.external_interface.FaceEnrollmentCompleted
	(*CancelFaceEnrollmentRequest)(nil),         // 56: Anki.Vector.external_interface.CancelFaceEnrollmentRequest
	(*CancelFaceEnrollmentResponse)(nil),        // 57: Anki.Vector.external_interface.CancelFaceEnrollmentResponse
	(*RequestEnrolledNamesRequest)(nil),         // 58: Anki.Vector.external_interface.RequestEnrolledNamesRequest
	(*LoadedKnownFace)(nil),                     // 59: Anki.Vector.external_interface.LoadedKnownFace
	(*RobotRenamedEnrolledFace)(nil),            // 60: Anki.Vector.external_interface.RobotRenamedEnrolledFace
	(*RequestEnrolledNamesResponse)(nil),        // 61: Anki.Vector.external_interface.RequestEnrolledNamesResponse
	(*UpdateEnrolledFaceByIDRequest)(nil),       // 62: Anki.Vector.external_interface.UpdateEnrolledFaceByIDRequest
	(*UpdateEnrolledFaceByIDResponse)(nil),      // 63: Anki.Vector.external_interface.UpdateEnrolledFaceByIDResponse
	(*EraseEnrolledFaceByIDRequest)(nil),        // 64: Anki.Vector.external_interface.EraseEnrolledFaceByIDRequest
	(*EraseEnrolledFaceByIDResponse)(nil),       // 65: Anki.Vector.external_interface.EraseEnrolledFaceByIDResponse
	(*EraseAllEnrolledFacesRequest)(nil),        // 66: Anki.Vector.external_interface.EraseAllEnrolledFacesRequest
	(*EraseAllEnrolledFacesResponse)(nil),       // 67: Anki.Vector.external_interface.EraseAllEnrolledFacesResponse
	(*SetFaceToEnrollRequest)(nil),              // 68: Anki.Vector.external_interface.SetFaceToEnrollRequest
	(*SetFaceToEnrollResponse)(nil),             // 69: Anki.Vector.external_interface.SetFaceToEnrollResponse
	(*DriveOffChargerRequest)(nil),              // 70: Anki.Vector.external_interface.DriveOffChargerRequest
	(*DriveOffChargerResponse)(nil),             // 71: Anki.Vector.external_interface.DriveOffChargerResponse
	(*DriveOnChargerRequest)(nil),               // 72: Anki.Vector.external_interface.DriveOnChargerRequest
	(*DriveOnChargerResponse)(nil),              // 73: Anki.Vector.external_interface.DriveOnChargerResponse
	(*FindFacesRequest)(nil),                    // 74: Anki.Vector.external_interface.FindFacesRequest
	(*FindFacesResponse)(nil),                   // 75: Anki.Vector.external_interface.FindFacesResponse
	(*LookAroundInPlaceRequest)(nil),            // 76: Anki.Vector.external_interface.LookAroundInPlaceRequest
	(*LookAroundInPlaceResponse)(nil),           // 77: Anki.Vector.external_interface.LookAroundInPlaceResponse
	(*RollBlockRequest)(nil),                    // 78: Anki.Vector.external_interface.RollBlockRequest
	(*RollBlockResponse)(nil),                   // 79: Anki.Vector.external_interface.RollBlockResponse
	(*WakeWordBegin)(nil),                       // 80: Anki.Vector.external_interface.WakeWordBegin
	(*WakeWordEnd)(nil),                         // 81: Anki.Vector.external_interface.WakeWordEnd
	(*UserIntent)(nil),                          // 82: Anki.Vector.external_interface.UserIntent
	(*PhotoInfo)(nil),                           // 83: Anki.Vector.external_interface.PhotoInfo
	(*PhotosInfoRequest)(nil),                   // 84: Anki.Vector.external_interface.PhotosInfoRequest
	(*PhotosInfoResponse)(nil),                  // 85: Anki.Vector.external_interface.PhotosInfoResponse
	(*PhotoRequest)(nil),                        // 86: Anki.Vector.external_interface.PhotoRequest
	(*PhotoPathMessage)(nil),                    // 87: Anki.Vector.external_interface.PhotoPathMessage
	(*PhotoResponse)(nil),                       // 88: Anki.Vector.external_interface.PhotoResponse
	(*ThumbnailRequest)(nil),                    // 89: Anki.Vector.external_interface.ThumbnailRequest
	(*ThumbnailPathMessage)(nil),                // 90: Anki.Vector.external_interface.ThumbnailPathMessage
	(*ThumbnailResponse)(nil),                   // 91: Anki.Vector.external_interface.ThumbnailResponse
	(*DeletePhotoRequest)(nil),                  // 92: Anki.Vector.external_interface.DeletePhotoRequest
	(*DeletePhotoResponse)(nil),                 // 93: Anki.Vector.external_interface.DeletePhotoResponse
	(*PhotoTaken)(nil),                          // 94: Anki.Vector.external_interface.PhotoTaken
	(*PathMotionProfile)(nil),                   // 95: Anki.Vector.external_interface.PathMotionProfile
	(*ActionResult)(nil),                        // 96: Anki.Vector.external_interface.ActionResult
	(*CancelActionByIdTagRequest)(nil),          // 97: Anki.Vector.external_interface.CancelActionByIdTagRequest
	(*CancelActionByIdTagResponse)(nil),         // 98: Anki.Vector.external_interface.CancelActionByIdTagResponse
	(*GoToPoseRequest)(nil),                     // 99: Anki.Vector.external_interface.GoToPoseRequest
	(*GoToPoseResponse)(nil),                    // 100: Anki.Vector.external_interface.GoToPoseResponse
	(*DockWithCubeRequest)(nil),                 // 101: Anki.Vector.external_interface.DockWithCubeRequest
	(*DockWithCubeResponse)(nil),                // 102: Anki.Vector.external_interface.DockWithCubeResponse
	(*DriveStraightRequest)(nil),                // 103: Anki.Vector.external_interface.DriveStraightRequest
	(*DriveStraightResponse)(nil),               // 104: Anki.Vector.external_interface.DriveStraightResponse
	(*TurnInPlaceRequest)(nil),                  // 105: Anki.Vector.external_interface.TurnInPlaceRequest
	(*TurnInPlaceResponse)(nil),                 // 106: Anki.Vector.external_interface.TurnInPlaceResponse
	(*SetHeadAngleRequest)(nil),                 // 107: Anki.Vector.external_interface.SetHeadAngleRequest
	(*SetHeadAngleResponse)(nil),                // 108: Anki.Vector.external_interface.SetHeadAngleResponse
	(*SetLiftHeightRequest)(nil),                // 109: Anki.Vector.external_interface.SetLiftHeightRequest
	(*SetLiftHeightResponse)(nil),               // 110: Anki.Vector.external_interface.SetLiftHeightResponse
	(*TurnTowardsFaceRequest)(nil),              // 111: Anki.Vector.external_interface.TurnTowardsFaceRequest
	(*TurnTowardsFaceResponse)(nil),             // 112: Anki.Vector.external_interface.TurnTowardsFaceResponse
	(*GoToObjectRequest)(nil),                   // 113: Anki.Vector.external_interface.GoToObjectRequest
	(*GoToObjectResponse)(nil),                  // 114: Anki.Vector.external_interface.GoToObjectResponse
	(*RollObjectRequest)(nil),                   // 115: Anki.Vector.external_interface.RollObjectRequest
	(*RollObjectResponse)(nil),                  // 116: Anki.Vector.external_interface.RollObjectResponse
	(*PopAWheelieRequest)(nil),                  // 117: Anki.Vector.external_interface.PopAWheelieRequest
	(*PopAWheelieResponse)(nil),                 // 118: Anki.Vector.external_interface.PopAWheelieResponse
	(*PickupObjectRequest)(nil),                 // 119: Anki.Vector.external_interface.PickupObjectRequest
	(*PickupObjectResponse)(nil),                // 120: Anki.Vector.external_interface.PickupObjectResponse
	(*PlaceObjectOnGroundHereRequest)(nil),      // 121: Anki.Vector.external_interface.PlaceObjectOnGroundHereRequest
	(*PlaceObjectOnGroundHereResponse)(nil),     // 122: Anki.Vector.external_interface.PlaceObjectOnGroundHereResponse
	(*BatteryStateRequest)(nil),                 // 123: Anki.Vector.external_interface.BatteryStateRequest
	(*BatteryStateResponse)(nil),                // 124: Anki.Vector.external_interface.BatteryStateResponse
	(*CubeBattery)(nil),                         // 125: Anki.Vector.external_interface.CubeBattery
	(*VersionStateRequest)(nil),                 // 126: Anki.Vector.external_interface.VersionStateRequest
	(*VersionStateResponse)(nil),                // 127: Anki.Vector.external_interface.VersionStateResponse
	(*SayTextRequest)(nil),                      // 128: Anki.Vector.external_interface.SayTextRequest
	(*SayTextResponse)(nil),                     // 129: Anki.Vector.external_interface.SayTextResponse
	(*StimulationInfo)(nil),                     // 130: Anki.Vector.external_interface.StimulationInfo
	(*AudioSendModeRequest)(nil),                // 131: Anki.Vector.external_interface.AudioSendModeRequest
	(*AudioSendModeChanged)(nil),                // 132: Anki.Vector.external_interface.AudioSendModeChanged
	(*AudioChunk)(nil),                          // 133: Anki.Vector.external_interface.AudioChunk
	(*AudioFeedRequest)(nil),                    // 134: Anki.Vector.external_interface.AudioFeedRequest
	(*AudioFeedResponse)(nil),                   // 135: Anki.Vector.external_interface.AudioFeedResponse
	(*ExternalAudioStreamPrepare)(nil),          // 136: Anki.Vector.external_interface.ExternalAudioStreamPrepare
	(*ExternalAudioStreamChunk)(nil),            // 137: Anki.Vector.external_interface.ExternalAudioStreamChunk
	(*ExternalAudioStreamComplete)(nil),         // 138: Anki.Vector.external_interface.ExternalAudioStreamComplete
	(*ExternalAudioStreamCancel)(nil),           // 139: Anki.Vector.external_interface.ExternalAudioStreamCancel
	(*ExternalAudioStreamRequest)(nil),          // 140: Anki.Vector.external_interface.ExternalAudioStreamRequest
	(*ExternalAudioStreamPlaybackComplete)(nil), // 141: Anki.Vector.external_interface.ExternalAudioStreamPlaybackComplete
	(*ExternalAudioStreamPlaybackFailure)(nil),  // 142: Anki.Vector.external_interface.ExternalAudioStreamPlaybackFailure
	(*ExternalAudioStreamBufferOverrun)(nil),    // 143: Anki.Vector.external_interface.ExternalAudioStreamBufferOverrun
	(*ExternalAudioStreamResponse)(nil),         // 144: Anki.Vector.external_interface.ExternalAudioStreamResponse
	(*MasterVolumeRequest)(nil),                 // 145: Anki.Vector.external_interface.MasterVolumeRequest
	(*MasterVolumeResponse)(nil),                // 146: Anki.Vector.external_interface.MasterVolumeResponse
	(*EnableMarkerDetectionRequest)(nil),        // 147: Anki.Vector.external_interface.EnableMarkerDetectionRequest
	(*EnableMarkerDetectionResponse)(nil),       // 148: Anki.Vector.external_interface.EnableMarkerDetectionResponse
	(*EnableFaceDetectionRequest)(nil),          // 149: Anki.Vector.external_interface.EnableFaceDetectionRequest
	(*EnableFaceDetectionResponse)(nil),         // 150: Anki.Vector.external_interface.EnableFaceDetectionResponse
	(*EnableMotionDetectionRequest)(nil),        // 151: Anki.Vector.external_interface.EnableMotionDetectionRequest
	(*EnableMotionDetectionResponse)(nil),       // 152: Anki.Vector.external_interface.EnableMotionDetectionResponse
	(*EnableMirrorModeRequest)(nil),             // 153: Anki.Vector.external_interface.EnableMirrorModeRequest
	(*EnableMirrorModeResponse)(nil),            // 154: Anki.Vector.external_interface.EnableMirrorModeResponse
	(*MirrorModeDisabled)(nil),                  // 155: Anki.Vector.external_interface.MirrorModeDisabled
	(*EnableImageStreamingRequest)(nil),         // 156: Anki.Vector.external_interface.EnableImageStreamingRequest
	(*EnableImageStreamingResponse)(nil),        // 157: Anki.Vector.external_interface.EnableImageStreamingResponse
	(*IsImageStreamingEnabledRequest)(nil),      // 158: Anki.Vector.external_interface.IsImageStreamingEnabledRequest
	(*IsImageStreamingEnabledResponse)(nil),     // 159: Anki.Vector.external_interface.IsImageStreamingEnabledResponse
	(*VisionModesAutoDisabled)(nil),             // 160: Anki.Vector.external_interface.VisionModesAutoDisabled
	(*ImageChunk)(nil),                          // 161: Anki.Vector.external_interface.ImageChunk
	(*CameraFeedRequest)(nil),                   // 162: Anki.Vector.external_interface.CameraFeedRequest
	(*CameraFeedResponse)(nil),                  // 163: Anki.Vector.external_interface.CameraFeedResponse
	(*CaptureSingleImageRequest)(nil),           // 164: Anki.Vector.external_interface.CaptureSingleImageRequest
	(*CaptureSingleImageResponse)(nil),          // 165: Anki.Vector.external_interface.CaptureSingleImageResponse
	(*SetEyeColorRequest)(nil),                  // 166: Anki.Vector.external_interface.SetEyeColorRequest
	(*SetEyeColorResponse)(nil),                 // 167: Anki.Vector.external_interface.SetEyeColorResponse
	(*SDKInitializationRequest)(nil),            // 168: Anki.Vector.external_interface.SDKInitializationRequest
	(*SDKInitializationResponse)(nil),           // 169: Anki.Vector.external_interface.SDKInitializationResponse
	(*AppDisconnected)(nil),                     // 170: Anki.Vector.external_interface.AppDisconnected
	(*AppIntentRequest)(nil),                    // 171: Anki.Vector.external_interface.AppIntentRequest
	(*AppIntentResponse)(nil),                   // 172: Anki.Vector.external_interface.AppIntentResponse
	(*FeatureStatus)(nil),                       // 173: Anki.Vector.external_interface.FeatureStatus
	(*Onboarding)(nil),                          // 174: Anki.Vector.external_interface.Onboarding
	(*RobotHistoryRequest)(nil),                 // 175: Anki.Vector.external_interface.RobotHistoryRequest
	(*RobotHistoryResponse)(nil),                // 176: Anki.Vector.external_interface.RobotHistoryResponse
	(*OnboardingState)(nil),                     // 177: Anki.Vector.external_interface.OnboardingState
	(*OnboardingStateRequest)(nil),              // 178: Anki.Vector.external_interface.OnboardingStateRequest
	(*OnboardingStateResponse)(nil),             // 179: Anki.Vector.external_interface.OnboardingStateResponse
	(*OnboardingSetPhaseRequest)(nil),           // 180: Anki.Vector.external_interface.OnboardingSetPhaseRequest
	(*OnboardingSetPhaseResponse)(nil),          // 181: Anki.Vector.external_interface.OnboardingSetPhaseResponse
	(*OnboardingPhaseProgressRequest)(nil),      // 182: Anki.Vector.external_interface.OnboardingPhaseProgressRequest
	(*OnboardingPhaseProgressResponse)(nil),     // 183: Anki.Vector.external_interface.OnboardingPhaseProgressResponse
	(*OnboardingChargeInfoRequest)(nil),         // 184: Anki.Vector.external_interface.OnboardingChargeInfoRequest
	(*OnboardingChargeInfoResponse)(nil),        // 185: Anki.Vector.external_interface.OnboardingChargeInfoResponse
	(*OnboardingSkipOnboarding)(nil),            // 186: Anki.Vector.external_interface.OnboardingSkipOnboarding
	(*OnboardingRestart)(nil),                   // 187: Anki.Vector.external_interface.OnboardingRestart
	(*OnboardingMarkCompleteAndExit)(nil),       // 188: Anki.Vector.external_interface.OnboardingMarkCompleteAndExit
	(*OnboardingInputRequest)(nil),              // 189: Anki.Vector.external_interface.OnboardingInputRequest
	(*OnboardingInputResponse)(nil),             // 190: Anki.Vector.external_interface.OnboardingInputResponse
	(*OnboardingCompleteRequest)(nil),           // 191: Anki.Vector.external_interface.OnboardingCompleteRequest
	(*OnboardingCompleteResponse)(nil),          // 192: Anki.Vector.external_interface.OnboardingCompleteResponse
	(*OnboardingWakeUpStartedRequest)(nil),      // 193: Anki.Vector.external_interface.OnboardingWakeUpStartedRequest
	(*OnboardingWakeUpStartedResponse)(nil),     // 194: Anki.Vector.external_interface.OnboardingWakeUpStartedResponse
	(*OnboardingWakeUpRequest)(nil),             // 195: Anki.Vector.external_interface.OnboardingWakeUpRequest
	(*OnboardingWakeUpResponse)(nil),            // 196: Anki.Vector.external_interface.OnboardingWakeUpResponse
	(*Onboarding1P0ChargingInfo)(nil),           // 197: Anki.Vector.external_interface.Onboarding1p0ChargingInfo
	(*OnboardingWakeUpFinished)(nil),            // 198: Anki.Vector.external_interface.OnboardingWakeUpFinished
	(*FeatureFlagRequest)(nil),                  // 199: Anki.Vector.external_interface.FeatureFlagRequest
	(*FeatureFlagResponse)(nil),                 // 200: Anki.Vector.external_interface.FeatureFlagResponse
	(*FeatureFlagListRequest)(nil),              // 201: Anki.Vector.external_interface.FeatureFlagListRequest
	(*FeatureFlagListResponse)(nil),             // 202: Anki.Vector.external_interface.FeatureFlagListResponse
	(*AttentionTransfer)(nil),                   // 203: Anki.Vector.external_interface.AttentionTransfer
	(*LatestAttentionTransferRequest)(nil),      // 204: Anki.Vector.external_interface.LatestAttentionTransferRequest
	(*LatestAttentionTransfer)(nil),             // 205: Anki.Vector.external_interface.LatestAttentionTransfer
	(*LatestAttentionTransferResponse)(nil),     // 206: Anki.Vector.external_interface.LatestAttentionTransferResponse
	(*UpdateAndRestartRequest)(nil),             // 207: Anki.Vector.external_interface.UpdateAndRestartRequest
	(*UpdateAndRestartResponse)(nil),            // 208: Anki.Vector.external_interface.UpdateAndRestartResponse
	(*CheckUpdateStatusRequest)(nil),            // 209: Anki.Vector.external_interface.CheckUpdateStatusRequest
	(*CheckUpdateStatusResponse)(nil),           // 210: Anki.Vector.external_interface.CheckUpdateStatusResponse
	(*CheckCloudRequest)(nil),                   // 211: Anki.Vector.external_interface.CheckCloudRequest
	(*CheckCloudResponse)(nil),                  // 212: Anki.Vector.external_interface.CheckCloudResponse
	(*ResponseStatus)(nil),                      // 213: Anki.Vector.external_interface.ResponseStatus
}
var file_messages_proto_depIdxs = []int32{
	213, // 0: Anki.Vector.external_interface.DriveWheelsResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 1: Anki.Vector.external_interface.MoveHeadResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 2: Anki.Vector.external_interface.MoveLiftResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 3: Anki.Vector.external_interface.StopAllMotorsResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	21,  // 4: Anki.Vector.external_interface.PlayAnimationTriggerRequest.animation_trigger:type_name -> Anki.Vector.external_interface.AnimationTrigger
	22,  // 5: Anki.Vector.external_interface.PlayAnimationRequest.animation:type_name -> Anki.Vector.external_interface.Animation
	213, // 6: Anki.Vector.external_interface.PlayAnimationResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	3,   // 7: Anki.Vector.external_interface.PlayAnimationResponse.result:type_name -> Anki.Vector.external_interface.BehaviorResults
	22,  // 8: Anki.Vector.external_interface.PlayAnimationResponse.animation:type_name -> Anki.Vector.external_interface.Animation
	213, // 9: Anki.Vector.external_interface.ListAnimationsResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	22,  // 10: Anki.Vector.external_interface.ListAnimationsResponse.animation_names:type_name -> Anki.Vector.external_interface.Animation
	213, // 11: Anki.Vector.external_interface.ListAnimationTriggersResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	21,  // 12: Anki.Vector.external_interface.ListAnimationTriggersResponse.animation_trigger_names:type_name -> Anki.Vector.external_interface.AnimationTrigger
	213, // 13: Anki.Vector.external_interface.DisplayFaceImageRGBResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	173, // 14: Anki.Vector.external_interface.Status.feature_status:type_name -> Anki.Vector.external_interface.FeatureStatus
	40,  // 15: Anki.Vector.external_interface.Status.meet_victor_face_scan_started:type_name -> Anki.Vector.external_interface.MeetVictorFaceScanStarted
	41,  // 16: Anki.Vector.external_interface.Status.meet_victor_face_scan_complete:type_name -> Anki.Vector.external_interface.MeetVictorFaceScanComplete
	55,  // 17: Anki.Vector.external_interface.Status.face_enrollment_completed:type_name -> Anki.Vector.external_interface.FaceEnrollmentCompleted
	80,  // 18: Anki.Vector.external_interface.WakeWord.wake_word_begin:type_name -> Anki.Vector.external_interface.WakeWordBegin
	81,  // 19: Anki.Vector.external_interface.WakeWord.wake_word_end:type_name -> Anki.Vector.external_interface.WakeWordEnd
	42,  // 20: Anki.Vector.external_interface.TimeStampedStatus.status:type_name -> Anki.Vector.external_interface.Status
	45,  // 21: Anki.Vector.external_interface.RobotState.pose:type_name -> Anki.Vector.external_interface.PoseStruct
	46,  // 22: Anki.Vector.external_interface.RobotState.accel:type_name -> Anki.Vector.external_interface.AccelData
	47,  // 23: Anki.Vector.external_interface.RobotState.gyro:type_name -> Anki.Vector.external_interface.GyroData
	48,  // 24: Anki.Vector.external_interface.RobotState.prox_data:type_name -> Anki.Vector.external_interface.ProxData
	49,  // 25: Anki.Vector.external_interface.RobotState.touch_data:type_name -> Anki.Vector.external_interface.TouchData
	45,  // 26: Anki.Vector.external_interface.RobotObservedFace.pose:type_name -> Anki.Vector.external_interface.PoseStruct
	52,  // 27: Anki.Vector.external_interface.RobotObservedFace.img_rect:type_name -> Anki.Vector.external_interface.CladRect
	1,   // 28: Anki.Vector.external_interface.RobotObservedFace.expression:type_name -> Anki.Vector.external_interface.FacialExpression
	51,  // 29: Anki.Vector.external_interface.RobotObservedFace.left_eye:type_name -> Anki.Vector.external_interface.CladPoint
	51,  // 30: Anki.Vector.external_interface.RobotObservedFace.right_eye:type_name -> Anki.Vector.external_interface.CladPoint
	51,  // 31: Anki.Vector.external_interface.RobotObservedFace.nose:type_name -> Anki.Vector.external_interface.CladPoint
	51,  // 32: Anki.Vector.external_interface.RobotObservedFace.mouth:type_name -> Anki.Vector.external_interface.CladPoint
	2,   // 33: Anki.Vector.external_interface.FaceEnrollmentCompleted.result:type_name -> Anki.Vector.external_interface.FaceEnrollmentResult
	213, // 34: Anki.Vector.external_interface.CancelFaceEnrollmentResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 35: Anki.Vector.external_interface.RequestEnrolledNamesResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	59,  // 36: Anki.Vector.external_interface.RequestEnrolledNamesResponse.faces:type_name -> Anki.Vector.external_interface.LoadedKnownFace
	213, // 37: Anki.Vector.external_interface.UpdateEnrolledFaceByIDResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 38: Anki.Vector.external_interface.EraseEnrolledFaceByIDResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 39: Anki.Vector.external_interface.EraseAllEnrolledFacesResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 40: Anki.Vector.external_interface.SetFaceToEnrollResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 41: Anki.Vector.external_interface.DriveOffChargerResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	3,   // 42: Anki.Vector.external_interface.DriveOffChargerResponse.result:type_name -> Anki.Vector.external_interface.BehaviorResults
	213, // 43: Anki.Vector.external_interface.DriveOnChargerResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	3,   // 44: Anki.Vector.external_interface.DriveOnChargerResponse.result:type_name -> Anki.Vector.external_interface.BehaviorResults
	213, // 45: Anki.Vector.external_interface.FindFacesResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	3,   // 46: Anki.Vector.external_interface.FindFacesResponse.result:type_name -> Anki.Vector.external_interface.BehaviorResults
	213, // 47: Anki.Vector.external_interface.LookAroundInPlaceResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	3,   // 48: Anki.Vector.external_interface.LookAroundInPlaceResponse.result:type_name -> Anki.Vector.external_interface.BehaviorResults
	213, // 49: Anki.Vector.external_interface.RollBlockResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	3,   // 50: Anki.Vector.external_interface.RollBlockResponse.result:type_name -> Anki.Vector.external_interface.BehaviorResults
	213, // 51: Anki.Vector.external_interface.PhotosInfoResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	83,  // 52: Anki.Vector.external_interface.PhotosInfoResponse.photo_infos:type_name -> Anki.Vector.external_interface.PhotoInfo
	213, // 53: Anki.Vector.external_interface.PhotoResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 54: Anki.Vector.external_interface.ThumbnailResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 55: Anki.Vector.external_interface.DeletePhotoResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	14,  // 56: Anki.Vector.external_interface.ActionResult.code:type_name -> Anki.Vector.external_interface.ActionResult.ActionResultCode
	213, // 57: Anki.Vector.external_interface.CancelActionByIdTagResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	95,  // 58: Anki.Vector.external_interface.GoToPoseRequest.motion_prof:type_name -> Anki.Vector.external_interface.PathMotionProfile
	213, // 59: Anki.Vector.external_interface.GoToPoseResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	96,  // 60: Anki.Vector.external_interface.GoToPoseResponse.result:type_name -> Anki.Vector.external_interface.ActionResult
	5,   // 61: Anki.Vector.external_interface.DockWithCubeRequest.alignment_type:type_name -> Anki.Vector.external_interface.AlignmentType
	95,  // 62: Anki.Vector.external_interface.DockWithCubeRequest.motion_prof:type_name -> Anki.Vector.external_interface.PathMotionProfile
	213, // 63: Anki.Vector.external_interface.DockWithCubeResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	96,  // 64: Anki.Vector.external_interface.DockWithCubeResponse.result:type_name -> Anki.Vector.external_interface.ActionResult
	213, // 65: Anki.Vector.external_interface.DriveStraightResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	96,  // 66: Anki.Vector.external_interface.DriveStraightResponse.result:type_name -> Anki.Vector.external_interface.ActionResult
	213, // 67: Anki.Vector.external_interface.TurnInPlaceResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	96,  // 68: Anki.Vector.external_interface.TurnInPlaceResponse.result:type_name -> Anki.Vector.external_interface.ActionResult
	213, // 69: Anki.Vector.external_interface.SetHeadAngleResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	96,  // 70: Anki.Vector.external_interface.SetHeadAngleResponse.result:type_name -> Anki.Vector.external_interface.ActionResult
	213, // 71: Anki.Vector.external_interface.SetLiftHeightResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	96,  // 72: Anki.Vector.external_interface.SetLiftHeightResponse.result:type_name -> Anki.Vector.external_interface.ActionResult
	213, // 73: Anki.Vector.external_interface.TurnTowardsFaceResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	96,  // 74: Anki.Vector.external_interface.TurnTowardsFaceResponse.result:type_name -> Anki.Vector.external_interface.ActionResult
	95,  // 75: Anki.Vector.external_interface.GoToObjectRequest.motion_prof:type_name -> Anki.Vector.external_interface.PathMotionProfile
	213, // 76: Anki.Vector.external_interface.GoToObjectResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	96,  // 77: Anki.Vector.external_interface.GoToObjectResponse.result:type_name -> Anki.Vector.external_interface.ActionResult
	95,  // 78: Anki.Vector.external_interface.RollObjectRequest.motion_prof:type_name -> Anki.Vector.external_interface.PathMotionProfile
	213, // 79: Anki.Vector.external_interface.RollObjectResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	96,  // 80: Anki.Vector.external_interface.RollObjectResponse.result:type_name -> Anki.Vector.external_interface.ActionResult
	95,  // 81: Anki.Vector.external_interface.PopAWheelieRequest.motion_prof:type_name -> Anki.Vector.external_interface.PathMotionProfile
	213, // 82: Anki.Vector.external_interface.PopAWheelieResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	96,  // 83: Anki.Vector.external_interface.PopAWheelieResponse.result:type_name -> Anki.Vector.external_interface.ActionResult
	95,  // 84: Anki.Vector.external_interface.PickupObjectRequest.motion_prof:type_name -> Anki.Vector.external_interface.PathMotionProfile
	213, // 85: Anki.Vector.external_interface.PickupObjectResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	96,  // 86: Anki.Vector.external_interface.PickupObjectResponse.result:type_name -> Anki.Vector.external_interface.ActionResult
	213, // 87: Anki.Vector.external_interface.PlaceObjectOnGroundHereResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	96,  // 88: Anki.Vector.external_interface.PlaceObjectOnGroundHereResponse.result:type_name -> Anki.Vector.external_interface.ActionResult
	213, // 89: Anki.Vector.external_interface.BatteryStateResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	6,   // 90: Anki.Vector.external_interface.BatteryStateResponse.battery_level:type_name -> Anki.Vector.external_interface.BatteryLevel
	125, // 91: Anki.Vector.external_interface.BatteryStateResponse.cube_battery:type_name -> Anki.Vector.external_interface.CubeBattery
	15,  // 92: Anki.Vector.external_interface.CubeBattery.level:type_name -> Anki.Vector.external_interface.CubeBattery.CubeBatteryLevel
	213, // 93: Anki.Vector.external_interface.VersionStateResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 94: Anki.Vector.external_interface.SayTextResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	16,  // 95: Anki.Vector.external_interface.SayTextResponse.state:type_name -> Anki.Vector.external_interface.SayTextResponse.UtteranceState
	8,   // 96: Anki.Vector.external_interface.AudioSendModeRequest.mode:type_name -> Anki.Vector.external_interface.AudioProcessingMode
	8,   // 97: Anki.Vector.external_interface.AudioSendModeChanged.mode:type_name -> Anki.Vector.external_interface.AudioProcessingMode
	136, // 98: Anki.Vector.external_interface.ExternalAudioStreamRequest.audio_stream_prepare:type_name -> Anki.Vector.external_interface.ExternalAudioStreamPrepare
	137, // 99: Anki.Vector.external_interface.ExternalAudioStreamRequest.audio_stream_chunk:type_name -> Anki.Vector.external_interface.ExternalAudioStreamChunk
	138, // 100: Anki.Vector.external_interface.ExternalAudioStreamRequest.audio_stream_complete:type_name -> Anki.Vector.external_interface.ExternalAudioStreamComplete
	139, // 101: Anki.Vector.external_interface.ExternalAudioStreamRequest.audio_stream_cancel:type_name -> Anki.Vector.external_interface.ExternalAudioStreamCancel
	141, // 102: Anki.Vector.external_interface.ExternalAudioStreamResponse.audio_stream_playback_complete:type_name -> Anki.Vector.external_interface.ExternalAudioStreamPlaybackComplete
	143, // 103: Anki.Vector.external_interface.ExternalAudioStreamResponse.audio_stream_buffer_overrun:type_name -> Anki.Vector.external_interface.ExternalAudioStreamBufferOverrun
	142, // 104: Anki.Vector.external_interface.ExternalAudioStreamResponse.audio_stream_playback_failyer:type_name -> Anki.Vector.external_interface.ExternalAudioStreamPlaybackFailure
	9,   // 105: Anki.Vector.external_interface.MasterVolumeRequest.volume_level:type_name -> Anki.Vector.external_interface.MasterVolumeLevel
	213, // 106: Anki.Vector.external_interface.MasterVolumeResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 107: Anki.Vector.external_interface.EnableMarkerDetectionResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 108: Anki.Vector.external_interface.EnableFaceDetectionResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 109: Anki.Vector.external_interface.EnableMotionDetectionResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 110: Anki.Vector.external_interface.EnableMirrorModeResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 111: Anki.Vector.external_interface.EnableImageStreamingResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	17,  // 112: Anki.Vector.external_interface.ImageChunk.image_encoding:type_name -> Anki.Vector.external_interface.ImageChunk.ImageEncoding
	17,  // 113: Anki.Vector.external_interface.CameraFeedResponse.image_encoding:type_name -> Anki.Vector.external_interface.ImageChunk.ImageEncoding
	213, // 114: Anki.Vector.external_interface.CaptureSingleImageResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	17,  // 115: Anki.Vector.external_interface.CaptureSingleImageResponse.image_encoding:type_name -> Anki.Vector.external_interface.ImageChunk.ImageEncoding
	213, // 116: Anki.Vector.external_interface.SetEyeColorResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 117: Anki.Vector.external_interface.SDKInitializationResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 118: Anki.Vector.external_interface.AppIntentResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	177, // 119: Anki.Vector.external_interface.Onboarding.onboarding_state:type_name -> Anki.Vector.external_interface.OnboardingState
	198, // 120: Anki.Vector.external_interface.Onboarding.onboarding_wake_up_finished:type_name -> Anki.Vector.external_interface.OnboardingWakeUpFinished
	197, // 121: Anki.Vector.external_interface.Onboarding.onboarding_1p0_charging_info:type_name -> Anki.Vector.external_interface.Onboarding1p0ChargingInfo
	44,  // 122: Anki.Vector.external_interface.RobotHistoryResponse.messages:type_name -> Anki.Vector.external_interface.TimeStampedStatus
	10,  // 123: Anki.Vector.external_interface.OnboardingState.stage:type_name -> Anki.Vector.external_interface.OnboardingStages
	213, // 124: Anki.Vector.external_interface.OnboardingStateResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	177, // 125: Anki.Vector.external_interface.OnboardingStateResponse.onboarding_state:type_name -> Anki.Vector.external_interface.OnboardingState
	11,  // 126: Anki.Vector.external_interface.OnboardingSetPhaseRequest.phase:type_name -> Anki.Vector.external_interface.OnboardingPhase
	213, // 127: Anki.Vector.external_interface.OnboardingSetPhaseResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	11,  // 128: Anki.Vector.external_interface.OnboardingSetPhaseResponse.phase:type_name -> Anki.Vector.external_interface.OnboardingPhase
	12,  // 129: Anki.Vector.external_interface.OnboardingSetPhaseResponse.phase_state:type_name -> Anki.Vector.external_interface.OnboardingPhaseState
	213, // 130: Anki.Vector.external_interface.OnboardingPhaseProgressResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	11,  // 131: Anki.Vector.external_interface.OnboardingPhaseProgressResponse.last_set_phase:type_name -> Anki.Vector.external_interface.OnboardingPhase
	12,  // 132: Anki.Vector.external_interface.OnboardingPhaseProgressResponse.last_set_phase_state:type_name -> Anki.Vector.external_interface.OnboardingPhaseState
	213, // 133: Anki.Vector.external_interface.OnboardingChargeInfoResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	191, // 134: Anki.Vector.external_interface.OnboardingInputRequest.onboarding_complete_request:type_name -> Anki.Vector.external_interface.OnboardingCompleteRequest
	195, // 135: Anki.Vector.external_interface.OnboardingInputRequest.onboarding_wake_up_request:type_name -> Anki.Vector.external_interface.OnboardingWakeUpRequest
	186, // 136: Anki.Vector.external_interface.OnboardingInputRequest.onboarding_skip_onboarding:type_name -> Anki.Vector.external_interface.OnboardingSkipOnboarding
	187, // 137: Anki.Vector.external_interface.OnboardingInputRequest.onboarding_restart:type_name -> Anki.Vector.external_interface.OnboardingRestart
	193, // 138: Anki.Vector.external_interface.OnboardingInputRequest.onboarding_wake_up_started_request:type_name -> Anki.Vector.external_interface.OnboardingWakeUpStartedRequest
	180, // 139: Anki.Vector.external_interface.OnboardingInputRequest.onboarding_set_phase_request:type_name -> Anki.Vector.external_interface.OnboardingSetPhaseRequest
	182, // 140: Anki.Vector.external_interface.OnboardingInputRequest.onboarding_phase_progress_request:type_name -> Anki.Vector.external_interface.OnboardingPhaseProgressRequest
	184, // 141: Anki.Vector.external_interface.OnboardingInputRequest.onboarding_charge_info_request:type_name -> Anki.Vector.external_interface.OnboardingChargeInfoRequest
	188, // 142: Anki.Vector.external_interface.OnboardingInputRequest.onboarding_mark_complete_and_exit:type_name -> Anki.Vector.external_interface.OnboardingMarkCompleteAndExit
	213, // 143: Anki.Vector.external_interface.OnboardingInputResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	192, // 144: Anki.Vector.external_interface.OnboardingInputResponse.onboarding_complete_response:type_name -> Anki.Vector.external_interface.OnboardingCompleteResponse
	196, // 145: Anki.Vector.external_interface.OnboardingInputResponse.onboarding_wake_up_response:type_name -> Anki.Vector.external_interface.OnboardingWakeUpResponse
	194, // 146: Anki.Vector.external_interface.OnboardingInputResponse.onboarding_wake_up_started_response:type_name -> Anki.Vector.external_interface.OnboardingWakeUpStartedResponse
	181, // 147: Anki.Vector.external_interface.OnboardingInputResponse.onboarding_set_phase_response:type_name -> Anki.Vector.external_interface.OnboardingSetPhaseResponse
	183, // 148: Anki.Vector.external_interface.OnboardingInputResponse.onboarding_phase_progress_response:type_name -> Anki.Vector.external_interface.OnboardingPhaseProgressResponse
	185, // 149: Anki.Vector.external_interface.OnboardingInputResponse.onboarding_charge_info_response:type_name -> Anki.Vector.external_interface.OnboardingChargeInfoResponse
	197, // 150: Anki.Vector.external_interface.OnboardingWakeUpResponse.charging_info:type_name -> Anki.Vector.external_interface.Onboarding1p0ChargingInfo
	213, // 151: Anki.Vector.external_interface.FeatureFlagResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 152: Anki.Vector.external_interface.FeatureFlagListResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	13,  // 153: Anki.Vector.external_interface.AttentionTransfer.reason:type_name -> Anki.Vector.external_interface.AttentionTransferReason
	203, // 154: Anki.Vector.external_interface.LatestAttentionTransfer.attention_transfer:type_name -> Anki.Vector.external_interface.AttentionTransfer
	213, // 155: Anki.Vector.external_interface.LatestAttentionTransferResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	205, // 156: Anki.Vector.external_interface.LatestAttentionTransferResponse.latest_attention_transfer:type_name -> Anki.Vector.external_interface.LatestAttentionTransfer
	213, // 157: Anki.Vector.external_interface.UpdateAndRestartResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	213, // 158: Anki.Vector.external_interface.CheckUpdateStatusResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	18,  // 159: Anki.Vector.external_interface.CheckUpdateStatusResponse.update_status:type_name -> Anki.Vector.external_interface.CheckUpdateStatusResponse.UpdateStatus
	213, // 160: Anki.Vector.external_interface.CheckCloudResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	19,  // 161: Anki.Vector.external_interface.CheckCloudResponse.code:type_name -> Anki.Vector.external_interface.CheckCloudResponse.ConnectionCode
	162, // [162:162] is the sub-list for method output_type
	162, // [162:162] is the sub-list for method input_type
	162, // [162:162] is the sub-list for extension type_name
	162, // [162:162] is the sub-list for extension extendee
	0,   // [0:162] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	file_response_status_proto_init()
	file_extensions_proto_init()
	file_alexa_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAlivePing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnimationTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Animation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveWheelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveWheelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveHeadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveHeadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveLiftRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveLiftResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopAllMotorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopAllMotorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayAnimationTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayAnimationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayAnimationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnimationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnimationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnimationTriggersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnimationTriggersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayFaceImageRGBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayFaceImageRGBResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetVictorFaceScanStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetVictorFaceScanComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WakeWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeStampedStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GyroData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TouchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CladPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CladRect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotObservedFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotChangedObservedFaceID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaceEnrollmentCompleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelFaceEnrollmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelFaceEnrollmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestEnrolledNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadedKnownFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotRenamedEnrolledFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestEnrolledNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnrolledFaceByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnrolledFaceByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EraseEnrolledFaceByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EraseEnrolledFaceByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EraseAllEnrolledFacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EraseAllEnrolledFacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFaceToEnrollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFaceToEnrollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveOffChargerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveOffChargerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveOnChargerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveOnChargerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookAroundInPlaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookAroundInPlaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WakeWordBegin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WakeWordEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIntent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotosInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotosInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoPathMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThumbnailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThumbnailPathMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThumbnailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePhotoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePhotoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoTaken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathMotionProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelActionByIdTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelActionByIdTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoToPoseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoToPoseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockWithCubeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockWithCubeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveStraightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveStraightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnInPlaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnInPlaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHeadAngleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHeadAngleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLiftHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLiftHeightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnTowardsFaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnTowardsFaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoToObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoToObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopAWheelieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopAWheelieResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickupObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickupObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceObjectOnGroundHereRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceObjectOnGroundHereResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CubeBattery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SayTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SayTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StimulationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSendModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSendModeChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioFeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAudioStreamPrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAudioStreamChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAudioStreamComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAudioStreamCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAudioStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAudioStreamPlaybackComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAudioStreamPlaybackFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAudioStreamBufferOverrun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAudioStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMarkerDetectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMarkerDetectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableFaceDetectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableFaceDetectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMotionDetectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMotionDetectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMirrorModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMirrorModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirrorModeDisabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableImageStreamingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableImageStreamingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsImageStreamingEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsImageStreamingEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisionModesAutoDisabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraFeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureSingleImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureSingleImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEyeColorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEyeColorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKInitializationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKInitializationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppDisconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppIntentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Onboarding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingSetPhaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingSetPhaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingPhaseProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingPhaseProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingChargeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingChargeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingSkipOnboarding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingRestart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingMarkCompleteAndExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingWakeUpStartedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingWakeUpStartedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingWakeUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingWakeUpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Onboarding1P0ChargingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingWakeUpFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureFlagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureFlagListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureFlagListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttentionTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestAttentionTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestAttentionTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestAttentionTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAndRestartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAndRestartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUpdateStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUpdateStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCloudRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCloudResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messages_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Status_FeatureStatus)(nil),
		(*Status_MeetVictorFaceScanStarted)(nil),
		(*Status_MeetVictorFaceScanComplete)(nil),
		(*Status_FaceEnrollmentCompleted)(nil),
	}
	file_messages_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*WakeWord_WakeWordBegin)(nil),
		(*WakeWord_WakeWordEnd)(nil),
	}
	file_messages_proto_msgTypes[120].OneofWrappers = []interface{}{
		(*ExternalAudioStreamRequest_AudioStreamPrepare)(nil),
		(*ExternalAudioStreamRequest_AudioStreamChunk)(nil),
		(*ExternalAudioStreamRequest_AudioStreamComplete)(nil),
		(*ExternalAudioStreamRequest_AudioStreamCancel)(nil),
	}
	file_messages_proto_msgTypes[124].OneofWrappers = []interface{}{
		(*ExternalAudioStreamResponse_AudioStreamPlaybackComplete)(nil),
		(*ExternalAudioStreamResponse_AudioStreamBufferOverrun)(nil),
		(*ExternalAudioStreamResponse_AudioStreamPlaybackFailyer)(nil),
	}
	file_messages_proto_msgTypes[154].OneofWrappers = []interface{}{
		(*Onboarding_OnboardingState)(nil),
		(*Onboarding_OnboardingWakeUpFinished)(nil),
		(*Onboarding_Onboarding_1P0ChargingInfo)(nil),
	}
	file_messages_proto_msgTypes[169].OneofWrappers = []interface{}{
		(*OnboardingInputRequest_OnboardingCompleteRequest)(nil),
		(*OnboardingInputRequest_OnboardingWakeUpRequest)(nil),
		(*OnboardingInputRequest_OnboardingSkipOnboarding)(nil),
		(*OnboardingInputRequest_OnboardingRestart)(nil),
		(*OnboardingInputRequest_OnboardingWakeUpStartedRequest)(nil),
		(*OnboardingInputRequest_OnboardingSetPhaseRequest)(nil),
		(*OnboardingInputRequest_OnboardingPhaseProgressRequest)(nil),
		(*OnboardingInputRequest_OnboardingChargeInfoRequest)(nil),
		(*OnboardingInputRequest_OnboardingMarkCompleteAndExit)(nil),
	}
	file_messages_proto_msgTypes[170].OneofWrappers = []interface{}{
		(*OnboardingInputResponse_OnboardingCompleteResponse)(nil),
		(*OnboardingInputResponse_OnboardingWakeUpResponse)(nil),
		(*OnboardingInputResponse_OnboardingWakeUpStartedResponse)(nil),
		(*OnboardingInputResponse_OnboardingSetPhaseResponse)(nil),
		(*OnboardingInputResponse_OnboardingPhaseProgressResponse)(nil),
		(*OnboardingInputResponse_OnboardingChargeInfoResponse)(nil),
	}
	file_messages_proto_msgTypes[185].OneofWrappers = []interface{}{
		(*LatestAttentionTransfer_AttentionTransfer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   193,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		EnumInfos:         file_messages_proto_enumTypes,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_rawDesc = nil
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}
