// Autogenerated Go message buffer code.
// Source: victor-clad/clad/sdk/clad/externalInterface/messageExternalComms.clad
// Full command line: ./victor-clad/tools/message-buffers/emitters/Go_emitter.py -o . victor-clad/clad/sdk/clad/externalInterface/messageExternalComms.clad

package rts

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"

	"github.com/digital-dream-labs/vector-bluetooth/clad"
)

// ENUM RtsMode
type RtsMode uint8

const (
	RtsMode_RAW RtsMode = iota
	RtsMode_CLAD
	RtsMode_CLAD_ENCRYPTED
)

// ENUM RtsConnTypecode
type RtsConnType uint8

const (
	RtsConnType_FirstTimePair RtsConnType = iota
	RtsConnType_Reconnection
)

// ENUM RtsResponseCode
type RtsResponseCode uint16

const (
	RtsResponseCode_NotCloudAuthorized RtsResponseCode = RtsResponseCode(0)
	RtsResponseCode_UnsupportedRequest RtsResponseCode = RtsResponseCode(1)
)

// ENUM RtsCloudStatus
type RtsCloudStatus uint8

const (
	RtsCloudStatus_UnknownError RtsCloudStatus = iota
	RtsCloudStatus_ConnectionError
	RtsCloudStatus_WrongAccount
	RtsCloudStatus_InvalidSessionToken
	RtsCloudStatus_AuthorizedAsPrimary
	RtsCloudStatus_AuthorizedAsSecondary
	RtsCloudStatus_Reauthorized
)

// MESSAGE RtsWifiScanResult
type RtsWifiScanResult struct {
	AuthType       uint8
	SignalStrength uint8
	WifiSsidHex    string
}

func (r *RtsWifiScanResult) Size() uint32 {
	var result uint32
	result += 1                          // AuthType uint_8
	result += 1                          // SignalStrength uint_8
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	return result
}

func (r *RtsWifiScanResult) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.AuthType); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.SignalStrength); err != nil {
		return err
	}
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	return nil
}

func (r *RtsWifiScanResult) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.AuthType); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.SignalStrength); err != nil {
		return err
	}
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiScanResult) String() string {
	return fmt.Sprint("AuthType: {", r.AuthType, "} ",
		"SignalStrength: {", r.SignalStrength, "} ",
		"WifiSsidHex: {", r.WifiSsidHex, "}")
}

// MESSAGE RtsWifiScanResult_2
type RtsWifiScanResult2 = RtsWifiScanResult_2

type RtsWifiScanResult_2 struct {
	AuthType       uint8
	SignalStrength uint8
	WifiSsidHex    string
	Hidden         bool
}

func (r *RtsWifiScanResult_2) Size() uint32 {
	var result uint32
	result += 1                          // AuthType uint_8
	result += 1                          // SignalStrength uint_8
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	result += 1                          // Hidden bool
	return result
}

func (r *RtsWifiScanResult_2) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.AuthType); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.SignalStrength); err != nil {
		return err
	}
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.Hidden); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiScanResult_2) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.AuthType); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.SignalStrength); err != nil {
		return err
	}
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.Hidden); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiScanResult_2) String() string {
	return fmt.Sprint("AuthType: {", r.AuthType, "} ",
		"SignalStrength: {", r.SignalStrength, "} ",
		"WifiSsidHex: {", r.WifiSsidHex, "} ",
		"Hidden: {", r.Hidden, "}")
}

// MESSAGE RtsWifiScanResult_3
type RtsWifiScanResult3 = RtsWifiScanResult_3

type RtsWifiScanResult_3 struct {
	AuthType       uint8
	SignalStrength uint8
	WifiSsidHex    string
	Hidden         bool
	Provisioned    bool
}

func (r *RtsWifiScanResult_3) Size() uint32 {
	var result uint32
	result += 1                          // AuthType uint_8
	result += 1                          // SignalStrength uint_8
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	result += 1                          // Hidden bool
	result += 1                          // Provisioned bool
	return result
}

func (r *RtsWifiScanResult_3) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.AuthType); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.SignalStrength); err != nil {
		return err
	}
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.Hidden); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.Provisioned); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiScanResult_3) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.AuthType); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.SignalStrength); err != nil {
		return err
	}
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.Hidden); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.Provisioned); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiScanResult_3) String() string {
	return fmt.Sprint("AuthType: {", r.AuthType, "} ",
		"SignalStrength: {", r.SignalStrength, "} ",
		"WifiSsidHex: {", r.WifiSsidHex, "} ",
		"Hidden: {", r.Hidden, "} ",
		"Provisioned: {", r.Provisioned, "}")
}

// MESSAGE RtsConnRequest
type RtsConnRequest struct {
	PublicKey [32]uint8
}

func (r *RtsConnRequest) Size() uint32 {
	var result uint32
	result += 32 // uint_8 array
	return result
}

func (r *RtsConnRequest) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.PublicKey); err != nil {
		return err
	}
	return nil
}

func (r *RtsConnRequest) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.PublicKey); err != nil {
		return err
	}
	return nil
}

func (r *RtsConnRequest) String() string {
	return fmt.Sprint("PublicKey: {", r.PublicKey, "}")
}

// MESSAGE RtsConnResponse
type RtsConnResponse struct {
	ConnectionType RtsConnType
	PublicKey      [32]uint8
}

func (r *RtsConnResponse) Size() uint32 {
	var result uint32
	result += 1  // ConnectionType RtsConnType
	result += 32 // uint_8 array
	return result
}

func (r *RtsConnResponse) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.ConnectionType); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.PublicKey); err != nil {
		return err
	}
	return nil
}

func (r *RtsConnResponse) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.ConnectionType); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.PublicKey); err != nil {
		return err
	}
	return nil
}

func (r *RtsConnResponse) String() string {
	return fmt.Sprint("ConnectionType: {", r.ConnectionType, "} ",
		"PublicKey: {", r.PublicKey, "}")
}

// MESSAGE RtsNonceMessage
type RtsNonceMessage struct {
	ToRobotNonce  [24]uint8
	ToDeviceNonce [24]uint8
}

func (r *RtsNonceMessage) Size() uint32 {
	var result uint32
	result += 24 // uint_8 array
	result += 24 // uint_8 array
	return result
}

func (r *RtsNonceMessage) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.ToRobotNonce); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.ToDeviceNonce); err != nil {
		return err
	}
	return nil
}

func (r *RtsNonceMessage) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.ToRobotNonce); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.ToDeviceNonce); err != nil {
		return err
	}
	return nil
}

func (r *RtsNonceMessage) String() string {
	return fmt.Sprint("ToRobotNonce: {", r.ToRobotNonce, "} ",
		"ToDeviceNonce: {", r.ToDeviceNonce, "}")
}

// MESSAGE RtsAck
type RtsAck struct {
	RtsConnectionTag uint8
}

func (r *RtsAck) Size() uint32 {
	var result uint32
	result += 1 // RtsConnectionTag uint_8
	return result
}

func (r *RtsAck) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.RtsConnectionTag); err != nil {
		return err
	}
	return nil
}

func (r *RtsAck) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.RtsConnectionTag); err != nil {
		return err
	}
	return nil
}

func (r *RtsAck) String() string {
	return fmt.Sprint("RtsConnectionTag: {", r.RtsConnectionTag, "}")
}

// MESSAGE RtsChallengeMessage
type RtsChallengeMessage struct {
	Number uint32
}

func (r *RtsChallengeMessage) Size() uint32 {
	var result uint32
	result += 4 // Number uint_32
	return result
}

func (r *RtsChallengeMessage) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.Number); err != nil {
		return err
	}
	return nil
}

func (r *RtsChallengeMessage) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.Number); err != nil {
		return err
	}
	return nil
}

func (r *RtsChallengeMessage) String() string {
	return fmt.Sprint("Number: {", r.Number, "}")
}

// MESSAGE RtsChallengeSuccessMessage
type RtsChallengeSuccessMessage struct {
}

func (r *RtsChallengeSuccessMessage) Size() uint32 {
	return 0
}

func (r *RtsChallengeSuccessMessage) Unpack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsChallengeSuccessMessage) Pack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsChallengeSuccessMessage) String() string {
	return ""
}

// MESSAGE RtsWifiForgetRequest
type RtsWifiForgetRequest struct {
	DeleteAll   bool
	WifiSsidHex string
}

func (r *RtsWifiForgetRequest) Size() uint32 {
	var result uint32
	result += 1                          // DeleteAll bool
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	return result
}

func (r *RtsWifiForgetRequest) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.DeleteAll); err != nil {
		return err
	}
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	return nil
}

func (r *RtsWifiForgetRequest) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.DeleteAll); err != nil {
		return err
	}
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiForgetRequest) String() string {
	return fmt.Sprint("DeleteAll: {", r.DeleteAll, "} ",
		"WifiSsidHex: {", r.WifiSsidHex, "}")
}

// MESSAGE RtsWifiForgetResponse
type RtsWifiForgetResponse struct {
	DidDelete   bool
	WifiSsidHex string
}

func (r *RtsWifiForgetResponse) Size() uint32 {
	var result uint32
	result += 1                          // DidDelete bool
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	return result
}

func (r *RtsWifiForgetResponse) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.DidDelete); err != nil {
		return err
	}
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	return nil
}

func (r *RtsWifiForgetResponse) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.DidDelete); err != nil {
		return err
	}
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiForgetResponse) String() string {
	return fmt.Sprint("DidDelete: {", r.DidDelete, "} ",
		"WifiSsidHex: {", r.WifiSsidHex, "}")
}

// MESSAGE RtsWifiConnectRequest
type RtsWifiConnectRequest struct {
	WifiSsidHex string
	Password    string
	Timeout     uint8
	AuthType    uint8
	Hidden      bool
}

func (r *RtsWifiConnectRequest) Size() uint32 {
	var result uint32
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	result += 1                          // Password length (uint_8)
	result += uint32(len(r.Password))    // uint_8 array
	result += 1                          // Timeout uint_8
	result += 1                          // AuthType uint_8
	result += 1                          // Hidden bool
	return result
}

func (r *RtsWifiConnectRequest) Unpack(buf *bytes.Buffer) error {
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	var PasswordLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &PasswordLen); err != nil {
		return err
	}
	r.Password = string(buf.Next(int(PasswordLen)))
	if len(r.Password) != int(PasswordLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.Timeout); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.AuthType); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.Hidden); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiConnectRequest) Pack(buf *bytes.Buffer) error {
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	if len(r.Password) > 255 {
		return errors.New("max_length overflow in field Password")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.Password))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.Password); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.Timeout); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.AuthType); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.Hidden); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiConnectRequest) String() string {
	return fmt.Sprint("WifiSsidHex: {", r.WifiSsidHex, "} ",
		"Password: {", r.Password, "} ",
		"Timeout: {", r.Timeout, "} ",
		"AuthType: {", r.AuthType, "} ",
		"Hidden: {", r.Hidden, "}")
}

// MESSAGE RtsWifiConnectResponse
type RtsWifiConnectResponse struct {
	WifiSsidHex string
	WifiState   uint8
}

func (r *RtsWifiConnectResponse) Size() uint32 {
	var result uint32
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	result += 1                          // WifiState uint_8
	return result
}

func (r *RtsWifiConnectResponse) Unpack(buf *bytes.Buffer) error {
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.WifiState); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiConnectResponse) Pack(buf *bytes.Buffer) error {
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.WifiState); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiConnectResponse) String() string {
	return fmt.Sprint("WifiSsidHex: {", r.WifiSsidHex, "} ",
		"WifiState: {", r.WifiState, "}")
}

// MESSAGE RtsWifiConnectResponse_3
type RtsWifiConnectResponse3 = RtsWifiConnectResponse_3

type RtsWifiConnectResponse_3 struct {
	WifiSsidHex   string
	WifiState     uint8
	ConnectResult uint8
}

func (r *RtsWifiConnectResponse_3) Size() uint32 {
	var result uint32
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	result += 1                          // WifiState uint_8
	result += 1                          // ConnectResult uint_8
	return result
}

func (r *RtsWifiConnectResponse_3) Unpack(buf *bytes.Buffer) error {
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.WifiState); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.ConnectResult); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiConnectResponse_3) Pack(buf *bytes.Buffer) error {
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.WifiState); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.ConnectResult); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiConnectResponse_3) String() string {
	return fmt.Sprint("WifiSsidHex: {", r.WifiSsidHex, "} ",
		"WifiState: {", r.WifiState, "} ",
		"ConnectResult: {", r.ConnectResult, "}")
}

// MESSAGE RtsWifiIpRequest
type RtsWifiIpRequest struct {
}

func (r *RtsWifiIpRequest) Size() uint32 {
	return 0
}

func (r *RtsWifiIpRequest) Unpack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsWifiIpRequest) Pack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsWifiIpRequest) String() string {
	return ""
}

// MESSAGE RtsWifiIpResponse
type RtsWifiIpResponse struct {
	HasIpV4 uint8
	HasIpV6 uint8
	IpV4    [4]uint8
	IpV6    [16]uint8
}

func (r *RtsWifiIpResponse) Size() uint32 {
	var result uint32
	result += 1  // HasIpV4 uint_8
	result += 1  // HasIpV6 uint_8
	result += 4  // uint_8 array
	result += 16 // uint_8 array
	return result
}

func (r *RtsWifiIpResponse) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.HasIpV4); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.HasIpV6); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.IpV4); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.IpV6); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiIpResponse) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.HasIpV4); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.HasIpV6); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.IpV4); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.IpV6); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiIpResponse) String() string {
	return fmt.Sprint("HasIpV4: {", r.HasIpV4, "} ",
		"HasIpV6: {", r.HasIpV6, "} ",
		"IpV4: {", r.IpV4, "} ",
		"IpV6: {", r.IpV6, "}")
}

// MESSAGE RtsStatusRequest
type RtsStatusRequest struct {
}

func (r *RtsStatusRequest) Size() uint32 {
	return 0
}

func (r *RtsStatusRequest) Unpack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsStatusRequest) Pack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsStatusRequest) String() string {
	return ""
}

// MESSAGE RtsStatusResponse
type RtsStatusResponse struct {
	WifiSsidHex  string
	WifiState    uint8
	AccessPoint  bool
	BleState     uint8
	BatteryState uint8
}

func (r *RtsStatusResponse) Size() uint32 {
	var result uint32
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	result += 1                          // WifiState uint_8
	result += 1                          // AccessPoint bool
	result += 1                          // BleState uint_8
	result += 1                          // BatteryState uint_8
	return result
}

func (r *RtsStatusResponse) Unpack(buf *bytes.Buffer) error {
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.WifiState); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.AccessPoint); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.BleState); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.BatteryState); err != nil {
		return err
	}
	return nil
}

func (r *RtsStatusResponse) Pack(buf *bytes.Buffer) error {
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.WifiState); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.AccessPoint); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.BleState); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.BatteryState); err != nil {
		return err
	}
	return nil
}

func (r *RtsStatusResponse) String() string {
	return fmt.Sprint("WifiSsidHex: {", r.WifiSsidHex, "} ",
		"WifiState: {", r.WifiState, "} ",
		"AccessPoint: {", r.AccessPoint, "} ",
		"BleState: {", r.BleState, "} ",
		"BatteryState: {", r.BatteryState, "}")
}

// MESSAGE RtsStatusResponse_2
type RtsStatusResponse2 = RtsStatusResponse_2

type RtsStatusResponse_2 struct {
	WifiSsidHex   string
	WifiState     uint8
	AccessPoint   bool
	BleState      uint8
	BatteryState  uint8
	Version       string
	OtaInProgress bool
}

func (r *RtsStatusResponse_2) Size() uint32 {
	var result uint32
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	result += 1                          // WifiState uint_8
	result += 1                          // AccessPoint bool
	result += 1                          // BleState uint_8
	result += 1                          // BatteryState uint_8
	result += 1                          // Version length (uint_8)
	result += uint32(len(r.Version))     // uint_8 array
	result += 1                          // OtaInProgress bool
	return result
}

func (r *RtsStatusResponse_2) Unpack(buf *bytes.Buffer) error {
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.WifiState); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.AccessPoint); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.BleState); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.BatteryState); err != nil {
		return err
	}
	var VersionLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &VersionLen); err != nil {
		return err
	}
	r.Version = string(buf.Next(int(VersionLen)))
	if len(r.Version) != int(VersionLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.OtaInProgress); err != nil {
		return err
	}
	return nil
}

func (r *RtsStatusResponse_2) Pack(buf *bytes.Buffer) error {
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.WifiState); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.AccessPoint); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.BleState); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.BatteryState); err != nil {
		return err
	}
	if len(r.Version) > 255 {
		return errors.New("max_length overflow in field Version")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.Version))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.Version); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.OtaInProgress); err != nil {
		return err
	}
	return nil
}

func (r *RtsStatusResponse_2) String() string {
	return fmt.Sprint("WifiSsidHex: {", r.WifiSsidHex, "} ",
		"WifiState: {", r.WifiState, "} ",
		"AccessPoint: {", r.AccessPoint, "} ",
		"BleState: {", r.BleState, "} ",
		"BatteryState: {", r.BatteryState, "} ",
		"Version: {", r.Version, "} ",
		"OtaInProgress: {", r.OtaInProgress, "}")
}

// MESSAGE RtsStatusResponse_3
type RtsStatusResponse3 = RtsStatusResponse_3

type RtsStatusResponse_3 struct {
	WifiSsidHex   string
	WifiState     uint8
	AccessPoint   bool
	BleState      uint8
	BatteryState  uint8
	Version       string
	OtaInProgress bool
	HasOwner      bool
}

func (r *RtsStatusResponse_3) Size() uint32 {
	var result uint32
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	result += 1                          // WifiState uint_8
	result += 1                          // AccessPoint bool
	result += 1                          // BleState uint_8
	result += 1                          // BatteryState uint_8
	result += 1                          // Version length (uint_8)
	result += uint32(len(r.Version))     // uint_8 array
	result += 1                          // OtaInProgress bool
	result += 1                          // HasOwner bool
	return result
}

func (r *RtsStatusResponse_3) Unpack(buf *bytes.Buffer) error {
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.WifiState); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.AccessPoint); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.BleState); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.BatteryState); err != nil {
		return err
	}
	var VersionLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &VersionLen); err != nil {
		return err
	}
	r.Version = string(buf.Next(int(VersionLen)))
	if len(r.Version) != int(VersionLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.OtaInProgress); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.HasOwner); err != nil {
		return err
	}
	return nil
}

func (r *RtsStatusResponse_3) Pack(buf *bytes.Buffer) error {
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.WifiState); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.AccessPoint); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.BleState); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.BatteryState); err != nil {
		return err
	}
	if len(r.Version) > 255 {
		return errors.New("max_length overflow in field Version")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.Version))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.Version); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.OtaInProgress); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.HasOwner); err != nil {
		return err
	}
	return nil
}

func (r *RtsStatusResponse_3) String() string {
	return fmt.Sprint("WifiSsidHex: {", r.WifiSsidHex, "} ",
		"WifiState: {", r.WifiState, "} ",
		"AccessPoint: {", r.AccessPoint, "} ",
		"BleState: {", r.BleState, "} ",
		"BatteryState: {", r.BatteryState, "} ",
		"Version: {", r.Version, "} ",
		"OtaInProgress: {", r.OtaInProgress, "} ",
		"HasOwner: {", r.HasOwner, "}")
}

// MESSAGE RtsStatusResponse_4
type RtsStatusResponse4 = RtsStatusResponse_4

type RtsStatusResponse_4 struct {
	WifiSsidHex   string
	WifiState     uint8
	AccessPoint   bool
	BleState      uint8
	BatteryState  uint8
	Version       string
	Esn           string
	OtaInProgress bool
	HasOwner      bool
}

func (r *RtsStatusResponse_4) Size() uint32 {
	var result uint32
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	result += 1                          // WifiState uint_8
	result += 1                          // AccessPoint bool
	result += 1                          // BleState uint_8
	result += 1                          // BatteryState uint_8
	result += 1                          // Version length (uint_8)
	result += uint32(len(r.Version))     // uint_8 array
	result += 1                          // Esn length (uint_8)
	result += uint32(len(r.Esn))         // uint_8 array
	result += 1                          // OtaInProgress bool
	result += 1                          // HasOwner bool
	return result
}

func (r *RtsStatusResponse_4) Unpack(buf *bytes.Buffer) error {
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.WifiState); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.AccessPoint); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.BleState); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.BatteryState); err != nil {
		return err
	}
	var VersionLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &VersionLen); err != nil {
		return err
	}
	r.Version = string(buf.Next(int(VersionLen)))
	if len(r.Version) != int(VersionLen) {
		return errors.New("string byte mismatch")
	}
	var EsnLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &EsnLen); err != nil {
		return err
	}
	r.Esn = string(buf.Next(int(EsnLen)))
	if len(r.Esn) != int(EsnLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.OtaInProgress); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.HasOwner); err != nil {
		return err
	}
	return nil
}

func (r *RtsStatusResponse_4) Pack(buf *bytes.Buffer) error {
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.WifiState); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.AccessPoint); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.BleState); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.BatteryState); err != nil {
		return err
	}
	if len(r.Version) > 255 {
		return errors.New("max_length overflow in field Version")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.Version))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.Version); err != nil {
		return err
	}
	if len(r.Esn) > 255 {
		return errors.New("max_length overflow in field Esn")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.Esn))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.Esn); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.OtaInProgress); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.HasOwner); err != nil {
		return err
	}
	return nil
}

func (r *RtsStatusResponse_4) String() string {
	return fmt.Sprint("WifiSsidHex: {", r.WifiSsidHex, "} ",
		"WifiState: {", r.WifiState, "} ",
		"AccessPoint: {", r.AccessPoint, "} ",
		"BleState: {", r.BleState, "} ",
		"BatteryState: {", r.BatteryState, "} ",
		"Version: {", r.Version, "} ",
		"Esn: {", r.Esn, "} ",
		"OtaInProgress: {", r.OtaInProgress, "} ",
		"HasOwner: {", r.HasOwner, "}")
}

// MESSAGE RtsStatusResponse_5
type RtsStatusResponse5 = RtsStatusResponse_5

type RtsStatusResponse_5 struct {
	WifiSsidHex   string
	WifiState     uint8
	AccessPoint   bool
	BleState      uint8
	BatteryState  uint8
	Version       string
	Esn           string
	OtaInProgress bool
	HasOwner      bool
	IsCloudAuthed bool
}

func (r *RtsStatusResponse_5) Size() uint32 {
	var result uint32
	result += 1                          // WifiSsidHex length (uint_8)
	result += uint32(len(r.WifiSsidHex)) // uint_8 array
	result += 1                          // WifiState uint_8
	result += 1                          // AccessPoint bool
	result += 1                          // BleState uint_8
	result += 1                          // BatteryState uint_8
	result += 1                          // Version length (uint_8)
	result += uint32(len(r.Version))     // uint_8 array
	result += 1                          // Esn length (uint_8)
	result += uint32(len(r.Esn))         // uint_8 array
	result += 1                          // OtaInProgress bool
	result += 1                          // HasOwner bool
	result += 1                          // IsCloudAuthed bool
	return result
}

func (r *RtsStatusResponse_5) Unpack(buf *bytes.Buffer) error {
	var WifiSsidHexLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &WifiSsidHexLen); err != nil {
		return err
	}
	r.WifiSsidHex = string(buf.Next(int(WifiSsidHexLen)))
	if len(r.WifiSsidHex) != int(WifiSsidHexLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.WifiState); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.AccessPoint); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.BleState); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.BatteryState); err != nil {
		return err
	}
	var VersionLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &VersionLen); err != nil {
		return err
	}
	r.Version = string(buf.Next(int(VersionLen)))
	if len(r.Version) != int(VersionLen) {
		return errors.New("string byte mismatch")
	}
	var EsnLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &EsnLen); err != nil {
		return err
	}
	r.Esn = string(buf.Next(int(EsnLen)))
	if len(r.Esn) != int(EsnLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.OtaInProgress); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.HasOwner); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.IsCloudAuthed); err != nil {
		return err
	}
	return nil
}

func (r *RtsStatusResponse_5) Pack(buf *bytes.Buffer) error {
	if len(r.WifiSsidHex) > 255 {
		return errors.New("max_length overflow in field WifiSsidHex")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.WifiSsidHex))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.WifiSsidHex); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.WifiState); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.AccessPoint); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.BleState); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.BatteryState); err != nil {
		return err
	}
	if len(r.Version) > 255 {
		return errors.New("max_length overflow in field Version")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.Version))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.Version); err != nil {
		return err
	}
	if len(r.Esn) > 255 {
		return errors.New("max_length overflow in field Esn")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.Esn))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.Esn); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.OtaInProgress); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.HasOwner); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.IsCloudAuthed); err != nil {
		return err
	}
	return nil
}

func (r *RtsStatusResponse_5) String() string {
	return fmt.Sprint("WifiSsidHex: {", r.WifiSsidHex, "} ",
		"WifiState: {", r.WifiState, "} ",
		"AccessPoint: {", r.AccessPoint, "} ",
		"BleState: {", r.BleState, "} ",
		"BatteryState: {", r.BatteryState, "} ",
		"Version: {", r.Version, "} ",
		"Esn: {", r.Esn, "} ",
		"OtaInProgress: {", r.OtaInProgress, "} ",
		"HasOwner: {", r.HasOwner, "} ",
		"IsCloudAuthed: {", r.IsCloudAuthed, "}")
}

// MESSAGE RtsWifiScanRequest
type RtsWifiScanRequest struct {
}

func (r *RtsWifiScanRequest) Size() uint32 {
	return 0
}

func (r *RtsWifiScanRequest) Unpack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsWifiScanRequest) Pack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsWifiScanRequest) String() string {
	return ""
}

// MESSAGE RtsWifiScanResponse
type RtsWifiScanResponse struct {
	StatusCode uint8
	ScanResult []RtsWifiScanResult
}

func (r *RtsWifiScanResponse) Size() uint32 {
	var result uint32
	result += 1 // StatusCode uint_8
	result += 1 // ScanResult length (uint_8)
	for idx := range r.ScanResult {
		result += r.ScanResult[idx].Size()
	}
	return result
}

func (r *RtsWifiScanResponse) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.StatusCode); err != nil {
		return err
	}
	var ScanResultLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &ScanResultLen); err != nil {
		return err
	}
	r.ScanResult = make([]RtsWifiScanResult, ScanResultLen)
	for idx := range r.ScanResult {
		if err := r.ScanResult[idx].Unpack(buf); err != nil {
			return err
		}
	}
	return nil
}

func (r *RtsWifiScanResponse) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.StatusCode); err != nil {
		return err
	}
	if len(r.ScanResult) > 255 {
		return errors.New("max_length overflow in field ScanResult")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.ScanResult))); err != nil {
		return err
	}
	for idx := range r.ScanResult {
		if err := r.ScanResult[idx].Pack(buf); err != nil {
			return err
		}
	}
	return nil
}

func (r *RtsWifiScanResponse) String() string {
	return fmt.Sprint("StatusCode: {", r.StatusCode, "} ",
		"ScanResult: {", r.ScanResult, "}")
}

// MESSAGE RtsWifiScanResponse_2
type RtsWifiScanResponse2 = RtsWifiScanResponse_2

type RtsWifiScanResponse_2 struct {
	StatusCode uint8
	ScanResult []RtsWifiScanResult_2
}

func (r *RtsWifiScanResponse_2) Size() uint32 {
	var result uint32
	result += 1 // StatusCode uint_8
	result += 1 // ScanResult length (uint_8)
	for idx := range r.ScanResult {
		result += r.ScanResult[idx].Size()
	}
	return result
}

func (r *RtsWifiScanResponse_2) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.StatusCode); err != nil {
		return err
	}
	var ScanResultLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &ScanResultLen); err != nil {
		return err
	}
	r.ScanResult = make([]RtsWifiScanResult_2, ScanResultLen)
	for idx := range r.ScanResult {
		if err := r.ScanResult[idx].Unpack(buf); err != nil {
			return err
		}
	}
	return nil
}

func (r *RtsWifiScanResponse_2) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.StatusCode); err != nil {
		return err
	}
	if len(r.ScanResult) > 255 {
		return errors.New("max_length overflow in field ScanResult")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.ScanResult))); err != nil {
		return err
	}
	for idx := range r.ScanResult {
		if err := r.ScanResult[idx].Pack(buf); err != nil {
			return err
		}
	}
	return nil
}

func (r *RtsWifiScanResponse_2) String() string {
	return fmt.Sprint("StatusCode: {", r.StatusCode, "} ",
		"ScanResult: {", r.ScanResult, "}")
}

// MESSAGE RtsWifiScanResponse_3
type RtsWifiScanResponse3 = RtsWifiScanResponse_3

type RtsWifiScanResponse_3 struct {
	StatusCode uint8
	ScanResult []RtsWifiScanResult_3
}

func (r *RtsWifiScanResponse_3) Size() uint32 {
	var result uint32
	result += 1 // StatusCode uint_8
	result += 1 // ScanResult length (uint_8)
	for idx := range r.ScanResult {
		result += r.ScanResult[idx].Size()
	}
	return result
}

func (r *RtsWifiScanResponse_3) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.StatusCode); err != nil {
		return err
	}
	var ScanResultLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &ScanResultLen); err != nil {
		return err
	}
	r.ScanResult = make([]RtsWifiScanResult_3, ScanResultLen)
	for idx := range r.ScanResult {
		if err := r.ScanResult[idx].Unpack(buf); err != nil {
			return err
		}
	}
	return nil
}

func (r *RtsWifiScanResponse_3) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.StatusCode); err != nil {
		return err
	}
	if len(r.ScanResult) > 255 {
		return errors.New("max_length overflow in field ScanResult")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.ScanResult))); err != nil {
		return err
	}
	for idx := range r.ScanResult {
		if err := r.ScanResult[idx].Pack(buf); err != nil {
			return err
		}
	}
	return nil
}

func (r *RtsWifiScanResponse_3) String() string {
	return fmt.Sprint("StatusCode: {", r.StatusCode, "} ",
		"ScanResult: {", r.ScanResult, "}")
}

// MESSAGE RtsOtaUpdateRequest
type RtsOtaUpdateRequest struct {
	Url string
}

func (r *RtsOtaUpdateRequest) Size() uint32 {
	var result uint32
	result += 1                  // Url length (uint_8)
	result += uint32(len(r.Url)) // uint_8 array
	return result
}

func (r *RtsOtaUpdateRequest) Unpack(buf *bytes.Buffer) error {
	var UrlLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &UrlLen); err != nil {
		return err
	}
	r.Url = string(buf.Next(int(UrlLen)))
	if len(r.Url) != int(UrlLen) {
		return errors.New("string byte mismatch")
	}
	return nil
}

func (r *RtsOtaUpdateRequest) Pack(buf *bytes.Buffer) error {
	if len(r.Url) > 255 {
		return errors.New("max_length overflow in field Url")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.Url))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.Url); err != nil {
		return err
	}
	return nil
}

func (r *RtsOtaUpdateRequest) String() string {
	return fmt.Sprint("Url: {", r.Url, "}")
}

// MESSAGE RtsOtaCancelRequest
type RtsOtaCancelRequest struct {
}

func (r *RtsOtaCancelRequest) Size() uint32 {
	return 0
}

func (r *RtsOtaCancelRequest) Unpack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsOtaCancelRequest) Pack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsOtaCancelRequest) String() string {
	return ""
}

// MESSAGE RtsOtaUpdateResponse
type RtsOtaUpdateResponse struct {
	Status   uint8
	Current  uint64
	Expected uint64
}

func (r *RtsOtaUpdateResponse) Size() uint32 {
	var result uint32
	result += 1 // Status uint_8
	result += 8 // Current uint_64
	result += 8 // Expected uint_64
	return result
}

func (r *RtsOtaUpdateResponse) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.Status); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.Current); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.Expected); err != nil {
		return err
	}
	return nil
}

func (r *RtsOtaUpdateResponse) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.Status); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.Current); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.Expected); err != nil {
		return err
	}
	return nil
}

func (r *RtsOtaUpdateResponse) String() string {
	return fmt.Sprint("Status: {", r.Status, "} ",
		"Current: {", r.Current, "} ",
		"Expected: {", r.Expected, "}")
}

// MESSAGE RtsWifiAccessPointRequest
type RtsWifiAccessPointRequest struct {
	Enable bool
}

func (r *RtsWifiAccessPointRequest) Size() uint32 {
	var result uint32
	result += 1 // Enable bool
	return result
}

func (r *RtsWifiAccessPointRequest) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.Enable); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiAccessPointRequest) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.Enable); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiAccessPointRequest) String() string {
	return fmt.Sprint("Enable: {", r.Enable, "}")
}

// MESSAGE RtsWifiAccessPointResponse
type RtsWifiAccessPointResponse struct {
	Enabled  bool
	Ssid     string
	Password string
}

func (r *RtsWifiAccessPointResponse) Size() uint32 {
	var result uint32
	result += 1                       // Enabled bool
	result += 1                       // Ssid length (uint_8)
	result += uint32(len(r.Ssid))     // uint_8 array
	result += 1                       // Password length (uint_8)
	result += uint32(len(r.Password)) // uint_8 array
	return result
}

func (r *RtsWifiAccessPointResponse) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.Enabled); err != nil {
		return err
	}
	var SsidLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &SsidLen); err != nil {
		return err
	}
	r.Ssid = string(buf.Next(int(SsidLen)))
	if len(r.Ssid) != int(SsidLen) {
		return errors.New("string byte mismatch")
	}
	var PasswordLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &PasswordLen); err != nil {
		return err
	}
	r.Password = string(buf.Next(int(PasswordLen)))
	if len(r.Password) != int(PasswordLen) {
		return errors.New("string byte mismatch")
	}
	return nil
}

func (r *RtsWifiAccessPointResponse) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.Enabled); err != nil {
		return err
	}
	if len(r.Ssid) > 255 {
		return errors.New("max_length overflow in field Ssid")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.Ssid))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.Ssid); err != nil {
		return err
	}
	if len(r.Password) > 255 {
		return errors.New("max_length overflow in field Password")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.Password))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.Password); err != nil {
		return err
	}
	return nil
}

func (r *RtsWifiAccessPointResponse) String() string {
	return fmt.Sprint("Enabled: {", r.Enabled, "} ",
		"Ssid: {", r.Ssid, "} ",
		"Password: {", r.Password, "}")
}

// MESSAGE RtsCancelPairing
type RtsCancelPairing struct {
}

func (r *RtsCancelPairing) Size() uint32 {
	return 0
}

func (r *RtsCancelPairing) Unpack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsCancelPairing) Pack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsCancelPairing) String() string {
	return ""
}

// MESSAGE RtsForceDisconnect
type RtsForceDisconnect struct {
}

func (r *RtsForceDisconnect) Size() uint32 {
	return 0
}

func (r *RtsForceDisconnect) Unpack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsForceDisconnect) Pack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsForceDisconnect) String() string {
	return ""
}

// MESSAGE RtsSshRequest
type RtsSshRequest struct {
	SshAuthorizedKeyBytes []string
}

func (r *RtsSshRequest) Size() uint32 {
	var result uint32
	result += 2 // SshAuthorizedKeyBytes length (uint_16)
	for idx := range r.SshAuthorizedKeyBytes {
		result += 1                                         // SshAuthorizedKeyBytes[idx] length (uint_8)
		result += uint32(len(r.SshAuthorizedKeyBytes[idx])) // uint_8 array
	}
	return result
}

func (r *RtsSshRequest) Unpack(buf *bytes.Buffer) error {
	var SshAuthorizedKeyBytesLen uint16
	if err := binary.Read(buf, binary.LittleEndian, &SshAuthorizedKeyBytesLen); err != nil {
		return err
	}
	r.SshAuthorizedKeyBytes = make([]string, SshAuthorizedKeyBytesLen)
	for idx := range r.SshAuthorizedKeyBytes {
		var SshAuthorizedKeyBytesidxLen uint8
		if err := binary.Read(buf, binary.LittleEndian, &SshAuthorizedKeyBytesidxLen); err != nil {
			return err
		}
		r.SshAuthorizedKeyBytes[idx] = string(buf.Next(int(SshAuthorizedKeyBytesidxLen)))
		if len(r.SshAuthorizedKeyBytes[idx]) != int(SshAuthorizedKeyBytesidxLen) {
			return errors.New("string byte mismatch")
		}
	}
	return nil
}

func (r *RtsSshRequest) Pack(buf *bytes.Buffer) error {
	if len(r.SshAuthorizedKeyBytes) > 65535 {
		return errors.New("max_length overflow in field SshAuthorizedKeyBytes")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint16(len(r.SshAuthorizedKeyBytes))); err != nil {
		return err
	}
	for idx := range r.SshAuthorizedKeyBytes {
		if len(r.SshAuthorizedKeyBytes[idx]) > 255 {
			return errors.New("max_length overflow in field SshAuthorizedKeyBytes[idx]")
		}
		if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.SshAuthorizedKeyBytes[idx]))); err != nil {
			return err
		}
		if _, err := buf.WriteString(r.SshAuthorizedKeyBytes[idx]); err != nil {
			return err
		}
	}
	return nil
}

func (r *RtsSshRequest) String() string {
	return fmt.Sprint("SshAuthorizedKeyBytes: {", r.SshAuthorizedKeyBytes, "}")
}

// MESSAGE RtsSshResponse
type RtsSshResponse struct {
}

func (r *RtsSshResponse) Size() uint32 {
	return 0
}

func (r *RtsSshResponse) Unpack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsSshResponse) Pack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsSshResponse) String() string {
	return ""
}

// MESSAGE RtsLogRequest
type RtsLogRequest struct {
	Mode   uint8
	Filter []string
}

func (r *RtsLogRequest) Size() uint32 {
	var result uint32
	result += 1 // Mode uint_8
	result += 2 // Filter length (uint_16)
	for idx := range r.Filter {
		result += 1                          // Filter[idx] length (uint_8)
		result += uint32(len(r.Filter[idx])) // uint_8 array
	}
	return result
}

func (r *RtsLogRequest) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.Mode); err != nil {
		return err
	}
	var FilterLen uint16
	if err := binary.Read(buf, binary.LittleEndian, &FilterLen); err != nil {
		return err
	}
	r.Filter = make([]string, FilterLen)
	for idx := range r.Filter {
		var FilteridxLen uint8
		if err := binary.Read(buf, binary.LittleEndian, &FilteridxLen); err != nil {
			return err
		}
		r.Filter[idx] = string(buf.Next(int(FilteridxLen)))
		if len(r.Filter[idx]) != int(FilteridxLen) {
			return errors.New("string byte mismatch")
		}
	}
	return nil
}

func (r *RtsLogRequest) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.Mode); err != nil {
		return err
	}
	if len(r.Filter) > 65535 {
		return errors.New("max_length overflow in field Filter")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint16(len(r.Filter))); err != nil {
		return err
	}
	for idx := range r.Filter {
		if len(r.Filter[idx]) > 255 {
			return errors.New("max_length overflow in field Filter[idx]")
		}
		if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.Filter[idx]))); err != nil {
			return err
		}
		if _, err := buf.WriteString(r.Filter[idx]); err != nil {
			return err
		}
	}
	return nil
}

func (r *RtsLogRequest) String() string {
	return fmt.Sprint("Mode: {", r.Mode, "} ",
		"Filter: {", r.Filter, "}")
}

// MESSAGE RtsLogResponse
type RtsLogResponse struct {
	ExitCode uint8
	FileId   uint32
}

func (r *RtsLogResponse) Size() uint32 {
	var result uint32
	result += 1 // ExitCode uint_8
	result += 4 // FileId uint_32
	return result
}

func (r *RtsLogResponse) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.ExitCode); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.FileId); err != nil {
		return err
	}
	return nil
}

func (r *RtsLogResponse) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.ExitCode); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.FileId); err != nil {
		return err
	}
	return nil
}

func (r *RtsLogResponse) String() string {
	return fmt.Sprint("ExitCode: {", r.ExitCode, "} ",
		"FileId: {", r.FileId, "}")
}

// MESSAGE RtsFileDownload
type RtsFileDownload struct {
	Status       uint8
	FileId       uint32
	PacketNumber uint32
	PacketTotal  uint32
	FileChunk    []uint8
}

func (r *RtsFileDownload) Size() uint32 {
	var result uint32
	result += 1                        // Status uint_8
	result += 4                        // FileId uint_32
	result += 4                        // PacketNumber uint_32
	result += 4                        // PacketTotal uint_32
	result += 2                        // FileChunk length (uint_16)
	result += uint32(len(r.FileChunk)) // uint_8 array
	return result
}

func (r *RtsFileDownload) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.Status); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.FileId); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.PacketNumber); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.PacketTotal); err != nil {
		return err
	}
	var FileChunkLen uint16
	if err := binary.Read(buf, binary.LittleEndian, &FileChunkLen); err != nil {
		return err
	}
	r.FileChunk = make([]uint8, FileChunkLen)
	if err := binary.Read(buf, binary.LittleEndian, &r.FileChunk); err != nil {
		return err
	}
	return nil
}

func (r *RtsFileDownload) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.Status); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.FileId); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.PacketNumber); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.PacketTotal); err != nil {
		return err
	}
	if len(r.FileChunk) > 65535 {
		return errors.New("max_length overflow in field FileChunk")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint16(len(r.FileChunk))); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.FileChunk); err != nil {
		return err
	}
	return nil
}

func (r *RtsFileDownload) String() string {
	return fmt.Sprint("Status: {", r.Status, "} ",
		"FileId: {", r.FileId, "} ",
		"PacketNumber: {", r.PacketNumber, "} ",
		"PacketTotal: {", r.PacketTotal, "} ",
		"FileChunk: {", r.FileChunk, "}")
}

// MESSAGE RtsCloudSessionRequest
type RtsCloudSessionRequest struct {
	SessionToken string
}

func (r *RtsCloudSessionRequest) Size() uint32 {
	var result uint32
	result += 2                           // SessionToken length (uint_16)
	result += uint32(len(r.SessionToken)) // uint_8 array
	return result
}

func (r *RtsCloudSessionRequest) Unpack(buf *bytes.Buffer) error {
	var SessionTokenLen uint16
	if err := binary.Read(buf, binary.LittleEndian, &SessionTokenLen); err != nil {
		return err
	}
	r.SessionToken = string(buf.Next(int(SessionTokenLen)))
	if len(r.SessionToken) != int(SessionTokenLen) {
		return errors.New("string byte mismatch")
	}
	return nil
}

func (r *RtsCloudSessionRequest) Pack(buf *bytes.Buffer) error {
	if len(r.SessionToken) > 65535 {
		return errors.New("max_length overflow in field SessionToken")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint16(len(r.SessionToken))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.SessionToken); err != nil {
		return err
	}
	return nil
}

func (r *RtsCloudSessionRequest) String() string {
	return fmt.Sprint("SessionToken: {", r.SessionToken, "}")
}

// MESSAGE RtsCloudSessionRequest_5
type RtsCloudSessionRequest5 = RtsCloudSessionRequest_5

type RtsCloudSessionRequest_5 struct {
	SessionToken string
	ClientName   string
	AppId        string
}

func (r *RtsCloudSessionRequest_5) Size() uint32 {
	var result uint32
	result += 2                           // SessionToken length (uint_16)
	result += uint32(len(r.SessionToken)) // uint_8 array
	result += 1                           // ClientName length (uint_8)
	result += uint32(len(r.ClientName))   // uint_8 array
	result += 1                           // AppId length (uint_8)
	result += uint32(len(r.AppId))        // uint_8 array
	return result
}

func (r *RtsCloudSessionRequest_5) Unpack(buf *bytes.Buffer) error {
	var SessionTokenLen uint16
	if err := binary.Read(buf, binary.LittleEndian, &SessionTokenLen); err != nil {
		return err
	}
	r.SessionToken = string(buf.Next(int(SessionTokenLen)))
	if len(r.SessionToken) != int(SessionTokenLen) {
		return errors.New("string byte mismatch")
	}
	var ClientNameLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &ClientNameLen); err != nil {
		return err
	}
	r.ClientName = string(buf.Next(int(ClientNameLen)))
	if len(r.ClientName) != int(ClientNameLen) {
		return errors.New("string byte mismatch")
	}
	var AppIdLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &AppIdLen); err != nil {
		return err
	}
	r.AppId = string(buf.Next(int(AppIdLen)))
	if len(r.AppId) != int(AppIdLen) {
		return errors.New("string byte mismatch")
	}
	return nil
}

func (r *RtsCloudSessionRequest_5) Pack(buf *bytes.Buffer) error {
	if len(r.SessionToken) > 65535 {
		return errors.New("max_length overflow in field SessionToken")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint16(len(r.SessionToken))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.SessionToken); err != nil {
		return err
	}
	if len(r.ClientName) > 255 {
		return errors.New("max_length overflow in field ClientName")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.ClientName))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.ClientName); err != nil {
		return err
	}
	if len(r.AppId) > 255 {
		return errors.New("max_length overflow in field AppId")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.AppId))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.AppId); err != nil {
		return err
	}
	return nil
}

func (r *RtsCloudSessionRequest_5) String() string {
	return fmt.Sprint("SessionToken: {", r.SessionToken, "} ",
		"ClientName: {", r.ClientName, "} ",
		"AppId: {", r.AppId, "}")
}

// MESSAGE RtsCloudSessionResponse
type RtsCloudSessionResponse struct {
	Success         bool
	StatusCode      RtsCloudStatus
	ClientTokenGuid string
}

func (r *RtsCloudSessionResponse) Size() uint32 {
	var result uint32
	result += 1                              // Success bool
	result += 1                              // StatusCode RtsCloudStatus
	result += 2                              // ClientTokenGuid length (uint_16)
	result += uint32(len(r.ClientTokenGuid)) // uint_8 array
	return result
}

func (r *RtsCloudSessionResponse) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.Success); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.StatusCode); err != nil {
		return err
	}
	var ClientTokenGuidLen uint16
	if err := binary.Read(buf, binary.LittleEndian, &ClientTokenGuidLen); err != nil {
		return err
	}
	r.ClientTokenGuid = string(buf.Next(int(ClientTokenGuidLen)))
	if len(r.ClientTokenGuid) != int(ClientTokenGuidLen) {
		return errors.New("string byte mismatch")
	}
	return nil
}

func (r *RtsCloudSessionResponse) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.Success); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.StatusCode); err != nil {
		return err
	}
	if len(r.ClientTokenGuid) > 65535 {
		return errors.New("max_length overflow in field ClientTokenGuid")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint16(len(r.ClientTokenGuid))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.ClientTokenGuid); err != nil {
		return err
	}
	return nil
}

func (r *RtsCloudSessionResponse) String() string {
	return fmt.Sprint("Success: {", r.Success, "} ",
		"StatusCode: {", r.StatusCode, "} ",
		"ClientTokenGuid: {", r.ClientTokenGuid, "}")
}

// MESSAGE RtsAppConnectionIdRequest
type RtsAppConnectionIdRequest struct {
	ConnectionId string
}

func (r *RtsAppConnectionIdRequest) Size() uint32 {
	var result uint32
	result += 2                           // ConnectionId length (uint_16)
	result += uint32(len(r.ConnectionId)) // uint_8 array
	return result
}

func (r *RtsAppConnectionIdRequest) Unpack(buf *bytes.Buffer) error {
	var ConnectionIdLen uint16
	if err := binary.Read(buf, binary.LittleEndian, &ConnectionIdLen); err != nil {
		return err
	}
	r.ConnectionId = string(buf.Next(int(ConnectionIdLen)))
	if len(r.ConnectionId) != int(ConnectionIdLen) {
		return errors.New("string byte mismatch")
	}
	return nil
}

func (r *RtsAppConnectionIdRequest) Pack(buf *bytes.Buffer) error {
	if len(r.ConnectionId) > 65535 {
		return errors.New("max_length overflow in field ConnectionId")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint16(len(r.ConnectionId))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.ConnectionId); err != nil {
		return err
	}
	return nil
}

func (r *RtsAppConnectionIdRequest) String() string {
	return fmt.Sprint("ConnectionId: {", r.ConnectionId, "}")
}

// MESSAGE RtsAppConnectionIdResponse
type RtsAppConnectionIdResponse struct {
}

func (r *RtsAppConnectionIdResponse) Size() uint32 {
	return 0
}

func (r *RtsAppConnectionIdResponse) Unpack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsAppConnectionIdResponse) Pack(buf *bytes.Buffer) error {
	return nil
}

func (r *RtsAppConnectionIdResponse) String() string {
	return ""
}

// MESSAGE RtsResponse
type RtsResponse struct {
	Code            RtsResponseCode
	ResponseMessage string
}

func (r *RtsResponse) Size() uint32 {
	var result uint32
	result += 2                              // Code RtsResponseCode
	result += 2                              // ResponseMessage length (uint_16)
	result += uint32(len(r.ResponseMessage)) // uint_8 array
	return result
}

func (r *RtsResponse) Unpack(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &r.Code); err != nil {
		return err
	}
	var ResponseMessageLen uint16
	if err := binary.Read(buf, binary.LittleEndian, &ResponseMessageLen); err != nil {
		return err
	}
	r.ResponseMessage = string(buf.Next(int(ResponseMessageLen)))
	if len(r.ResponseMessage) != int(ResponseMessageLen) {
		return errors.New("string byte mismatch")
	}
	return nil
}

func (r *RtsResponse) Pack(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, r.Code); err != nil {
		return err
	}
	if len(r.ResponseMessage) > 65535 {
		return errors.New("max_length overflow in field ResponseMessage")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint16(len(r.ResponseMessage))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.ResponseMessage); err != nil {
		return err
	}
	return nil
}

func (r *RtsResponse) String() string {
	return fmt.Sprint("Code: {", r.Code, "} ",
		"ResponseMessage: {", r.ResponseMessage, "}")
}

// MESSAGE RtsSdkProxyRequest
type RtsSdkProxyRequest struct {
	ClientGuid string
	MessageId  string
	UrlPath    string
	Json       string
}

func (r *RtsSdkProxyRequest) Size() uint32 {
	var result uint32
	result += 1                         // ClientGuid length (uint_8)
	result += uint32(len(r.ClientGuid)) // uint_8 array
	result += 1                         // MessageId length (uint_8)
	result += uint32(len(r.MessageId))  // uint_8 array
	result += 1                         // UrlPath length (uint_8)
	result += uint32(len(r.UrlPath))    // uint_8 array
	result += 2                         // Json length (uint_16)
	result += uint32(len(r.Json))       // uint_8 array
	return result
}

func (r *RtsSdkProxyRequest) Unpack(buf *bytes.Buffer) error {
	var ClientGuidLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &ClientGuidLen); err != nil {
		return err
	}
	r.ClientGuid = string(buf.Next(int(ClientGuidLen)))
	if len(r.ClientGuid) != int(ClientGuidLen) {
		return errors.New("string byte mismatch")
	}
	var MessageIdLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &MessageIdLen); err != nil {
		return err
	}
	r.MessageId = string(buf.Next(int(MessageIdLen)))
	if len(r.MessageId) != int(MessageIdLen) {
		return errors.New("string byte mismatch")
	}
	var UrlPathLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &UrlPathLen); err != nil {
		return err
	}
	r.UrlPath = string(buf.Next(int(UrlPathLen)))
	if len(r.UrlPath) != int(UrlPathLen) {
		return errors.New("string byte mismatch")
	}
	var JsonLen uint16
	if err := binary.Read(buf, binary.LittleEndian, &JsonLen); err != nil {
		return err
	}
	r.Json = string(buf.Next(int(JsonLen)))
	if len(r.Json) != int(JsonLen) {
		return errors.New("string byte mismatch")
	}
	return nil
}

func (r *RtsSdkProxyRequest) Pack(buf *bytes.Buffer) error {
	if len(r.ClientGuid) > 255 {
		return errors.New("max_length overflow in field ClientGuid")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.ClientGuid))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.ClientGuid); err != nil {
		return err
	}
	if len(r.MessageId) > 255 {
		return errors.New("max_length overflow in field MessageId")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.MessageId))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.MessageId); err != nil {
		return err
	}
	if len(r.UrlPath) > 255 {
		return errors.New("max_length overflow in field UrlPath")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.UrlPath))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.UrlPath); err != nil {
		return err
	}
	if len(r.Json) > 65535 {
		return errors.New("max_length overflow in field Json")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint16(len(r.Json))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.Json); err != nil {
		return err
	}
	return nil
}

func (r *RtsSdkProxyRequest) String() string {
	return fmt.Sprint("ClientGuid: {", r.ClientGuid, "} ",
		"MessageId: {", r.MessageId, "} ",
		"UrlPath: {", r.UrlPath, "} ",
		"Json: {", r.Json, "}")
}

// MESSAGE RtsSdkProxyResponse
type RtsSdkProxyResponse struct {
	MessageId    string
	StatusCode   uint16
	ResponseType string
	ResponseBody string
}

func (r *RtsSdkProxyResponse) Size() uint32 {
	var result uint32
	result += 1                           // MessageId length (uint_8)
	result += uint32(len(r.MessageId))    // uint_8 array
	result += 2                           // StatusCode uint_16
	result += 1                           // ResponseType length (uint_8)
	result += uint32(len(r.ResponseType)) // uint_8 array
	result += 2                           // ResponseBody length (uint_16)
	result += uint32(len(r.ResponseBody)) // uint_8 array
	return result
}

func (r *RtsSdkProxyResponse) Unpack(buf *bytes.Buffer) error {
	var MessageIdLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &MessageIdLen); err != nil {
		return err
	}
	r.MessageId = string(buf.Next(int(MessageIdLen)))
	if len(r.MessageId) != int(MessageIdLen) {
		return errors.New("string byte mismatch")
	}
	if err := binary.Read(buf, binary.LittleEndian, &r.StatusCode); err != nil {
		return err
	}
	var ResponseTypeLen uint8
	if err := binary.Read(buf, binary.LittleEndian, &ResponseTypeLen); err != nil {
		return err
	}
	r.ResponseType = string(buf.Next(int(ResponseTypeLen)))
	if len(r.ResponseType) != int(ResponseTypeLen) {
		return errors.New("string byte mismatch")
	}
	var ResponseBodyLen uint16
	if err := binary.Read(buf, binary.LittleEndian, &ResponseBodyLen); err != nil {
		return err
	}
	r.ResponseBody = string(buf.Next(int(ResponseBodyLen)))
	if len(r.ResponseBody) != int(ResponseBodyLen) {
		return errors.New("string byte mismatch")
	}
	return nil
}

func (r *RtsSdkProxyResponse) Pack(buf *bytes.Buffer) error {
	if len(r.MessageId) > 255 {
		return errors.New("max_length overflow in field MessageId")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.MessageId))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.MessageId); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, r.StatusCode); err != nil {
		return err
	}
	if len(r.ResponseType) > 255 {
		return errors.New("max_length overflow in field ResponseType")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint8(len(r.ResponseType))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.ResponseType); err != nil {
		return err
	}
	if len(r.ResponseBody) > 65535 {
		return errors.New("max_length overflow in field ResponseBody")
	}
	if err := binary.Write(buf, binary.LittleEndian, uint16(len(r.ResponseBody))); err != nil {
		return err
	}
	if _, err := buf.WriteString(r.ResponseBody); err != nil {
		return err
	}
	return nil
}

func (r *RtsSdkProxyResponse) String() string {
	return fmt.Sprint("MessageId: {", r.MessageId, "} ",
		"StatusCode: {", r.StatusCode, "} ",
		"ResponseType: {", r.ResponseType, "} ",
		"ResponseBody: {", r.ResponseBody, "}")
}

// MESSAGE Error
type Error struct {
}

func (e *Error) Size() uint32 {
	return 0
}

func (e *Error) Unpack(buf *bytes.Buffer) error {
	return nil
}

func (e *Error) Pack(buf *bytes.Buffer) error {
	return nil
}

func (e *Error) String() string {
	return ""
}

// UNION RtsConnection_2
type RtsConnection_2Tag uint8

const (
	RtsConnection_2Tag_Error                      RtsConnection_2Tag = 0x0  // 0
	RtsConnection_2Tag_RtsConnRequest             RtsConnection_2Tag = 0x1  // 1
	RtsConnection_2Tag_RtsConnResponse            RtsConnection_2Tag = 0x2  // 2
	RtsConnection_2Tag_RtsNonceMessage            RtsConnection_2Tag = 0x3  // 3
	RtsConnection_2Tag_RtsChallengeMessage        RtsConnection_2Tag = 0x4  // 4
	RtsConnection_2Tag_RtsChallengeSuccessMessage RtsConnection_2Tag = 0x5  // 5
	RtsConnection_2Tag_RtsWifiConnectRequest      RtsConnection_2Tag = 0x6  // 6
	RtsConnection_2Tag_RtsWifiConnectResponse     RtsConnection_2Tag = 0x7  // 7
	RtsConnection_2Tag_RtsWifiIpRequest           RtsConnection_2Tag = 0x8  // 8
	RtsConnection_2Tag_RtsWifiIpResponse          RtsConnection_2Tag = 0x9  // 9
	RtsConnection_2Tag_RtsStatusRequest           RtsConnection_2Tag = 0xa  // 10
	RtsConnection_2Tag_RtsStatusResponse2         RtsConnection_2Tag = 0xb  // 11
	RtsConnection_2Tag_RtsWifiScanRequest         RtsConnection_2Tag = 0xc  // 12
	RtsConnection_2Tag_RtsWifiScanResponse2       RtsConnection_2Tag = 0xd  // 13
	RtsConnection_2Tag_RtsOtaUpdateRequest        RtsConnection_2Tag = 0xe  // 14
	RtsConnection_2Tag_RtsOtaUpdateResponse       RtsConnection_2Tag = 0xf  // 15
	RtsConnection_2Tag_RtsCancelPairing           RtsConnection_2Tag = 0x10 // 16
	RtsConnection_2Tag_RtsForceDisconnect         RtsConnection_2Tag = 0x11 // 17
	RtsConnection_2Tag_RtsAck                     RtsConnection_2Tag = 0x12 // 18
	RtsConnection_2Tag_RtsWifiAccessPointRequest  RtsConnection_2Tag = 0x13 // 19
	RtsConnection_2Tag_RtsWifiAccessPointResponse RtsConnection_2Tag = 0x14 // 20
	RtsConnection_2Tag_RtsSshRequest              RtsConnection_2Tag = 0x15 // 21
	RtsConnection_2Tag_RtsSshResponse             RtsConnection_2Tag = 0x16 // 22
	RtsConnection_2Tag_RtsOtaCancelRequest        RtsConnection_2Tag = 0x17 // 23
	RtsConnection_2Tag_RtsLogRequest              RtsConnection_2Tag = 0x18 // 24
	RtsConnection_2Tag_RtsLogResponse             RtsConnection_2Tag = 0x19 // 25
	RtsConnection_2Tag_RtsFileDownload            RtsConnection_2Tag = 0x1a // 26
	RtsConnection_2Tag_INVALID                    RtsConnection_2Tag = 255
)

type RtsConnection_2 struct {
	tag   *RtsConnection_2Tag
	value clad.Struct
}

func (m *RtsConnection_2) Tag() RtsConnection_2Tag {
	if m.tag == nil {
		return RtsConnection_2Tag_INVALID
	}
	return *m.tag
}

func (m *RtsConnection_2) Size() uint32 {
	if m.tag == nil || *m.tag == RtsConnection_2Tag_INVALID {
		return 1
	}
	return 1 + m.value.Size()
}

func (m *RtsConnection_2) Pack(buf *bytes.Buffer) error {
	tag := RtsConnection_2Tag_INVALID
	if m.tag != nil {
		tag = *m.tag
	}
	if err := binary.Write(buf, binary.LittleEndian, tag); err != nil {
		return err
	}
	if tag == RtsConnection_2Tag_INVALID {
		return nil
	}
	return m.value.Pack(buf)
}

func (m *RtsConnection_2) unpackStruct(tag RtsConnection_2Tag, buf *bytes.Buffer) (clad.Struct, error) {
	switch tag {
	case RtsConnection_2Tag_Error:
		var ret Error
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsConnRequest:
		var ret RtsConnRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsConnResponse:
		var ret RtsConnResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsNonceMessage:
		var ret RtsNonceMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsChallengeMessage:
		var ret RtsChallengeMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsChallengeSuccessMessage:
		var ret RtsChallengeSuccessMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsWifiConnectRequest:
		var ret RtsWifiConnectRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsWifiConnectResponse:
		var ret RtsWifiConnectResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsWifiIpRequest:
		var ret RtsWifiIpRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsWifiIpResponse:
		var ret RtsWifiIpResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsStatusRequest:
		var ret RtsStatusRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsStatusResponse2:
		var ret RtsStatusResponse_2
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsWifiScanRequest:
		var ret RtsWifiScanRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsWifiScanResponse2:
		var ret RtsWifiScanResponse_2
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsOtaUpdateRequest:
		var ret RtsOtaUpdateRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsOtaUpdateResponse:
		var ret RtsOtaUpdateResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsCancelPairing:
		var ret RtsCancelPairing
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsForceDisconnect:
		var ret RtsForceDisconnect
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsAck:
		var ret RtsAck
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsWifiAccessPointRequest:
		var ret RtsWifiAccessPointRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsWifiAccessPointResponse:
		var ret RtsWifiAccessPointResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsSshRequest:
		var ret RtsSshRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsSshResponse:
		var ret RtsSshResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsOtaCancelRequest:
		var ret RtsOtaCancelRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsLogRequest:
		var ret RtsLogRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsLogResponse:
		var ret RtsLogResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_2Tag_RtsFileDownload:
		var ret RtsFileDownload
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	default:
		return nil, errors.New("invalid tag to unpackStruct")
	}
}

func (m *RtsConnection_2) Unpack(buf *bytes.Buffer) error {
	tag := RtsConnection_2Tag_INVALID
	if err := binary.Read(buf, binary.LittleEndian, &tag); err != nil {
		return err
	}
	m.tag = &tag
	if tag == RtsConnection_2Tag_INVALID {
		m.value = nil
		return nil
	}
	val, err := m.unpackStruct(tag, buf)
	if err != nil {
		*m.tag = RtsConnection_2Tag_INVALID
		return err
	}
	m.value = val
	return nil
}

func (t RtsConnection_2Tag) String() string {
	switch t {
	case RtsConnection_2Tag_Error:
		return "Error"
	case RtsConnection_2Tag_RtsConnRequest:
		return "RtsConnRequest"
	case RtsConnection_2Tag_RtsConnResponse:
		return "RtsConnResponse"
	case RtsConnection_2Tag_RtsNonceMessage:
		return "RtsNonceMessage"
	case RtsConnection_2Tag_RtsChallengeMessage:
		return "RtsChallengeMessage"
	case RtsConnection_2Tag_RtsChallengeSuccessMessage:
		return "RtsChallengeSuccessMessage"
	case RtsConnection_2Tag_RtsWifiConnectRequest:
		return "RtsWifiConnectRequest"
	case RtsConnection_2Tag_RtsWifiConnectResponse:
		return "RtsWifiConnectResponse"
	case RtsConnection_2Tag_RtsWifiIpRequest:
		return "RtsWifiIpRequest"
	case RtsConnection_2Tag_RtsWifiIpResponse:
		return "RtsWifiIpResponse"
	case RtsConnection_2Tag_RtsStatusRequest:
		return "RtsStatusRequest"
	case RtsConnection_2Tag_RtsStatusResponse2:
		return "RtsStatusResponse2"
	case RtsConnection_2Tag_RtsWifiScanRequest:
		return "RtsWifiScanRequest"
	case RtsConnection_2Tag_RtsWifiScanResponse2:
		return "RtsWifiScanResponse2"
	case RtsConnection_2Tag_RtsOtaUpdateRequest:
		return "RtsOtaUpdateRequest"
	case RtsConnection_2Tag_RtsOtaUpdateResponse:
		return "RtsOtaUpdateResponse"
	case RtsConnection_2Tag_RtsCancelPairing:
		return "RtsCancelPairing"
	case RtsConnection_2Tag_RtsForceDisconnect:
		return "RtsForceDisconnect"
	case RtsConnection_2Tag_RtsAck:
		return "RtsAck"
	case RtsConnection_2Tag_RtsWifiAccessPointRequest:
		return "RtsWifiAccessPointRequest"
	case RtsConnection_2Tag_RtsWifiAccessPointResponse:
		return "RtsWifiAccessPointResponse"
	case RtsConnection_2Tag_RtsSshRequest:
		return "RtsSshRequest"
	case RtsConnection_2Tag_RtsSshResponse:
		return "RtsSshResponse"
	case RtsConnection_2Tag_RtsOtaCancelRequest:
		return "RtsOtaCancelRequest"
	case RtsConnection_2Tag_RtsLogRequest:
		return "RtsLogRequest"
	case RtsConnection_2Tag_RtsLogResponse:
		return "RtsLogResponse"
	case RtsConnection_2Tag_RtsFileDownload:
		return "RtsFileDownload"
	default:
		return "INVALID"
	}
}

func (m *RtsConnection_2) String() string {
	if m.tag == nil {
		return "nil"
	}
	if *m.tag == RtsConnection_2Tag_INVALID {
		return "INVALID"
	}
	return fmt.Sprintf("%s: {%s}", *m.tag, m.value)
}

func (m *RtsConnection_2) GetError() *Error {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_Error {
		return nil
	}
	return m.value.(*Error)
}

func (m *RtsConnection_2) SetError(value *Error) {
	newTag := RtsConnection_2Tag_Error
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithError(value *Error) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetError(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsConnRequest() *RtsConnRequest {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsConnRequest {
		return nil
	}
	return m.value.(*RtsConnRequest)
}

func (m *RtsConnection_2) SetRtsConnRequest(value *RtsConnRequest) {
	newTag := RtsConnection_2Tag_RtsConnRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsConnRequest(value *RtsConnRequest) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsConnRequest(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsConnResponse() *RtsConnResponse {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsConnResponse {
		return nil
	}
	return m.value.(*RtsConnResponse)
}

func (m *RtsConnection_2) SetRtsConnResponse(value *RtsConnResponse) {
	newTag := RtsConnection_2Tag_RtsConnResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsConnResponse(value *RtsConnResponse) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsConnResponse(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsNonceMessage() *RtsNonceMessage {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsNonceMessage {
		return nil
	}
	return m.value.(*RtsNonceMessage)
}

func (m *RtsConnection_2) SetRtsNonceMessage(value *RtsNonceMessage) {
	newTag := RtsConnection_2Tag_RtsNonceMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsNonceMessage(value *RtsNonceMessage) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsNonceMessage(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsChallengeMessage() *RtsChallengeMessage {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsChallengeMessage {
		return nil
	}
	return m.value.(*RtsChallengeMessage)
}

func (m *RtsConnection_2) SetRtsChallengeMessage(value *RtsChallengeMessage) {
	newTag := RtsConnection_2Tag_RtsChallengeMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsChallengeMessage(value *RtsChallengeMessage) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsChallengeMessage(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsChallengeSuccessMessage() *RtsChallengeSuccessMessage {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsChallengeSuccessMessage {
		return nil
	}
	return m.value.(*RtsChallengeSuccessMessage)
}

func (m *RtsConnection_2) SetRtsChallengeSuccessMessage(value *RtsChallengeSuccessMessage) {
	newTag := RtsConnection_2Tag_RtsChallengeSuccessMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsChallengeSuccessMessage(value *RtsChallengeSuccessMessage) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsChallengeSuccessMessage(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsWifiConnectRequest() *RtsWifiConnectRequest {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsWifiConnectRequest {
		return nil
	}
	return m.value.(*RtsWifiConnectRequest)
}

func (m *RtsConnection_2) SetRtsWifiConnectRequest(value *RtsWifiConnectRequest) {
	newTag := RtsConnection_2Tag_RtsWifiConnectRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsWifiConnectRequest(value *RtsWifiConnectRequest) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsWifiConnectRequest(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsWifiConnectResponse() *RtsWifiConnectResponse {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsWifiConnectResponse {
		return nil
	}
	return m.value.(*RtsWifiConnectResponse)
}

func (m *RtsConnection_2) SetRtsWifiConnectResponse(value *RtsWifiConnectResponse) {
	newTag := RtsConnection_2Tag_RtsWifiConnectResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsWifiConnectResponse(value *RtsWifiConnectResponse) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsWifiConnectResponse(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsWifiIpRequest() *RtsWifiIpRequest {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsWifiIpRequest {
		return nil
	}
	return m.value.(*RtsWifiIpRequest)
}

func (m *RtsConnection_2) SetRtsWifiIpRequest(value *RtsWifiIpRequest) {
	newTag := RtsConnection_2Tag_RtsWifiIpRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsWifiIpRequest(value *RtsWifiIpRequest) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsWifiIpRequest(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsWifiIpResponse() *RtsWifiIpResponse {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsWifiIpResponse {
		return nil
	}
	return m.value.(*RtsWifiIpResponse)
}

func (m *RtsConnection_2) SetRtsWifiIpResponse(value *RtsWifiIpResponse) {
	newTag := RtsConnection_2Tag_RtsWifiIpResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsWifiIpResponse(value *RtsWifiIpResponse) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsWifiIpResponse(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsStatusRequest() *RtsStatusRequest {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsStatusRequest {
		return nil
	}
	return m.value.(*RtsStatusRequest)
}

func (m *RtsConnection_2) SetRtsStatusRequest(value *RtsStatusRequest) {
	newTag := RtsConnection_2Tag_RtsStatusRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsStatusRequest(value *RtsStatusRequest) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsStatusRequest(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsStatusResponse2() *RtsStatusResponse_2 {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsStatusResponse2 {
		return nil
	}
	return m.value.(*RtsStatusResponse_2)
}

func (m *RtsConnection_2) SetRtsStatusResponse2(value *RtsStatusResponse_2) {
	newTag := RtsConnection_2Tag_RtsStatusResponse2
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsStatusResponse2(value *RtsStatusResponse_2) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsStatusResponse2(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsWifiScanRequest() *RtsWifiScanRequest {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsWifiScanRequest {
		return nil
	}
	return m.value.(*RtsWifiScanRequest)
}

func (m *RtsConnection_2) SetRtsWifiScanRequest(value *RtsWifiScanRequest) {
	newTag := RtsConnection_2Tag_RtsWifiScanRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsWifiScanRequest(value *RtsWifiScanRequest) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsWifiScanRequest(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsWifiScanResponse2() *RtsWifiScanResponse_2 {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsWifiScanResponse2 {
		return nil
	}
	return m.value.(*RtsWifiScanResponse_2)
}

func (m *RtsConnection_2) SetRtsWifiScanResponse2(value *RtsWifiScanResponse_2) {
	newTag := RtsConnection_2Tag_RtsWifiScanResponse2
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsWifiScanResponse2(value *RtsWifiScanResponse_2) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsWifiScanResponse2(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsOtaUpdateRequest() *RtsOtaUpdateRequest {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsOtaUpdateRequest {
		return nil
	}
	return m.value.(*RtsOtaUpdateRequest)
}

func (m *RtsConnection_2) SetRtsOtaUpdateRequest(value *RtsOtaUpdateRequest) {
	newTag := RtsConnection_2Tag_RtsOtaUpdateRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsOtaUpdateRequest(value *RtsOtaUpdateRequest) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsOtaUpdateRequest(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsOtaUpdateResponse() *RtsOtaUpdateResponse {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsOtaUpdateResponse {
		return nil
	}
	return m.value.(*RtsOtaUpdateResponse)
}

func (m *RtsConnection_2) SetRtsOtaUpdateResponse(value *RtsOtaUpdateResponse) {
	newTag := RtsConnection_2Tag_RtsOtaUpdateResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsOtaUpdateResponse(value *RtsOtaUpdateResponse) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsOtaUpdateResponse(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsCancelPairing() *RtsCancelPairing {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsCancelPairing {
		return nil
	}
	return m.value.(*RtsCancelPairing)
}

func (m *RtsConnection_2) SetRtsCancelPairing(value *RtsCancelPairing) {
	newTag := RtsConnection_2Tag_RtsCancelPairing
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsCancelPairing(value *RtsCancelPairing) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsCancelPairing(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsForceDisconnect() *RtsForceDisconnect {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsForceDisconnect {
		return nil
	}
	return m.value.(*RtsForceDisconnect)
}

func (m *RtsConnection_2) SetRtsForceDisconnect(value *RtsForceDisconnect) {
	newTag := RtsConnection_2Tag_RtsForceDisconnect
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsForceDisconnect(value *RtsForceDisconnect) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsForceDisconnect(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsAck() *RtsAck {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsAck {
		return nil
	}
	return m.value.(*RtsAck)
}

func (m *RtsConnection_2) SetRtsAck(value *RtsAck) {
	newTag := RtsConnection_2Tag_RtsAck
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsAck(value *RtsAck) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsAck(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsWifiAccessPointRequest() *RtsWifiAccessPointRequest {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsWifiAccessPointRequest {
		return nil
	}
	return m.value.(*RtsWifiAccessPointRequest)
}

func (m *RtsConnection_2) SetRtsWifiAccessPointRequest(value *RtsWifiAccessPointRequest) {
	newTag := RtsConnection_2Tag_RtsWifiAccessPointRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsWifiAccessPointRequest(value *RtsWifiAccessPointRequest) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsWifiAccessPointRequest(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsWifiAccessPointResponse() *RtsWifiAccessPointResponse {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsWifiAccessPointResponse {
		return nil
	}
	return m.value.(*RtsWifiAccessPointResponse)
}

func (m *RtsConnection_2) SetRtsWifiAccessPointResponse(value *RtsWifiAccessPointResponse) {
	newTag := RtsConnection_2Tag_RtsWifiAccessPointResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsWifiAccessPointResponse(value *RtsWifiAccessPointResponse) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsWifiAccessPointResponse(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsSshRequest() *RtsSshRequest {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsSshRequest {
		return nil
	}
	return m.value.(*RtsSshRequest)
}

func (m *RtsConnection_2) SetRtsSshRequest(value *RtsSshRequest) {
	newTag := RtsConnection_2Tag_RtsSshRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsSshRequest(value *RtsSshRequest) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsSshRequest(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsSshResponse() *RtsSshResponse {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsSshResponse {
		return nil
	}
	return m.value.(*RtsSshResponse)
}

func (m *RtsConnection_2) SetRtsSshResponse(value *RtsSshResponse) {
	newTag := RtsConnection_2Tag_RtsSshResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsSshResponse(value *RtsSshResponse) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsSshResponse(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsOtaCancelRequest() *RtsOtaCancelRequest {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsOtaCancelRequest {
		return nil
	}
	return m.value.(*RtsOtaCancelRequest)
}

func (m *RtsConnection_2) SetRtsOtaCancelRequest(value *RtsOtaCancelRequest) {
	newTag := RtsConnection_2Tag_RtsOtaCancelRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsOtaCancelRequest(value *RtsOtaCancelRequest) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsOtaCancelRequest(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsLogRequest() *RtsLogRequest {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsLogRequest {
		return nil
	}
	return m.value.(*RtsLogRequest)
}

func (m *RtsConnection_2) SetRtsLogRequest(value *RtsLogRequest) {
	newTag := RtsConnection_2Tag_RtsLogRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsLogRequest(value *RtsLogRequest) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsLogRequest(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsLogResponse() *RtsLogResponse {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsLogResponse {
		return nil
	}
	return m.value.(*RtsLogResponse)
}

func (m *RtsConnection_2) SetRtsLogResponse(value *RtsLogResponse) {
	newTag := RtsConnection_2Tag_RtsLogResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsLogResponse(value *RtsLogResponse) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsLogResponse(value)
	return &ret
}

func (m *RtsConnection_2) GetRtsFileDownload() *RtsFileDownload {
	if m.tag == nil || *m.tag != RtsConnection_2Tag_RtsFileDownload {
		return nil
	}
	return m.value.(*RtsFileDownload)
}

func (m *RtsConnection_2) SetRtsFileDownload(value *RtsFileDownload) {
	newTag := RtsConnection_2Tag_RtsFileDownload
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_2WithRtsFileDownload(value *RtsFileDownload) *RtsConnection_2 {
	var ret RtsConnection_2
	ret.SetRtsFileDownload(value)
	return &ret
}

// UNION RtsConnection_3
type RtsConnection_3Tag uint8

const (
	RtsConnection_3Tag_Error                      RtsConnection_3Tag = 0x0  // 0
	RtsConnection_3Tag_RtsConnRequest             RtsConnection_3Tag = 0x1  // 1
	RtsConnection_3Tag_RtsConnResponse            RtsConnection_3Tag = 0x2  // 2
	RtsConnection_3Tag_RtsNonceMessage            RtsConnection_3Tag = 0x3  // 3
	RtsConnection_3Tag_RtsChallengeMessage        RtsConnection_3Tag = 0x4  // 4
	RtsConnection_3Tag_RtsChallengeSuccessMessage RtsConnection_3Tag = 0x5  // 5
	RtsConnection_3Tag_RtsWifiConnectRequest      RtsConnection_3Tag = 0x6  // 6
	RtsConnection_3Tag_RtsWifiConnectResponse3    RtsConnection_3Tag = 0x7  // 7
	RtsConnection_3Tag_RtsWifiIpRequest           RtsConnection_3Tag = 0x8  // 8
	RtsConnection_3Tag_RtsWifiIpResponse          RtsConnection_3Tag = 0x9  // 9
	RtsConnection_3Tag_RtsStatusRequest           RtsConnection_3Tag = 0xa  // 10
	RtsConnection_3Tag_RtsStatusResponse3         RtsConnection_3Tag = 0xb  // 11
	RtsConnection_3Tag_RtsWifiScanRequest         RtsConnection_3Tag = 0xc  // 12
	RtsConnection_3Tag_RtsWifiScanResponse3       RtsConnection_3Tag = 0xd  // 13
	RtsConnection_3Tag_RtsOtaUpdateRequest        RtsConnection_3Tag = 0xe  // 14
	RtsConnection_3Tag_RtsOtaUpdateResponse       RtsConnection_3Tag = 0xf  // 15
	RtsConnection_3Tag_RtsCancelPairing           RtsConnection_3Tag = 0x10 // 16
	RtsConnection_3Tag_RtsForceDisconnect         RtsConnection_3Tag = 0x11 // 17
	RtsConnection_3Tag_RtsAck                     RtsConnection_3Tag = 0x12 // 18
	RtsConnection_3Tag_RtsWifiAccessPointRequest  RtsConnection_3Tag = 0x13 // 19
	RtsConnection_3Tag_RtsWifiAccessPointResponse RtsConnection_3Tag = 0x14 // 20
	RtsConnection_3Tag_RtsSshRequest              RtsConnection_3Tag = 0x15 // 21
	RtsConnection_3Tag_RtsSshResponse             RtsConnection_3Tag = 0x16 // 22
	RtsConnection_3Tag_RtsOtaCancelRequest        RtsConnection_3Tag = 0x17 // 23
	RtsConnection_3Tag_RtsLogRequest              RtsConnection_3Tag = 0x18 // 24
	RtsConnection_3Tag_RtsLogResponse             RtsConnection_3Tag = 0x19 // 25
	RtsConnection_3Tag_RtsFileDownload            RtsConnection_3Tag = 0x1a // 26
	RtsConnection_3Tag_RtsWifiForgetRequest       RtsConnection_3Tag = 0x1b // 27
	RtsConnection_3Tag_RtsWifiForgetResponse      RtsConnection_3Tag = 0x1c // 28
	RtsConnection_3Tag_RtsCloudSessionRequest     RtsConnection_3Tag = 0x1d // 29
	RtsConnection_3Tag_RtsCloudSessionResponse    RtsConnection_3Tag = 0x1e // 30
	RtsConnection_3Tag_INVALID                    RtsConnection_3Tag = 255
)

type RtsConnection_3 struct {
	tag   *RtsConnection_3Tag
	value clad.Struct
}

func (m *RtsConnection_3) Tag() RtsConnection_3Tag {
	if m.tag == nil {
		return RtsConnection_3Tag_INVALID
	}
	return *m.tag
}

func (m *RtsConnection_3) Size() uint32 {
	if m.tag == nil || *m.tag == RtsConnection_3Tag_INVALID {
		return 1
	}
	return 1 + m.value.Size()
}

func (m *RtsConnection_3) Pack(buf *bytes.Buffer) error {
	tag := RtsConnection_3Tag_INVALID
	if m.tag != nil {
		tag = *m.tag
	}
	if err := binary.Write(buf, binary.LittleEndian, tag); err != nil {
		return err
	}
	if tag == RtsConnection_3Tag_INVALID {
		return nil
	}
	return m.value.Pack(buf)
}

func (m *RtsConnection_3) unpackStruct(tag RtsConnection_3Tag, buf *bytes.Buffer) (clad.Struct, error) {
	switch tag {
	case RtsConnection_3Tag_Error:
		var ret Error
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsConnRequest:
		var ret RtsConnRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsConnResponse:
		var ret RtsConnResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsNonceMessage:
		var ret RtsNonceMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsChallengeMessage:
		var ret RtsChallengeMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsChallengeSuccessMessage:
		var ret RtsChallengeSuccessMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsWifiConnectRequest:
		var ret RtsWifiConnectRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsWifiConnectResponse3:
		var ret RtsWifiConnectResponse_3
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsWifiIpRequest:
		var ret RtsWifiIpRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsWifiIpResponse:
		var ret RtsWifiIpResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsStatusRequest:
		var ret RtsStatusRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsStatusResponse3:
		var ret RtsStatusResponse_3
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsWifiScanRequest:
		var ret RtsWifiScanRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsWifiScanResponse3:
		var ret RtsWifiScanResponse_3
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsOtaUpdateRequest:
		var ret RtsOtaUpdateRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsOtaUpdateResponse:
		var ret RtsOtaUpdateResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsCancelPairing:
		var ret RtsCancelPairing
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsForceDisconnect:
		var ret RtsForceDisconnect
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsAck:
		var ret RtsAck
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsWifiAccessPointRequest:
		var ret RtsWifiAccessPointRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsWifiAccessPointResponse:
		var ret RtsWifiAccessPointResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsSshRequest:
		var ret RtsSshRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsSshResponse:
		var ret RtsSshResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsOtaCancelRequest:
		var ret RtsOtaCancelRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsLogRequest:
		var ret RtsLogRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsLogResponse:
		var ret RtsLogResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsFileDownload:
		var ret RtsFileDownload
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsWifiForgetRequest:
		var ret RtsWifiForgetRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsWifiForgetResponse:
		var ret RtsWifiForgetResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsCloudSessionRequest:
		var ret RtsCloudSessionRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_3Tag_RtsCloudSessionResponse:
		var ret RtsCloudSessionResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	default:
		return nil, errors.New("invalid tag to unpackStruct")
	}
}

func (m *RtsConnection_3) Unpack(buf *bytes.Buffer) error {
	tag := RtsConnection_3Tag_INVALID
	if err := binary.Read(buf, binary.LittleEndian, &tag); err != nil {
		return err
	}
	m.tag = &tag
	if tag == RtsConnection_3Tag_INVALID {
		m.value = nil
		return nil
	}
	val, err := m.unpackStruct(tag, buf)
	if err != nil {
		*m.tag = RtsConnection_3Tag_INVALID
		return err
	}
	m.value = val
	return nil
}

func (t RtsConnection_3Tag) String() string {
	switch t {
	case RtsConnection_3Tag_Error:
		return "Error"
	case RtsConnection_3Tag_RtsConnRequest:
		return "RtsConnRequest"
	case RtsConnection_3Tag_RtsConnResponse:
		return "RtsConnResponse"
	case RtsConnection_3Tag_RtsNonceMessage:
		return "RtsNonceMessage"
	case RtsConnection_3Tag_RtsChallengeMessage:
		return "RtsChallengeMessage"
	case RtsConnection_3Tag_RtsChallengeSuccessMessage:
		return "RtsChallengeSuccessMessage"
	case RtsConnection_3Tag_RtsWifiConnectRequest:
		return "RtsWifiConnectRequest"
	case RtsConnection_3Tag_RtsWifiConnectResponse3:
		return "RtsWifiConnectResponse3"
	case RtsConnection_3Tag_RtsWifiIpRequest:
		return "RtsWifiIpRequest"
	case RtsConnection_3Tag_RtsWifiIpResponse:
		return "RtsWifiIpResponse"
	case RtsConnection_3Tag_RtsStatusRequest:
		return "RtsStatusRequest"
	case RtsConnection_3Tag_RtsStatusResponse3:
		return "RtsStatusResponse3"
	case RtsConnection_3Tag_RtsWifiScanRequest:
		return "RtsWifiScanRequest"
	case RtsConnection_3Tag_RtsWifiScanResponse3:
		return "RtsWifiScanResponse3"
	case RtsConnection_3Tag_RtsOtaUpdateRequest:
		return "RtsOtaUpdateRequest"
	case RtsConnection_3Tag_RtsOtaUpdateResponse:
		return "RtsOtaUpdateResponse"
	case RtsConnection_3Tag_RtsCancelPairing:
		return "RtsCancelPairing"
	case RtsConnection_3Tag_RtsForceDisconnect:
		return "RtsForceDisconnect"
	case RtsConnection_3Tag_RtsAck:
		return "RtsAck"
	case RtsConnection_3Tag_RtsWifiAccessPointRequest:
		return "RtsWifiAccessPointRequest"
	case RtsConnection_3Tag_RtsWifiAccessPointResponse:
		return "RtsWifiAccessPointResponse"
	case RtsConnection_3Tag_RtsSshRequest:
		return "RtsSshRequest"
	case RtsConnection_3Tag_RtsSshResponse:
		return "RtsSshResponse"
	case RtsConnection_3Tag_RtsOtaCancelRequest:
		return "RtsOtaCancelRequest"
	case RtsConnection_3Tag_RtsLogRequest:
		return "RtsLogRequest"
	case RtsConnection_3Tag_RtsLogResponse:
		return "RtsLogResponse"
	case RtsConnection_3Tag_RtsFileDownload:
		return "RtsFileDownload"
	case RtsConnection_3Tag_RtsWifiForgetRequest:
		return "RtsWifiForgetRequest"
	case RtsConnection_3Tag_RtsWifiForgetResponse:
		return "RtsWifiForgetResponse"
	case RtsConnection_3Tag_RtsCloudSessionRequest:
		return "RtsCloudSessionRequest"
	case RtsConnection_3Tag_RtsCloudSessionResponse:
		return "RtsCloudSessionResponse"
	default:
		return "INVALID"
	}
}

func (m *RtsConnection_3) String() string {
	if m.tag == nil {
		return "nil"
	}
	if *m.tag == RtsConnection_3Tag_INVALID {
		return "INVALID"
	}
	return fmt.Sprintf("%s: {%s}", *m.tag, m.value)
}

func (m *RtsConnection_3) GetError() *Error {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_Error {
		return nil
	}
	return m.value.(*Error)
}

func (m *RtsConnection_3) SetError(value *Error) {
	newTag := RtsConnection_3Tag_Error
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithError(value *Error) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetError(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsConnRequest() *RtsConnRequest {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsConnRequest {
		return nil
	}
	return m.value.(*RtsConnRequest)
}

func (m *RtsConnection_3) SetRtsConnRequest(value *RtsConnRequest) {
	newTag := RtsConnection_3Tag_RtsConnRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsConnRequest(value *RtsConnRequest) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsConnRequest(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsConnResponse() *RtsConnResponse {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsConnResponse {
		return nil
	}
	return m.value.(*RtsConnResponse)
}

func (m *RtsConnection_3) SetRtsConnResponse(value *RtsConnResponse) {
	newTag := RtsConnection_3Tag_RtsConnResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsConnResponse(value *RtsConnResponse) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsConnResponse(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsNonceMessage() *RtsNonceMessage {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsNonceMessage {
		return nil
	}
	return m.value.(*RtsNonceMessage)
}

func (m *RtsConnection_3) SetRtsNonceMessage(value *RtsNonceMessage) {
	newTag := RtsConnection_3Tag_RtsNonceMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsNonceMessage(value *RtsNonceMessage) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsNonceMessage(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsChallengeMessage() *RtsChallengeMessage {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsChallengeMessage {
		return nil
	}
	return m.value.(*RtsChallengeMessage)
}

func (m *RtsConnection_3) SetRtsChallengeMessage(value *RtsChallengeMessage) {
	newTag := RtsConnection_3Tag_RtsChallengeMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsChallengeMessage(value *RtsChallengeMessage) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsChallengeMessage(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsChallengeSuccessMessage() *RtsChallengeSuccessMessage {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsChallengeSuccessMessage {
		return nil
	}
	return m.value.(*RtsChallengeSuccessMessage)
}

func (m *RtsConnection_3) SetRtsChallengeSuccessMessage(value *RtsChallengeSuccessMessage) {
	newTag := RtsConnection_3Tag_RtsChallengeSuccessMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsChallengeSuccessMessage(value *RtsChallengeSuccessMessage) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsChallengeSuccessMessage(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsWifiConnectRequest() *RtsWifiConnectRequest {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsWifiConnectRequest {
		return nil
	}
	return m.value.(*RtsWifiConnectRequest)
}

func (m *RtsConnection_3) SetRtsWifiConnectRequest(value *RtsWifiConnectRequest) {
	newTag := RtsConnection_3Tag_RtsWifiConnectRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsWifiConnectRequest(value *RtsWifiConnectRequest) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsWifiConnectRequest(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsWifiConnectResponse3() *RtsWifiConnectResponse_3 {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsWifiConnectResponse3 {
		return nil
	}
	return m.value.(*RtsWifiConnectResponse_3)
}

func (m *RtsConnection_3) SetRtsWifiConnectResponse3(value *RtsWifiConnectResponse_3) {
	newTag := RtsConnection_3Tag_RtsWifiConnectResponse3
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsWifiConnectResponse3(value *RtsWifiConnectResponse_3) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsWifiConnectResponse3(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsWifiIpRequest() *RtsWifiIpRequest {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsWifiIpRequest {
		return nil
	}
	return m.value.(*RtsWifiIpRequest)
}

func (m *RtsConnection_3) SetRtsWifiIpRequest(value *RtsWifiIpRequest) {
	newTag := RtsConnection_3Tag_RtsWifiIpRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsWifiIpRequest(value *RtsWifiIpRequest) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsWifiIpRequest(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsWifiIpResponse() *RtsWifiIpResponse {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsWifiIpResponse {
		return nil
	}
	return m.value.(*RtsWifiIpResponse)
}

func (m *RtsConnection_3) SetRtsWifiIpResponse(value *RtsWifiIpResponse) {
	newTag := RtsConnection_3Tag_RtsWifiIpResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsWifiIpResponse(value *RtsWifiIpResponse) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsWifiIpResponse(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsStatusRequest() *RtsStatusRequest {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsStatusRequest {
		return nil
	}
	return m.value.(*RtsStatusRequest)
}

func (m *RtsConnection_3) SetRtsStatusRequest(value *RtsStatusRequest) {
	newTag := RtsConnection_3Tag_RtsStatusRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsStatusRequest(value *RtsStatusRequest) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsStatusRequest(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsStatusResponse3() *RtsStatusResponse_3 {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsStatusResponse3 {
		return nil
	}
	return m.value.(*RtsStatusResponse_3)
}

func (m *RtsConnection_3) SetRtsStatusResponse3(value *RtsStatusResponse_3) {
	newTag := RtsConnection_3Tag_RtsStatusResponse3
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsStatusResponse3(value *RtsStatusResponse_3) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsStatusResponse3(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsWifiScanRequest() *RtsWifiScanRequest {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsWifiScanRequest {
		return nil
	}
	return m.value.(*RtsWifiScanRequest)
}

func (m *RtsConnection_3) SetRtsWifiScanRequest(value *RtsWifiScanRequest) {
	newTag := RtsConnection_3Tag_RtsWifiScanRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsWifiScanRequest(value *RtsWifiScanRequest) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsWifiScanRequest(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsWifiScanResponse3() *RtsWifiScanResponse_3 {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsWifiScanResponse3 {
		return nil
	}
	return m.value.(*RtsWifiScanResponse_3)
}

func (m *RtsConnection_3) SetRtsWifiScanResponse3(value *RtsWifiScanResponse_3) {
	newTag := RtsConnection_3Tag_RtsWifiScanResponse3
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsWifiScanResponse3(value *RtsWifiScanResponse_3) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsWifiScanResponse3(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsOtaUpdateRequest() *RtsOtaUpdateRequest {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsOtaUpdateRequest {
		return nil
	}
	return m.value.(*RtsOtaUpdateRequest)
}

func (m *RtsConnection_3) SetRtsOtaUpdateRequest(value *RtsOtaUpdateRequest) {
	newTag := RtsConnection_3Tag_RtsOtaUpdateRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsOtaUpdateRequest(value *RtsOtaUpdateRequest) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsOtaUpdateRequest(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsOtaUpdateResponse() *RtsOtaUpdateResponse {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsOtaUpdateResponse {
		return nil
	}
	return m.value.(*RtsOtaUpdateResponse)
}

func (m *RtsConnection_3) SetRtsOtaUpdateResponse(value *RtsOtaUpdateResponse) {
	newTag := RtsConnection_3Tag_RtsOtaUpdateResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsOtaUpdateResponse(value *RtsOtaUpdateResponse) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsOtaUpdateResponse(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsCancelPairing() *RtsCancelPairing {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsCancelPairing {
		return nil
	}
	return m.value.(*RtsCancelPairing)
}

func (m *RtsConnection_3) SetRtsCancelPairing(value *RtsCancelPairing) {
	newTag := RtsConnection_3Tag_RtsCancelPairing
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsCancelPairing(value *RtsCancelPairing) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsCancelPairing(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsForceDisconnect() *RtsForceDisconnect {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsForceDisconnect {
		return nil
	}
	return m.value.(*RtsForceDisconnect)
}

func (m *RtsConnection_3) SetRtsForceDisconnect(value *RtsForceDisconnect) {
	newTag := RtsConnection_3Tag_RtsForceDisconnect
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsForceDisconnect(value *RtsForceDisconnect) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsForceDisconnect(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsAck() *RtsAck {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsAck {
		return nil
	}
	return m.value.(*RtsAck)
}

func (m *RtsConnection_3) SetRtsAck(value *RtsAck) {
	newTag := RtsConnection_3Tag_RtsAck
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsAck(value *RtsAck) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsAck(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsWifiAccessPointRequest() *RtsWifiAccessPointRequest {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsWifiAccessPointRequest {
		return nil
	}
	return m.value.(*RtsWifiAccessPointRequest)
}

func (m *RtsConnection_3) SetRtsWifiAccessPointRequest(value *RtsWifiAccessPointRequest) {
	newTag := RtsConnection_3Tag_RtsWifiAccessPointRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsWifiAccessPointRequest(value *RtsWifiAccessPointRequest) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsWifiAccessPointRequest(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsWifiAccessPointResponse() *RtsWifiAccessPointResponse {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsWifiAccessPointResponse {
		return nil
	}
	return m.value.(*RtsWifiAccessPointResponse)
}

func (m *RtsConnection_3) SetRtsWifiAccessPointResponse(value *RtsWifiAccessPointResponse) {
	newTag := RtsConnection_3Tag_RtsWifiAccessPointResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsWifiAccessPointResponse(value *RtsWifiAccessPointResponse) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsWifiAccessPointResponse(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsSshRequest() *RtsSshRequest {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsSshRequest {
		return nil
	}
	return m.value.(*RtsSshRequest)
}

func (m *RtsConnection_3) SetRtsSshRequest(value *RtsSshRequest) {
	newTag := RtsConnection_3Tag_RtsSshRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsSshRequest(value *RtsSshRequest) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsSshRequest(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsSshResponse() *RtsSshResponse {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsSshResponse {
		return nil
	}
	return m.value.(*RtsSshResponse)
}

func (m *RtsConnection_3) SetRtsSshResponse(value *RtsSshResponse) {
	newTag := RtsConnection_3Tag_RtsSshResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsSshResponse(value *RtsSshResponse) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsSshResponse(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsOtaCancelRequest() *RtsOtaCancelRequest {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsOtaCancelRequest {
		return nil
	}
	return m.value.(*RtsOtaCancelRequest)
}

func (m *RtsConnection_3) SetRtsOtaCancelRequest(value *RtsOtaCancelRequest) {
	newTag := RtsConnection_3Tag_RtsOtaCancelRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsOtaCancelRequest(value *RtsOtaCancelRequest) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsOtaCancelRequest(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsLogRequest() *RtsLogRequest {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsLogRequest {
		return nil
	}
	return m.value.(*RtsLogRequest)
}

func (m *RtsConnection_3) SetRtsLogRequest(value *RtsLogRequest) {
	newTag := RtsConnection_3Tag_RtsLogRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsLogRequest(value *RtsLogRequest) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsLogRequest(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsLogResponse() *RtsLogResponse {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsLogResponse {
		return nil
	}
	return m.value.(*RtsLogResponse)
}

func (m *RtsConnection_3) SetRtsLogResponse(value *RtsLogResponse) {
	newTag := RtsConnection_3Tag_RtsLogResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsLogResponse(value *RtsLogResponse) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsLogResponse(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsFileDownload() *RtsFileDownload {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsFileDownload {
		return nil
	}
	return m.value.(*RtsFileDownload)
}

func (m *RtsConnection_3) SetRtsFileDownload(value *RtsFileDownload) {
	newTag := RtsConnection_3Tag_RtsFileDownload
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsFileDownload(value *RtsFileDownload) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsFileDownload(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsWifiForgetRequest() *RtsWifiForgetRequest {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsWifiForgetRequest {
		return nil
	}
	return m.value.(*RtsWifiForgetRequest)
}

func (m *RtsConnection_3) SetRtsWifiForgetRequest(value *RtsWifiForgetRequest) {
	newTag := RtsConnection_3Tag_RtsWifiForgetRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsWifiForgetRequest(value *RtsWifiForgetRequest) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsWifiForgetRequest(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsWifiForgetResponse() *RtsWifiForgetResponse {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsWifiForgetResponse {
		return nil
	}
	return m.value.(*RtsWifiForgetResponse)
}

func (m *RtsConnection_3) SetRtsWifiForgetResponse(value *RtsWifiForgetResponse) {
	newTag := RtsConnection_3Tag_RtsWifiForgetResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsWifiForgetResponse(value *RtsWifiForgetResponse) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsWifiForgetResponse(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsCloudSessionRequest() *RtsCloudSessionRequest {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsCloudSessionRequest {
		return nil
	}
	return m.value.(*RtsCloudSessionRequest)
}

func (m *RtsConnection_3) SetRtsCloudSessionRequest(value *RtsCloudSessionRequest) {
	newTag := RtsConnection_3Tag_RtsCloudSessionRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsCloudSessionRequest(value *RtsCloudSessionRequest) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsCloudSessionRequest(value)
	return &ret
}

func (m *RtsConnection_3) GetRtsCloudSessionResponse() *RtsCloudSessionResponse {
	if m.tag == nil || *m.tag != RtsConnection_3Tag_RtsCloudSessionResponse {
		return nil
	}
	return m.value.(*RtsCloudSessionResponse)
}

func (m *RtsConnection_3) SetRtsCloudSessionResponse(value *RtsCloudSessionResponse) {
	newTag := RtsConnection_3Tag_RtsCloudSessionResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_3WithRtsCloudSessionResponse(value *RtsCloudSessionResponse) *RtsConnection_3 {
	var ret RtsConnection_3
	ret.SetRtsCloudSessionResponse(value)
	return &ret
}

// UNION RtsConnection_4
type RtsConnection_4Tag uint8

const (
	RtsConnection_4Tag_Error                      RtsConnection_4Tag = 0x0  // 0
	RtsConnection_4Tag_RtsConnRequest             RtsConnection_4Tag = 0x1  // 1
	RtsConnection_4Tag_RtsConnResponse            RtsConnection_4Tag = 0x2  // 2
	RtsConnection_4Tag_RtsNonceMessage            RtsConnection_4Tag = 0x3  // 3
	RtsConnection_4Tag_RtsChallengeMessage        RtsConnection_4Tag = 0x4  // 4
	RtsConnection_4Tag_RtsChallengeSuccessMessage RtsConnection_4Tag = 0x5  // 5
	RtsConnection_4Tag_RtsWifiConnectRequest      RtsConnection_4Tag = 0x6  // 6
	RtsConnection_4Tag_RtsWifiConnectResponse3    RtsConnection_4Tag = 0x7  // 7
	RtsConnection_4Tag_RtsWifiIpRequest           RtsConnection_4Tag = 0x8  // 8
	RtsConnection_4Tag_RtsWifiIpResponse          RtsConnection_4Tag = 0x9  // 9
	RtsConnection_4Tag_RtsStatusRequest           RtsConnection_4Tag = 0xa  // 10
	RtsConnection_4Tag_RtsStatusResponse4         RtsConnection_4Tag = 0xb  // 11
	RtsConnection_4Tag_RtsWifiScanRequest         RtsConnection_4Tag = 0xc  // 12
	RtsConnection_4Tag_RtsWifiScanResponse3       RtsConnection_4Tag = 0xd  // 13
	RtsConnection_4Tag_RtsOtaUpdateRequest        RtsConnection_4Tag = 0xe  // 14
	RtsConnection_4Tag_RtsOtaUpdateResponse       RtsConnection_4Tag = 0xf  // 15
	RtsConnection_4Tag_RtsCancelPairing           RtsConnection_4Tag = 0x10 // 16
	RtsConnection_4Tag_RtsForceDisconnect         RtsConnection_4Tag = 0x11 // 17
	RtsConnection_4Tag_RtsAck                     RtsConnection_4Tag = 0x12 // 18
	RtsConnection_4Tag_RtsWifiAccessPointRequest  RtsConnection_4Tag = 0x13 // 19
	RtsConnection_4Tag_RtsWifiAccessPointResponse RtsConnection_4Tag = 0x14 // 20
	RtsConnection_4Tag_RtsSshRequest              RtsConnection_4Tag = 0x15 // 21
	RtsConnection_4Tag_RtsSshResponse             RtsConnection_4Tag = 0x16 // 22
	RtsConnection_4Tag_RtsOtaCancelRequest        RtsConnection_4Tag = 0x17 // 23
	RtsConnection_4Tag_RtsLogRequest              RtsConnection_4Tag = 0x18 // 24
	RtsConnection_4Tag_RtsLogResponse             RtsConnection_4Tag = 0x19 // 25
	RtsConnection_4Tag_RtsFileDownload            RtsConnection_4Tag = 0x1a // 26
	RtsConnection_4Tag_RtsWifiForgetRequest       RtsConnection_4Tag = 0x1b // 27
	RtsConnection_4Tag_RtsWifiForgetResponse      RtsConnection_4Tag = 0x1c // 28
	RtsConnection_4Tag_RtsCloudSessionRequest     RtsConnection_4Tag = 0x1d // 29
	RtsConnection_4Tag_RtsCloudSessionResponse    RtsConnection_4Tag = 0x1e // 30
	RtsConnection_4Tag_RtsAppConnectionIdRequest  RtsConnection_4Tag = 0x1f // 31
	RtsConnection_4Tag_RtsAppConnectionIdResponse RtsConnection_4Tag = 0x20 // 32
	RtsConnection_4Tag_RtsResponse                RtsConnection_4Tag = 0x21 // 33
	RtsConnection_4Tag_INVALID                    RtsConnection_4Tag = 255
)

type RtsConnection_4 struct {
	tag   *RtsConnection_4Tag
	value clad.Struct
}

func (m *RtsConnection_4) Tag() RtsConnection_4Tag {
	if m.tag == nil {
		return RtsConnection_4Tag_INVALID
	}
	return *m.tag
}

func (m *RtsConnection_4) Size() uint32 {
	if m.tag == nil || *m.tag == RtsConnection_4Tag_INVALID {
		return 1
	}
	return 1 + m.value.Size()
}

func (m *RtsConnection_4) Pack(buf *bytes.Buffer) error {
	tag := RtsConnection_4Tag_INVALID
	if m.tag != nil {
		tag = *m.tag
	}
	if err := binary.Write(buf, binary.LittleEndian, tag); err != nil {
		return err
	}
	if tag == RtsConnection_4Tag_INVALID {
		return nil
	}
	return m.value.Pack(buf)
}

func (m *RtsConnection_4) unpackStruct(tag RtsConnection_4Tag, buf *bytes.Buffer) (clad.Struct, error) {
	switch tag {
	case RtsConnection_4Tag_Error:
		var ret Error
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsConnRequest:
		var ret RtsConnRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsConnResponse:
		var ret RtsConnResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsNonceMessage:
		var ret RtsNonceMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsChallengeMessage:
		var ret RtsChallengeMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsChallengeSuccessMessage:
		var ret RtsChallengeSuccessMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsWifiConnectRequest:
		var ret RtsWifiConnectRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsWifiConnectResponse3:
		var ret RtsWifiConnectResponse_3
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsWifiIpRequest:
		var ret RtsWifiIpRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsWifiIpResponse:
		var ret RtsWifiIpResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsStatusRequest:
		var ret RtsStatusRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsStatusResponse4:
		var ret RtsStatusResponse_4
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsWifiScanRequest:
		var ret RtsWifiScanRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsWifiScanResponse3:
		var ret RtsWifiScanResponse_3
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsOtaUpdateRequest:
		var ret RtsOtaUpdateRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsOtaUpdateResponse:
		var ret RtsOtaUpdateResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsCancelPairing:
		var ret RtsCancelPairing
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsForceDisconnect:
		var ret RtsForceDisconnect
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsAck:
		var ret RtsAck
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsWifiAccessPointRequest:
		var ret RtsWifiAccessPointRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsWifiAccessPointResponse:
		var ret RtsWifiAccessPointResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsSshRequest:
		var ret RtsSshRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsSshResponse:
		var ret RtsSshResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsOtaCancelRequest:
		var ret RtsOtaCancelRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsLogRequest:
		var ret RtsLogRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsLogResponse:
		var ret RtsLogResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsFileDownload:
		var ret RtsFileDownload
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsWifiForgetRequest:
		var ret RtsWifiForgetRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsWifiForgetResponse:
		var ret RtsWifiForgetResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsCloudSessionRequest:
		var ret RtsCloudSessionRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsCloudSessionResponse:
		var ret RtsCloudSessionResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsAppConnectionIdRequest:
		var ret RtsAppConnectionIdRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsAppConnectionIdResponse:
		var ret RtsAppConnectionIdResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_4Tag_RtsResponse:
		var ret RtsResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	default:
		return nil, errors.New("invalid tag to unpackStruct")
	}
}

func (m *RtsConnection_4) Unpack(buf *bytes.Buffer) error {
	tag := RtsConnection_4Tag_INVALID
	if err := binary.Read(buf, binary.LittleEndian, &tag); err != nil {
		return err
	}
	m.tag = &tag
	if tag == RtsConnection_4Tag_INVALID {
		m.value = nil
		return nil
	}
	val, err := m.unpackStruct(tag, buf)
	if err != nil {
		*m.tag = RtsConnection_4Tag_INVALID
		return err
	}
	m.value = val
	return nil
}

func (t RtsConnection_4Tag) String() string {
	switch t {
	case RtsConnection_4Tag_Error:
		return "Error"
	case RtsConnection_4Tag_RtsConnRequest:
		return "RtsConnRequest"
	case RtsConnection_4Tag_RtsConnResponse:
		return "RtsConnResponse"
	case RtsConnection_4Tag_RtsNonceMessage:
		return "RtsNonceMessage"
	case RtsConnection_4Tag_RtsChallengeMessage:
		return "RtsChallengeMessage"
	case RtsConnection_4Tag_RtsChallengeSuccessMessage:
		return "RtsChallengeSuccessMessage"
	case RtsConnection_4Tag_RtsWifiConnectRequest:
		return "RtsWifiConnectRequest"
	case RtsConnection_4Tag_RtsWifiConnectResponse3:
		return "RtsWifiConnectResponse3"
	case RtsConnection_4Tag_RtsWifiIpRequest:
		return "RtsWifiIpRequest"
	case RtsConnection_4Tag_RtsWifiIpResponse:
		return "RtsWifiIpResponse"
	case RtsConnection_4Tag_RtsStatusRequest:
		return "RtsStatusRequest"
	case RtsConnection_4Tag_RtsStatusResponse4:
		return "RtsStatusResponse4"
	case RtsConnection_4Tag_RtsWifiScanRequest:
		return "RtsWifiScanRequest"
	case RtsConnection_4Tag_RtsWifiScanResponse3:
		return "RtsWifiScanResponse3"
	case RtsConnection_4Tag_RtsOtaUpdateRequest:
		return "RtsOtaUpdateRequest"
	case RtsConnection_4Tag_RtsOtaUpdateResponse:
		return "RtsOtaUpdateResponse"
	case RtsConnection_4Tag_RtsCancelPairing:
		return "RtsCancelPairing"
	case RtsConnection_4Tag_RtsForceDisconnect:
		return "RtsForceDisconnect"
	case RtsConnection_4Tag_RtsAck:
		return "RtsAck"
	case RtsConnection_4Tag_RtsWifiAccessPointRequest:
		return "RtsWifiAccessPointRequest"
	case RtsConnection_4Tag_RtsWifiAccessPointResponse:
		return "RtsWifiAccessPointResponse"
	case RtsConnection_4Tag_RtsSshRequest:
		return "RtsSshRequest"
	case RtsConnection_4Tag_RtsSshResponse:
		return "RtsSshResponse"
	case RtsConnection_4Tag_RtsOtaCancelRequest:
		return "RtsOtaCancelRequest"
	case RtsConnection_4Tag_RtsLogRequest:
		return "RtsLogRequest"
	case RtsConnection_4Tag_RtsLogResponse:
		return "RtsLogResponse"
	case RtsConnection_4Tag_RtsFileDownload:
		return "RtsFileDownload"
	case RtsConnection_4Tag_RtsWifiForgetRequest:
		return "RtsWifiForgetRequest"
	case RtsConnection_4Tag_RtsWifiForgetResponse:
		return "RtsWifiForgetResponse"
	case RtsConnection_4Tag_RtsCloudSessionRequest:
		return "RtsCloudSessionRequest"
	case RtsConnection_4Tag_RtsCloudSessionResponse:
		return "RtsCloudSessionResponse"
	case RtsConnection_4Tag_RtsAppConnectionIdRequest:
		return "RtsAppConnectionIdRequest"
	case RtsConnection_4Tag_RtsAppConnectionIdResponse:
		return "RtsAppConnectionIdResponse"
	case RtsConnection_4Tag_RtsResponse:
		return "RtsResponse"
	default:
		return "INVALID"
	}
}

func (m *RtsConnection_4) String() string {
	if m.tag == nil {
		return "nil"
	}
	if *m.tag == RtsConnection_4Tag_INVALID {
		return "INVALID"
	}
	return fmt.Sprintf("%s: {%s}", *m.tag, m.value)
}

func (m *RtsConnection_4) GetError() *Error {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_Error {
		return nil
	}
	return m.value.(*Error)
}

func (m *RtsConnection_4) SetError(value *Error) {
	newTag := RtsConnection_4Tag_Error
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithError(value *Error) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetError(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsConnRequest() *RtsConnRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsConnRequest {
		return nil
	}
	return m.value.(*RtsConnRequest)
}

func (m *RtsConnection_4) SetRtsConnRequest(value *RtsConnRequest) {
	newTag := RtsConnection_4Tag_RtsConnRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsConnRequest(value *RtsConnRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsConnRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsConnResponse() *RtsConnResponse {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsConnResponse {
		return nil
	}
	return m.value.(*RtsConnResponse)
}

func (m *RtsConnection_4) SetRtsConnResponse(value *RtsConnResponse) {
	newTag := RtsConnection_4Tag_RtsConnResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsConnResponse(value *RtsConnResponse) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsConnResponse(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsNonceMessage() *RtsNonceMessage {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsNonceMessage {
		return nil
	}
	return m.value.(*RtsNonceMessage)
}

func (m *RtsConnection_4) SetRtsNonceMessage(value *RtsNonceMessage) {
	newTag := RtsConnection_4Tag_RtsNonceMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsNonceMessage(value *RtsNonceMessage) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsNonceMessage(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsChallengeMessage() *RtsChallengeMessage {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsChallengeMessage {
		return nil
	}
	return m.value.(*RtsChallengeMessage)
}

func (m *RtsConnection_4) SetRtsChallengeMessage(value *RtsChallengeMessage) {
	newTag := RtsConnection_4Tag_RtsChallengeMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsChallengeMessage(value *RtsChallengeMessage) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsChallengeMessage(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsChallengeSuccessMessage() *RtsChallengeSuccessMessage {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsChallengeSuccessMessage {
		return nil
	}
	return m.value.(*RtsChallengeSuccessMessage)
}

func (m *RtsConnection_4) SetRtsChallengeSuccessMessage(value *RtsChallengeSuccessMessage) {
	newTag := RtsConnection_4Tag_RtsChallengeSuccessMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsChallengeSuccessMessage(value *RtsChallengeSuccessMessage) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsChallengeSuccessMessage(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsWifiConnectRequest() *RtsWifiConnectRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsWifiConnectRequest {
		return nil
	}
	return m.value.(*RtsWifiConnectRequest)
}

func (m *RtsConnection_4) SetRtsWifiConnectRequest(value *RtsWifiConnectRequest) {
	newTag := RtsConnection_4Tag_RtsWifiConnectRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsWifiConnectRequest(value *RtsWifiConnectRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsWifiConnectRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsWifiConnectResponse3() *RtsWifiConnectResponse_3 {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsWifiConnectResponse3 {
		return nil
	}
	return m.value.(*RtsWifiConnectResponse_3)
}

func (m *RtsConnection_4) SetRtsWifiConnectResponse3(value *RtsWifiConnectResponse_3) {
	newTag := RtsConnection_4Tag_RtsWifiConnectResponse3
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsWifiConnectResponse3(value *RtsWifiConnectResponse_3) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsWifiConnectResponse3(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsWifiIpRequest() *RtsWifiIpRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsWifiIpRequest {
		return nil
	}
	return m.value.(*RtsWifiIpRequest)
}

func (m *RtsConnection_4) SetRtsWifiIpRequest(value *RtsWifiIpRequest) {
	newTag := RtsConnection_4Tag_RtsWifiIpRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsWifiIpRequest(value *RtsWifiIpRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsWifiIpRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsWifiIpResponse() *RtsWifiIpResponse {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsWifiIpResponse {
		return nil
	}
	return m.value.(*RtsWifiIpResponse)
}

func (m *RtsConnection_4) SetRtsWifiIpResponse(value *RtsWifiIpResponse) {
	newTag := RtsConnection_4Tag_RtsWifiIpResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsWifiIpResponse(value *RtsWifiIpResponse) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsWifiIpResponse(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsStatusRequest() *RtsStatusRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsStatusRequest {
		return nil
	}
	return m.value.(*RtsStatusRequest)
}

func (m *RtsConnection_4) SetRtsStatusRequest(value *RtsStatusRequest) {
	newTag := RtsConnection_4Tag_RtsStatusRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsStatusRequest(value *RtsStatusRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsStatusRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsStatusResponse4() *RtsStatusResponse_4 {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsStatusResponse4 {
		return nil
	}
	return m.value.(*RtsStatusResponse_4)
}

func (m *RtsConnection_4) SetRtsStatusResponse4(value *RtsStatusResponse_4) {
	newTag := RtsConnection_4Tag_RtsStatusResponse4
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsStatusResponse4(value *RtsStatusResponse_4) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsStatusResponse4(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsWifiScanRequest() *RtsWifiScanRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsWifiScanRequest {
		return nil
	}
	return m.value.(*RtsWifiScanRequest)
}

func (m *RtsConnection_4) SetRtsWifiScanRequest(value *RtsWifiScanRequest) {
	newTag := RtsConnection_4Tag_RtsWifiScanRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsWifiScanRequest(value *RtsWifiScanRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsWifiScanRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsWifiScanResponse3() *RtsWifiScanResponse_3 {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsWifiScanResponse3 {
		return nil
	}
	return m.value.(*RtsWifiScanResponse_3)
}

func (m *RtsConnection_4) SetRtsWifiScanResponse3(value *RtsWifiScanResponse_3) {
	newTag := RtsConnection_4Tag_RtsWifiScanResponse3
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsWifiScanResponse3(value *RtsWifiScanResponse_3) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsWifiScanResponse3(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsOtaUpdateRequest() *RtsOtaUpdateRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsOtaUpdateRequest {
		return nil
	}
	return m.value.(*RtsOtaUpdateRequest)
}

func (m *RtsConnection_4) SetRtsOtaUpdateRequest(value *RtsOtaUpdateRequest) {
	newTag := RtsConnection_4Tag_RtsOtaUpdateRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsOtaUpdateRequest(value *RtsOtaUpdateRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsOtaUpdateRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsOtaUpdateResponse() *RtsOtaUpdateResponse {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsOtaUpdateResponse {
		return nil
	}
	return m.value.(*RtsOtaUpdateResponse)
}

func (m *RtsConnection_4) SetRtsOtaUpdateResponse(value *RtsOtaUpdateResponse) {
	newTag := RtsConnection_4Tag_RtsOtaUpdateResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsOtaUpdateResponse(value *RtsOtaUpdateResponse) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsOtaUpdateResponse(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsCancelPairing() *RtsCancelPairing {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsCancelPairing {
		return nil
	}
	return m.value.(*RtsCancelPairing)
}

func (m *RtsConnection_4) SetRtsCancelPairing(value *RtsCancelPairing) {
	newTag := RtsConnection_4Tag_RtsCancelPairing
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsCancelPairing(value *RtsCancelPairing) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsCancelPairing(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsForceDisconnect() *RtsForceDisconnect {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsForceDisconnect {
		return nil
	}
	return m.value.(*RtsForceDisconnect)
}

func (m *RtsConnection_4) SetRtsForceDisconnect(value *RtsForceDisconnect) {
	newTag := RtsConnection_4Tag_RtsForceDisconnect
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsForceDisconnect(value *RtsForceDisconnect) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsForceDisconnect(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsAck() *RtsAck {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsAck {
		return nil
	}
	return m.value.(*RtsAck)
}

func (m *RtsConnection_4) SetRtsAck(value *RtsAck) {
	newTag := RtsConnection_4Tag_RtsAck
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsAck(value *RtsAck) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsAck(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsWifiAccessPointRequest() *RtsWifiAccessPointRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsWifiAccessPointRequest {
		return nil
	}
	return m.value.(*RtsWifiAccessPointRequest)
}

func (m *RtsConnection_4) SetRtsWifiAccessPointRequest(value *RtsWifiAccessPointRequest) {
	newTag := RtsConnection_4Tag_RtsWifiAccessPointRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsWifiAccessPointRequest(value *RtsWifiAccessPointRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsWifiAccessPointRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsWifiAccessPointResponse() *RtsWifiAccessPointResponse {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsWifiAccessPointResponse {
		return nil
	}
	return m.value.(*RtsWifiAccessPointResponse)
}

func (m *RtsConnection_4) SetRtsWifiAccessPointResponse(value *RtsWifiAccessPointResponse) {
	newTag := RtsConnection_4Tag_RtsWifiAccessPointResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsWifiAccessPointResponse(value *RtsWifiAccessPointResponse) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsWifiAccessPointResponse(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsSshRequest() *RtsSshRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsSshRequest {
		return nil
	}
	return m.value.(*RtsSshRequest)
}

func (m *RtsConnection_4) SetRtsSshRequest(value *RtsSshRequest) {
	newTag := RtsConnection_4Tag_RtsSshRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsSshRequest(value *RtsSshRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsSshRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsSshResponse() *RtsSshResponse {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsSshResponse {
		return nil
	}
	return m.value.(*RtsSshResponse)
}

func (m *RtsConnection_4) SetRtsSshResponse(value *RtsSshResponse) {
	newTag := RtsConnection_4Tag_RtsSshResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsSshResponse(value *RtsSshResponse) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsSshResponse(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsOtaCancelRequest() *RtsOtaCancelRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsOtaCancelRequest {
		return nil
	}
	return m.value.(*RtsOtaCancelRequest)
}

func (m *RtsConnection_4) SetRtsOtaCancelRequest(value *RtsOtaCancelRequest) {
	newTag := RtsConnection_4Tag_RtsOtaCancelRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsOtaCancelRequest(value *RtsOtaCancelRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsOtaCancelRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsLogRequest() *RtsLogRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsLogRequest {
		return nil
	}
	return m.value.(*RtsLogRequest)
}

func (m *RtsConnection_4) SetRtsLogRequest(value *RtsLogRequest) {
	newTag := RtsConnection_4Tag_RtsLogRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsLogRequest(value *RtsLogRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsLogRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsLogResponse() *RtsLogResponse {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsLogResponse {
		return nil
	}
	return m.value.(*RtsLogResponse)
}

func (m *RtsConnection_4) SetRtsLogResponse(value *RtsLogResponse) {
	newTag := RtsConnection_4Tag_RtsLogResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsLogResponse(value *RtsLogResponse) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsLogResponse(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsFileDownload() *RtsFileDownload {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsFileDownload {
		return nil
	}
	return m.value.(*RtsFileDownload)
}

func (m *RtsConnection_4) SetRtsFileDownload(value *RtsFileDownload) {
	newTag := RtsConnection_4Tag_RtsFileDownload
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsFileDownload(value *RtsFileDownload) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsFileDownload(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsWifiForgetRequest() *RtsWifiForgetRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsWifiForgetRequest {
		return nil
	}
	return m.value.(*RtsWifiForgetRequest)
}

func (m *RtsConnection_4) SetRtsWifiForgetRequest(value *RtsWifiForgetRequest) {
	newTag := RtsConnection_4Tag_RtsWifiForgetRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsWifiForgetRequest(value *RtsWifiForgetRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsWifiForgetRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsWifiForgetResponse() *RtsWifiForgetResponse {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsWifiForgetResponse {
		return nil
	}
	return m.value.(*RtsWifiForgetResponse)
}

func (m *RtsConnection_4) SetRtsWifiForgetResponse(value *RtsWifiForgetResponse) {
	newTag := RtsConnection_4Tag_RtsWifiForgetResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsWifiForgetResponse(value *RtsWifiForgetResponse) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsWifiForgetResponse(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsCloudSessionRequest() *RtsCloudSessionRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsCloudSessionRequest {
		return nil
	}
	return m.value.(*RtsCloudSessionRequest)
}

func (m *RtsConnection_4) SetRtsCloudSessionRequest(value *RtsCloudSessionRequest) {
	newTag := RtsConnection_4Tag_RtsCloudSessionRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsCloudSessionRequest(value *RtsCloudSessionRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsCloudSessionRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsCloudSessionResponse() *RtsCloudSessionResponse {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsCloudSessionResponse {
		return nil
	}
	return m.value.(*RtsCloudSessionResponse)
}

func (m *RtsConnection_4) SetRtsCloudSessionResponse(value *RtsCloudSessionResponse) {
	newTag := RtsConnection_4Tag_RtsCloudSessionResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsCloudSessionResponse(value *RtsCloudSessionResponse) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsCloudSessionResponse(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsAppConnectionIdRequest() *RtsAppConnectionIdRequest {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsAppConnectionIdRequest {
		return nil
	}
	return m.value.(*RtsAppConnectionIdRequest)
}

func (m *RtsConnection_4) SetRtsAppConnectionIdRequest(value *RtsAppConnectionIdRequest) {
	newTag := RtsConnection_4Tag_RtsAppConnectionIdRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsAppConnectionIdRequest(value *RtsAppConnectionIdRequest) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsAppConnectionIdRequest(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsAppConnectionIdResponse() *RtsAppConnectionIdResponse {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsAppConnectionIdResponse {
		return nil
	}
	return m.value.(*RtsAppConnectionIdResponse)
}

func (m *RtsConnection_4) SetRtsAppConnectionIdResponse(value *RtsAppConnectionIdResponse) {
	newTag := RtsConnection_4Tag_RtsAppConnectionIdResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsAppConnectionIdResponse(value *RtsAppConnectionIdResponse) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsAppConnectionIdResponse(value)
	return &ret
}

func (m *RtsConnection_4) GetRtsResponse() *RtsResponse {
	if m.tag == nil || *m.tag != RtsConnection_4Tag_RtsResponse {
		return nil
	}
	return m.value.(*RtsResponse)
}

func (m *RtsConnection_4) SetRtsResponse(value *RtsResponse) {
	newTag := RtsConnection_4Tag_RtsResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_4WithRtsResponse(value *RtsResponse) *RtsConnection_4 {
	var ret RtsConnection_4
	ret.SetRtsResponse(value)
	return &ret
}

// UNION RtsConnection_5
type RtsConnection_5Tag uint8

const (
	RtsConnection_5Tag_Error                      RtsConnection_5Tag = 0x0  // 0
	RtsConnection_5Tag_RtsConnRequest             RtsConnection_5Tag = 0x1  // 1
	RtsConnection_5Tag_RtsConnResponse            RtsConnection_5Tag = 0x2  // 2
	RtsConnection_5Tag_RtsNonceMessage            RtsConnection_5Tag = 0x3  // 3
	RtsConnection_5Tag_RtsChallengeMessage        RtsConnection_5Tag = 0x4  // 4
	RtsConnection_5Tag_RtsChallengeSuccessMessage RtsConnection_5Tag = 0x5  // 5
	RtsConnection_5Tag_RtsWifiConnectRequest      RtsConnection_5Tag = 0x6  // 6
	RtsConnection_5Tag_RtsWifiConnectResponse3    RtsConnection_5Tag = 0x7  // 7
	RtsConnection_5Tag_RtsWifiIpRequest           RtsConnection_5Tag = 0x8  // 8
	RtsConnection_5Tag_RtsWifiIpResponse          RtsConnection_5Tag = 0x9  // 9
	RtsConnection_5Tag_RtsStatusRequest           RtsConnection_5Tag = 0xa  // 10
	RtsConnection_5Tag_RtsStatusResponse5         RtsConnection_5Tag = 0xb  // 11
	RtsConnection_5Tag_RtsWifiScanRequest         RtsConnection_5Tag = 0xc  // 12
	RtsConnection_5Tag_RtsWifiScanResponse3       RtsConnection_5Tag = 0xd  // 13
	RtsConnection_5Tag_RtsOtaUpdateRequest        RtsConnection_5Tag = 0xe  // 14
	RtsConnection_5Tag_RtsOtaUpdateResponse       RtsConnection_5Tag = 0xf  // 15
	RtsConnection_5Tag_RtsCancelPairing           RtsConnection_5Tag = 0x10 // 16
	RtsConnection_5Tag_RtsForceDisconnect         RtsConnection_5Tag = 0x11 // 17
	RtsConnection_5Tag_RtsAck                     RtsConnection_5Tag = 0x12 // 18
	RtsConnection_5Tag_RtsWifiAccessPointRequest  RtsConnection_5Tag = 0x13 // 19
	RtsConnection_5Tag_RtsWifiAccessPointResponse RtsConnection_5Tag = 0x14 // 20
	RtsConnection_5Tag_RtsSshRequest              RtsConnection_5Tag = 0x15 // 21
	RtsConnection_5Tag_RtsSshResponse             RtsConnection_5Tag = 0x16 // 22
	RtsConnection_5Tag_RtsOtaCancelRequest        RtsConnection_5Tag = 0x17 // 23
	RtsConnection_5Tag_RtsLogRequest              RtsConnection_5Tag = 0x18 // 24
	RtsConnection_5Tag_RtsLogResponse             RtsConnection_5Tag = 0x19 // 25
	RtsConnection_5Tag_RtsFileDownload            RtsConnection_5Tag = 0x1a // 26
	RtsConnection_5Tag_RtsWifiForgetRequest       RtsConnection_5Tag = 0x1b // 27
	RtsConnection_5Tag_RtsWifiForgetResponse      RtsConnection_5Tag = 0x1c // 28
	RtsConnection_5Tag_RtsCloudSessionRequest5    RtsConnection_5Tag = 0x1d // 29
	RtsConnection_5Tag_RtsCloudSessionResponse    RtsConnection_5Tag = 0x1e // 30
	RtsConnection_5Tag_RtsAppConnectionIdRequest  RtsConnection_5Tag = 0x1f // 31
	RtsConnection_5Tag_RtsAppConnectionIdResponse RtsConnection_5Tag = 0x20 // 32
	RtsConnection_5Tag_RtsResponse                RtsConnection_5Tag = 0x21 // 33
	RtsConnection_5Tag_RtsSdkProxyRequest         RtsConnection_5Tag = 0x22 // 34
	RtsConnection_5Tag_RtsSdkProxyResponse        RtsConnection_5Tag = 0x23 // 35
	RtsConnection_5Tag_INVALID                    RtsConnection_5Tag = 255
)

type RtsConnection_5 struct {
	tag   *RtsConnection_5Tag
	value clad.Struct
}

func (m *RtsConnection_5) Tag() RtsConnection_5Tag {
	if m.tag == nil {
		return RtsConnection_5Tag_INVALID
	}
	return *m.tag
}

func (m *RtsConnection_5) Size() uint32 {
	if m.tag == nil || *m.tag == RtsConnection_5Tag_INVALID {
		return 1
	}
	return 1 + m.value.Size()
}

func (m *RtsConnection_5) Pack(buf *bytes.Buffer) error {
	tag := RtsConnection_5Tag_INVALID
	if m.tag != nil {
		tag = *m.tag
	}
	if err := binary.Write(buf, binary.LittleEndian, tag); err != nil {
		return err
	}
	if tag == RtsConnection_5Tag_INVALID {
		return nil
	}
	return m.value.Pack(buf)
}

func (m *RtsConnection_5) unpackStruct(tag RtsConnection_5Tag, buf *bytes.Buffer) (clad.Struct, error) {
	switch tag {
	case RtsConnection_5Tag_Error:
		var ret Error
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsConnRequest:
		var ret RtsConnRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsConnResponse:
		var ret RtsConnResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsNonceMessage:
		var ret RtsNonceMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsChallengeMessage:
		var ret RtsChallengeMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsChallengeSuccessMessage:
		var ret RtsChallengeSuccessMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsWifiConnectRequest:
		var ret RtsWifiConnectRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsWifiConnectResponse3:
		var ret RtsWifiConnectResponse_3
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsWifiIpRequest:
		var ret RtsWifiIpRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsWifiIpResponse:
		var ret RtsWifiIpResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsStatusRequest:
		var ret RtsStatusRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsStatusResponse5:
		var ret RtsStatusResponse_5
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsWifiScanRequest:
		var ret RtsWifiScanRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsWifiScanResponse3:
		var ret RtsWifiScanResponse_3
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsOtaUpdateRequest:
		var ret RtsOtaUpdateRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsOtaUpdateResponse:
		var ret RtsOtaUpdateResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsCancelPairing:
		var ret RtsCancelPairing
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsForceDisconnect:
		var ret RtsForceDisconnect
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsAck:
		var ret RtsAck
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsWifiAccessPointRequest:
		var ret RtsWifiAccessPointRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsWifiAccessPointResponse:
		var ret RtsWifiAccessPointResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsSshRequest:
		var ret RtsSshRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsSshResponse:
		var ret RtsSshResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsOtaCancelRequest:
		var ret RtsOtaCancelRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsLogRequest:
		var ret RtsLogRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsLogResponse:
		var ret RtsLogResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsFileDownload:
		var ret RtsFileDownload
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsWifiForgetRequest:
		var ret RtsWifiForgetRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsWifiForgetResponse:
		var ret RtsWifiForgetResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsCloudSessionRequest5:
		var ret RtsCloudSessionRequest_5
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsCloudSessionResponse:
		var ret RtsCloudSessionResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsAppConnectionIdRequest:
		var ret RtsAppConnectionIdRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsAppConnectionIdResponse:
		var ret RtsAppConnectionIdResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsResponse:
		var ret RtsResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsSdkProxyRequest:
		var ret RtsSdkProxyRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_5Tag_RtsSdkProxyResponse:
		var ret RtsSdkProxyResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	default:
		return nil, errors.New("invalid tag to unpackStruct")
	}
}

func (m *RtsConnection_5) Unpack(buf *bytes.Buffer) error {
	tag := RtsConnection_5Tag_INVALID
	if err := binary.Read(buf, binary.LittleEndian, &tag); err != nil {
		return err
	}
	m.tag = &tag
	if tag == RtsConnection_5Tag_INVALID {
		m.value = nil
		return nil
	}
	val, err := m.unpackStruct(tag, buf)
	if err != nil {
		*m.tag = RtsConnection_5Tag_INVALID
		return err
	}
	m.value = val
	return nil
}

func (t RtsConnection_5Tag) String() string {
	switch t {
	case RtsConnection_5Tag_Error:
		return "Error"
	case RtsConnection_5Tag_RtsConnRequest:
		return "RtsConnRequest"
	case RtsConnection_5Tag_RtsConnResponse:
		return "RtsConnResponse"
	case RtsConnection_5Tag_RtsNonceMessage:
		return "RtsNonceMessage"
	case RtsConnection_5Tag_RtsChallengeMessage:
		return "RtsChallengeMessage"
	case RtsConnection_5Tag_RtsChallengeSuccessMessage:
		return "RtsChallengeSuccessMessage"
	case RtsConnection_5Tag_RtsWifiConnectRequest:
		return "RtsWifiConnectRequest"
	case RtsConnection_5Tag_RtsWifiConnectResponse3:
		return "RtsWifiConnectResponse3"
	case RtsConnection_5Tag_RtsWifiIpRequest:
		return "RtsWifiIpRequest"
	case RtsConnection_5Tag_RtsWifiIpResponse:
		return "RtsWifiIpResponse"
	case RtsConnection_5Tag_RtsStatusRequest:
		return "RtsStatusRequest"
	case RtsConnection_5Tag_RtsStatusResponse5:
		return "RtsStatusResponse5"
	case RtsConnection_5Tag_RtsWifiScanRequest:
		return "RtsWifiScanRequest"
	case RtsConnection_5Tag_RtsWifiScanResponse3:
		return "RtsWifiScanResponse3"
	case RtsConnection_5Tag_RtsOtaUpdateRequest:
		return "RtsOtaUpdateRequest"
	case RtsConnection_5Tag_RtsOtaUpdateResponse:
		return "RtsOtaUpdateResponse"
	case RtsConnection_5Tag_RtsCancelPairing:
		return "RtsCancelPairing"
	case RtsConnection_5Tag_RtsForceDisconnect:
		return "RtsForceDisconnect"
	case RtsConnection_5Tag_RtsAck:
		return "RtsAck"
	case RtsConnection_5Tag_RtsWifiAccessPointRequest:
		return "RtsWifiAccessPointRequest"
	case RtsConnection_5Tag_RtsWifiAccessPointResponse:
		return "RtsWifiAccessPointResponse"
	case RtsConnection_5Tag_RtsSshRequest:
		return "RtsSshRequest"
	case RtsConnection_5Tag_RtsSshResponse:
		return "RtsSshResponse"
	case RtsConnection_5Tag_RtsOtaCancelRequest:
		return "RtsOtaCancelRequest"
	case RtsConnection_5Tag_RtsLogRequest:
		return "RtsLogRequest"
	case RtsConnection_5Tag_RtsLogResponse:
		return "RtsLogResponse"
	case RtsConnection_5Tag_RtsFileDownload:
		return "RtsFileDownload"
	case RtsConnection_5Tag_RtsWifiForgetRequest:
		return "RtsWifiForgetRequest"
	case RtsConnection_5Tag_RtsWifiForgetResponse:
		return "RtsWifiForgetResponse"
	case RtsConnection_5Tag_RtsCloudSessionRequest5:
		return "RtsCloudSessionRequest5"
	case RtsConnection_5Tag_RtsCloudSessionResponse:
		return "RtsCloudSessionResponse"
	case RtsConnection_5Tag_RtsAppConnectionIdRequest:
		return "RtsAppConnectionIdRequest"
	case RtsConnection_5Tag_RtsAppConnectionIdResponse:
		return "RtsAppConnectionIdResponse"
	case RtsConnection_5Tag_RtsResponse:
		return "RtsResponse"
	case RtsConnection_5Tag_RtsSdkProxyRequest:
		return "RtsSdkProxyRequest"
	case RtsConnection_5Tag_RtsSdkProxyResponse:
		return "RtsSdkProxyResponse"
	default:
		return "INVALID"
	}
}

func (m *RtsConnection_5) String() string {
	if m.tag == nil {
		return "nil"
	}
	if *m.tag == RtsConnection_5Tag_INVALID {
		return "INVALID"
	}
	return fmt.Sprintf("%s: {%s}", *m.tag, m.value)
}

func (m *RtsConnection_5) GetError() *Error {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_Error {
		return nil
	}
	return m.value.(*Error)
}

func (m *RtsConnection_5) SetError(value *Error) {
	newTag := RtsConnection_5Tag_Error
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithError(value *Error) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetError(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsConnRequest() *RtsConnRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsConnRequest {
		return nil
	}
	return m.value.(*RtsConnRequest)
}

func (m *RtsConnection_5) SetRtsConnRequest(value *RtsConnRequest) {
	newTag := RtsConnection_5Tag_RtsConnRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsConnRequest(value *RtsConnRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsConnRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsConnResponse() *RtsConnResponse {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsConnResponse {
		return nil
	}
	return m.value.(*RtsConnResponse)
}

func (m *RtsConnection_5) SetRtsConnResponse(value *RtsConnResponse) {
	newTag := RtsConnection_5Tag_RtsConnResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsConnResponse(value *RtsConnResponse) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsConnResponse(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsNonceMessage() *RtsNonceMessage {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsNonceMessage {
		return nil
	}
	return m.value.(*RtsNonceMessage)
}

func (m *RtsConnection_5) SetRtsNonceMessage(value *RtsNonceMessage) {
	newTag := RtsConnection_5Tag_RtsNonceMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsNonceMessage(value *RtsNonceMessage) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsNonceMessage(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsChallengeMessage() *RtsChallengeMessage {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsChallengeMessage {
		return nil
	}
	return m.value.(*RtsChallengeMessage)
}

func (m *RtsConnection_5) SetRtsChallengeMessage(value *RtsChallengeMessage) {
	newTag := RtsConnection_5Tag_RtsChallengeMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsChallengeMessage(value *RtsChallengeMessage) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsChallengeMessage(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsChallengeSuccessMessage() *RtsChallengeSuccessMessage {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsChallengeSuccessMessage {
		return nil
	}
	return m.value.(*RtsChallengeSuccessMessage)
}

func (m *RtsConnection_5) SetRtsChallengeSuccessMessage(value *RtsChallengeSuccessMessage) {
	newTag := RtsConnection_5Tag_RtsChallengeSuccessMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsChallengeSuccessMessage(value *RtsChallengeSuccessMessage) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsChallengeSuccessMessage(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsWifiConnectRequest() *RtsWifiConnectRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsWifiConnectRequest {
		return nil
	}
	return m.value.(*RtsWifiConnectRequest)
}

func (m *RtsConnection_5) SetRtsWifiConnectRequest(value *RtsWifiConnectRequest) {
	newTag := RtsConnection_5Tag_RtsWifiConnectRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsWifiConnectRequest(value *RtsWifiConnectRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsWifiConnectRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsWifiConnectResponse3() *RtsWifiConnectResponse_3 {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsWifiConnectResponse3 {
		return nil
	}
	return m.value.(*RtsWifiConnectResponse_3)
}

func (m *RtsConnection_5) SetRtsWifiConnectResponse3(value *RtsWifiConnectResponse_3) {
	newTag := RtsConnection_5Tag_RtsWifiConnectResponse3
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsWifiConnectResponse3(value *RtsWifiConnectResponse_3) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsWifiConnectResponse3(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsWifiIpRequest() *RtsWifiIpRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsWifiIpRequest {
		return nil
	}
	return m.value.(*RtsWifiIpRequest)
}

func (m *RtsConnection_5) SetRtsWifiIpRequest(value *RtsWifiIpRequest) {
	newTag := RtsConnection_5Tag_RtsWifiIpRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsWifiIpRequest(value *RtsWifiIpRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsWifiIpRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsWifiIpResponse() *RtsWifiIpResponse {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsWifiIpResponse {
		return nil
	}
	return m.value.(*RtsWifiIpResponse)
}

func (m *RtsConnection_5) SetRtsWifiIpResponse(value *RtsWifiIpResponse) {
	newTag := RtsConnection_5Tag_RtsWifiIpResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsWifiIpResponse(value *RtsWifiIpResponse) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsWifiIpResponse(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsStatusRequest() *RtsStatusRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsStatusRequest {
		return nil
	}
	return m.value.(*RtsStatusRequest)
}

func (m *RtsConnection_5) SetRtsStatusRequest(value *RtsStatusRequest) {
	newTag := RtsConnection_5Tag_RtsStatusRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsStatusRequest(value *RtsStatusRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsStatusRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsStatusResponse5() *RtsStatusResponse_5 {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsStatusResponse5 {
		return nil
	}
	return m.value.(*RtsStatusResponse_5)
}

func (m *RtsConnection_5) SetRtsStatusResponse5(value *RtsStatusResponse_5) {
	newTag := RtsConnection_5Tag_RtsStatusResponse5
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsStatusResponse5(value *RtsStatusResponse_5) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsStatusResponse5(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsWifiScanRequest() *RtsWifiScanRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsWifiScanRequest {
		return nil
	}
	return m.value.(*RtsWifiScanRequest)
}

func (m *RtsConnection_5) SetRtsWifiScanRequest(value *RtsWifiScanRequest) {
	newTag := RtsConnection_5Tag_RtsWifiScanRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsWifiScanRequest(value *RtsWifiScanRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsWifiScanRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsWifiScanResponse3() *RtsWifiScanResponse_3 {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsWifiScanResponse3 {
		return nil
	}
	return m.value.(*RtsWifiScanResponse_3)
}

func (m *RtsConnection_5) SetRtsWifiScanResponse3(value *RtsWifiScanResponse_3) {
	newTag := RtsConnection_5Tag_RtsWifiScanResponse3
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsWifiScanResponse3(value *RtsWifiScanResponse_3) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsWifiScanResponse3(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsOtaUpdateRequest() *RtsOtaUpdateRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsOtaUpdateRequest {
		return nil
	}
	return m.value.(*RtsOtaUpdateRequest)
}

func (m *RtsConnection_5) SetRtsOtaUpdateRequest(value *RtsOtaUpdateRequest) {
	newTag := RtsConnection_5Tag_RtsOtaUpdateRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsOtaUpdateRequest(value *RtsOtaUpdateRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsOtaUpdateRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsOtaUpdateResponse() *RtsOtaUpdateResponse {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsOtaUpdateResponse {
		return nil
	}
	return m.value.(*RtsOtaUpdateResponse)
}

func (m *RtsConnection_5) SetRtsOtaUpdateResponse(value *RtsOtaUpdateResponse) {
	newTag := RtsConnection_5Tag_RtsOtaUpdateResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsOtaUpdateResponse(value *RtsOtaUpdateResponse) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsOtaUpdateResponse(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsCancelPairing() *RtsCancelPairing {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsCancelPairing {
		return nil
	}
	return m.value.(*RtsCancelPairing)
}

func (m *RtsConnection_5) SetRtsCancelPairing(value *RtsCancelPairing) {
	newTag := RtsConnection_5Tag_RtsCancelPairing
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsCancelPairing(value *RtsCancelPairing) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsCancelPairing(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsForceDisconnect() *RtsForceDisconnect {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsForceDisconnect {
		return nil
	}
	return m.value.(*RtsForceDisconnect)
}

func (m *RtsConnection_5) SetRtsForceDisconnect(value *RtsForceDisconnect) {
	newTag := RtsConnection_5Tag_RtsForceDisconnect
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsForceDisconnect(value *RtsForceDisconnect) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsForceDisconnect(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsAck() *RtsAck {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsAck {
		return nil
	}
	return m.value.(*RtsAck)
}

func (m *RtsConnection_5) SetRtsAck(value *RtsAck) {
	newTag := RtsConnection_5Tag_RtsAck
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsAck(value *RtsAck) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsAck(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsWifiAccessPointRequest() *RtsWifiAccessPointRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsWifiAccessPointRequest {
		return nil
	}
	return m.value.(*RtsWifiAccessPointRequest)
}

func (m *RtsConnection_5) SetRtsWifiAccessPointRequest(value *RtsWifiAccessPointRequest) {
	newTag := RtsConnection_5Tag_RtsWifiAccessPointRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsWifiAccessPointRequest(value *RtsWifiAccessPointRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsWifiAccessPointRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsWifiAccessPointResponse() *RtsWifiAccessPointResponse {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsWifiAccessPointResponse {
		return nil
	}
	return m.value.(*RtsWifiAccessPointResponse)
}

func (m *RtsConnection_5) SetRtsWifiAccessPointResponse(value *RtsWifiAccessPointResponse) {
	newTag := RtsConnection_5Tag_RtsWifiAccessPointResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsWifiAccessPointResponse(value *RtsWifiAccessPointResponse) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsWifiAccessPointResponse(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsSshRequest() *RtsSshRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsSshRequest {
		return nil
	}
	return m.value.(*RtsSshRequest)
}

func (m *RtsConnection_5) SetRtsSshRequest(value *RtsSshRequest) {
	newTag := RtsConnection_5Tag_RtsSshRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsSshRequest(value *RtsSshRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsSshRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsSshResponse() *RtsSshResponse {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsSshResponse {
		return nil
	}
	return m.value.(*RtsSshResponse)
}

func (m *RtsConnection_5) SetRtsSshResponse(value *RtsSshResponse) {
	newTag := RtsConnection_5Tag_RtsSshResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsSshResponse(value *RtsSshResponse) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsSshResponse(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsOtaCancelRequest() *RtsOtaCancelRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsOtaCancelRequest {
		return nil
	}
	return m.value.(*RtsOtaCancelRequest)
}

func (m *RtsConnection_5) SetRtsOtaCancelRequest(value *RtsOtaCancelRequest) {
	newTag := RtsConnection_5Tag_RtsOtaCancelRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsOtaCancelRequest(value *RtsOtaCancelRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsOtaCancelRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsLogRequest() *RtsLogRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsLogRequest {
		return nil
	}
	return m.value.(*RtsLogRequest)
}

func (m *RtsConnection_5) SetRtsLogRequest(value *RtsLogRequest) {
	newTag := RtsConnection_5Tag_RtsLogRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsLogRequest(value *RtsLogRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsLogRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsLogResponse() *RtsLogResponse {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsLogResponse {
		return nil
	}
	return m.value.(*RtsLogResponse)
}

func (m *RtsConnection_5) SetRtsLogResponse(value *RtsLogResponse) {
	newTag := RtsConnection_5Tag_RtsLogResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsLogResponse(value *RtsLogResponse) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsLogResponse(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsFileDownload() *RtsFileDownload {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsFileDownload {
		return nil
	}
	return m.value.(*RtsFileDownload)
}

func (m *RtsConnection_5) SetRtsFileDownload(value *RtsFileDownload) {
	newTag := RtsConnection_5Tag_RtsFileDownload
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsFileDownload(value *RtsFileDownload) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsFileDownload(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsWifiForgetRequest() *RtsWifiForgetRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsWifiForgetRequest {
		return nil
	}
	return m.value.(*RtsWifiForgetRequest)
}

func (m *RtsConnection_5) SetRtsWifiForgetRequest(value *RtsWifiForgetRequest) {
	newTag := RtsConnection_5Tag_RtsWifiForgetRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsWifiForgetRequest(value *RtsWifiForgetRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsWifiForgetRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsWifiForgetResponse() *RtsWifiForgetResponse {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsWifiForgetResponse {
		return nil
	}
	return m.value.(*RtsWifiForgetResponse)
}

func (m *RtsConnection_5) SetRtsWifiForgetResponse(value *RtsWifiForgetResponse) {
	newTag := RtsConnection_5Tag_RtsWifiForgetResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsWifiForgetResponse(value *RtsWifiForgetResponse) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsWifiForgetResponse(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsCloudSessionRequest5() *RtsCloudSessionRequest_5 {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsCloudSessionRequest5 {
		return nil
	}
	return m.value.(*RtsCloudSessionRequest_5)
}

func (m *RtsConnection_5) SetRtsCloudSessionRequest5(value *RtsCloudSessionRequest_5) {
	newTag := RtsConnection_5Tag_RtsCloudSessionRequest5
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsCloudSessionRequest5(value *RtsCloudSessionRequest_5) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsCloudSessionRequest5(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsCloudSessionResponse() *RtsCloudSessionResponse {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsCloudSessionResponse {
		return nil
	}
	return m.value.(*RtsCloudSessionResponse)
}

func (m *RtsConnection_5) SetRtsCloudSessionResponse(value *RtsCloudSessionResponse) {
	newTag := RtsConnection_5Tag_RtsCloudSessionResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsCloudSessionResponse(value *RtsCloudSessionResponse) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsCloudSessionResponse(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsAppConnectionIdRequest() *RtsAppConnectionIdRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsAppConnectionIdRequest {
		return nil
	}
	return m.value.(*RtsAppConnectionIdRequest)
}

func (m *RtsConnection_5) SetRtsAppConnectionIdRequest(value *RtsAppConnectionIdRequest) {
	newTag := RtsConnection_5Tag_RtsAppConnectionIdRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsAppConnectionIdRequest(value *RtsAppConnectionIdRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsAppConnectionIdRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsAppConnectionIdResponse() *RtsAppConnectionIdResponse {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsAppConnectionIdResponse {
		return nil
	}
	return m.value.(*RtsAppConnectionIdResponse)
}

func (m *RtsConnection_5) SetRtsAppConnectionIdResponse(value *RtsAppConnectionIdResponse) {
	newTag := RtsConnection_5Tag_RtsAppConnectionIdResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsAppConnectionIdResponse(value *RtsAppConnectionIdResponse) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsAppConnectionIdResponse(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsResponse() *RtsResponse {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsResponse {
		return nil
	}
	return m.value.(*RtsResponse)
}

func (m *RtsConnection_5) SetRtsResponse(value *RtsResponse) {
	newTag := RtsConnection_5Tag_RtsResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsResponse(value *RtsResponse) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsResponse(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsSdkProxyRequest() *RtsSdkProxyRequest {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsSdkProxyRequest {
		return nil
	}
	return m.value.(*RtsSdkProxyRequest)
}

func (m *RtsConnection_5) SetRtsSdkProxyRequest(value *RtsSdkProxyRequest) {
	newTag := RtsConnection_5Tag_RtsSdkProxyRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsSdkProxyRequest(value *RtsSdkProxyRequest) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsSdkProxyRequest(value)
	return &ret
}

func (m *RtsConnection_5) GetRtsSdkProxyResponse() *RtsSdkProxyResponse {
	if m.tag == nil || *m.tag != RtsConnection_5Tag_RtsSdkProxyResponse {
		return nil
	}
	return m.value.(*RtsSdkProxyResponse)
}

func (m *RtsConnection_5) SetRtsSdkProxyResponse(value *RtsSdkProxyResponse) {
	newTag := RtsConnection_5Tag_RtsSdkProxyResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_5WithRtsSdkProxyResponse(value *RtsSdkProxyResponse) *RtsConnection_5 {
	var ret RtsConnection_5
	ret.SetRtsSdkProxyResponse(value)
	return &ret
}

// UNION RtsConnection_1
type RtsConnection_1Tag uint8

const (
	RtsConnection_1Tag_Error                      RtsConnection_1Tag = 0x0  // 0
	RtsConnection_1Tag_RtsConnRequest             RtsConnection_1Tag = 0x1  // 1
	RtsConnection_1Tag_RtsConnResponse            RtsConnection_1Tag = 0x2  // 2
	RtsConnection_1Tag_RtsNonceMessage            RtsConnection_1Tag = 0x3  // 3
	RtsConnection_1Tag_RtsChallengeMessage        RtsConnection_1Tag = 0x4  // 4
	RtsConnection_1Tag_RtsChallengeSuccessMessage RtsConnection_1Tag = 0x5  // 5
	RtsConnection_1Tag_RtsWifiConnectRequest      RtsConnection_1Tag = 0x6  // 6
	RtsConnection_1Tag_RtsWifiConnectResponse     RtsConnection_1Tag = 0x7  // 7
	RtsConnection_1Tag_RtsWifiIpRequest           RtsConnection_1Tag = 0x8  // 8
	RtsConnection_1Tag_RtsWifiIpResponse          RtsConnection_1Tag = 0x9  // 9
	RtsConnection_1Tag_RtsStatusRequest           RtsConnection_1Tag = 0xa  // 10
	RtsConnection_1Tag_RtsStatusResponse          RtsConnection_1Tag = 0xb  // 11
	RtsConnection_1Tag_RtsWifiScanRequest         RtsConnection_1Tag = 0xc  // 12
	RtsConnection_1Tag_RtsWifiScanResponse        RtsConnection_1Tag = 0xd  // 13
	RtsConnection_1Tag_RtsOtaUpdateRequest        RtsConnection_1Tag = 0xe  // 14
	RtsConnection_1Tag_RtsOtaUpdateResponse       RtsConnection_1Tag = 0xf  // 15
	RtsConnection_1Tag_RtsCancelPairing           RtsConnection_1Tag = 0x10 // 16
	RtsConnection_1Tag_RtsForceDisconnect         RtsConnection_1Tag = 0x11 // 17
	RtsConnection_1Tag_RtsAck                     RtsConnection_1Tag = 0x12 // 18
	RtsConnection_1Tag_RtsWifiAccessPointRequest  RtsConnection_1Tag = 0x13 // 19
	RtsConnection_1Tag_RtsWifiAccessPointResponse RtsConnection_1Tag = 0x14 // 20
	RtsConnection_1Tag_RtsSshRequest              RtsConnection_1Tag = 0x15 // 21
	RtsConnection_1Tag_RtsSshResponse             RtsConnection_1Tag = 0x16 // 22
	RtsConnection_1Tag_INVALID                    RtsConnection_1Tag = 255
)

type RtsConnection_1 struct {
	tag   *RtsConnection_1Tag
	value clad.Struct
}

func (m *RtsConnection_1) Tag() RtsConnection_1Tag {
	if m.tag == nil {
		return RtsConnection_1Tag_INVALID
	}
	return *m.tag
}

func (m *RtsConnection_1) Size() uint32 {
	if m.tag == nil || *m.tag == RtsConnection_1Tag_INVALID {
		return 1
	}
	return 1 + m.value.Size()
}

func (m *RtsConnection_1) Pack(buf *bytes.Buffer) error {
	tag := RtsConnection_1Tag_INVALID
	if m.tag != nil {
		tag = *m.tag
	}
	if err := binary.Write(buf, binary.LittleEndian, tag); err != nil {
		return err
	}
	if tag == RtsConnection_1Tag_INVALID {
		return nil
	}
	return m.value.Pack(buf)
}

func (m *RtsConnection_1) unpackStruct(tag RtsConnection_1Tag, buf *bytes.Buffer) (clad.Struct, error) {
	switch tag {
	case RtsConnection_1Tag_Error:
		var ret Error
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsConnRequest:
		var ret RtsConnRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsConnResponse:
		var ret RtsConnResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsNonceMessage:
		var ret RtsNonceMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsChallengeMessage:
		var ret RtsChallengeMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsChallengeSuccessMessage:
		var ret RtsChallengeSuccessMessage
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsWifiConnectRequest:
		var ret RtsWifiConnectRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsWifiConnectResponse:
		var ret RtsWifiConnectResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsWifiIpRequest:
		var ret RtsWifiIpRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsWifiIpResponse:
		var ret RtsWifiIpResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsStatusRequest:
		var ret RtsStatusRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsStatusResponse:
		var ret RtsStatusResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsWifiScanRequest:
		var ret RtsWifiScanRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsWifiScanResponse:
		var ret RtsWifiScanResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsOtaUpdateRequest:
		var ret RtsOtaUpdateRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsOtaUpdateResponse:
		var ret RtsOtaUpdateResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsCancelPairing:
		var ret RtsCancelPairing
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsForceDisconnect:
		var ret RtsForceDisconnect
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsAck:
		var ret RtsAck
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsWifiAccessPointRequest:
		var ret RtsWifiAccessPointRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsWifiAccessPointResponse:
		var ret RtsWifiAccessPointResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsSshRequest:
		var ret RtsSshRequest
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnection_1Tag_RtsSshResponse:
		var ret RtsSshResponse
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	default:
		return nil, errors.New("invalid tag to unpackStruct")
	}
}

func (m *RtsConnection_1) Unpack(buf *bytes.Buffer) error {
	tag := RtsConnection_1Tag_INVALID
	if err := binary.Read(buf, binary.LittleEndian, &tag); err != nil {
		return err
	}
	m.tag = &tag
	if tag == RtsConnection_1Tag_INVALID {
		m.value = nil
		return nil
	}
	val, err := m.unpackStruct(tag, buf)
	if err != nil {
		*m.tag = RtsConnection_1Tag_INVALID
		return err
	}
	m.value = val
	return nil
}

func (t RtsConnection_1Tag) String() string {
	switch t {
	case RtsConnection_1Tag_Error:
		return "Error"
	case RtsConnection_1Tag_RtsConnRequest:
		return "RtsConnRequest"
	case RtsConnection_1Tag_RtsConnResponse:
		return "RtsConnResponse"
	case RtsConnection_1Tag_RtsNonceMessage:
		return "RtsNonceMessage"
	case RtsConnection_1Tag_RtsChallengeMessage:
		return "RtsChallengeMessage"
	case RtsConnection_1Tag_RtsChallengeSuccessMessage:
		return "RtsChallengeSuccessMessage"
	case RtsConnection_1Tag_RtsWifiConnectRequest:
		return "RtsWifiConnectRequest"
	case RtsConnection_1Tag_RtsWifiConnectResponse:
		return "RtsWifiConnectResponse"
	case RtsConnection_1Tag_RtsWifiIpRequest:
		return "RtsWifiIpRequest"
	case RtsConnection_1Tag_RtsWifiIpResponse:
		return "RtsWifiIpResponse"
	case RtsConnection_1Tag_RtsStatusRequest:
		return "RtsStatusRequest"
	case RtsConnection_1Tag_RtsStatusResponse:
		return "RtsStatusResponse"
	case RtsConnection_1Tag_RtsWifiScanRequest:
		return "RtsWifiScanRequest"
	case RtsConnection_1Tag_RtsWifiScanResponse:
		return "RtsWifiScanResponse"
	case RtsConnection_1Tag_RtsOtaUpdateRequest:
		return "RtsOtaUpdateRequest"
	case RtsConnection_1Tag_RtsOtaUpdateResponse:
		return "RtsOtaUpdateResponse"
	case RtsConnection_1Tag_RtsCancelPairing:
		return "RtsCancelPairing"
	case RtsConnection_1Tag_RtsForceDisconnect:
		return "RtsForceDisconnect"
	case RtsConnection_1Tag_RtsAck:
		return "RtsAck"
	case RtsConnection_1Tag_RtsWifiAccessPointRequest:
		return "RtsWifiAccessPointRequest"
	case RtsConnection_1Tag_RtsWifiAccessPointResponse:
		return "RtsWifiAccessPointResponse"
	case RtsConnection_1Tag_RtsSshRequest:
		return "RtsSshRequest"
	case RtsConnection_1Tag_RtsSshResponse:
		return "RtsSshResponse"
	default:
		return "INVALID"
	}
}

func (m *RtsConnection_1) String() string {
	if m.tag == nil {
		return "nil"
	}
	if *m.tag == RtsConnection_1Tag_INVALID {
		return "INVALID"
	}
	return fmt.Sprintf("%s: {%s}", *m.tag, m.value)
}

func (m *RtsConnection_1) GetError() *Error {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_Error {
		return nil
	}
	return m.value.(*Error)
}

func (m *RtsConnection_1) SetError(value *Error) {
	newTag := RtsConnection_1Tag_Error
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithError(value *Error) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetError(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsConnRequest() *RtsConnRequest {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsConnRequest {
		return nil
	}
	return m.value.(*RtsConnRequest)
}

func (m *RtsConnection_1) SetRtsConnRequest(value *RtsConnRequest) {
	newTag := RtsConnection_1Tag_RtsConnRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsConnRequest(value *RtsConnRequest) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsConnRequest(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsConnResponse() *RtsConnResponse {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsConnResponse {
		return nil
	}
	return m.value.(*RtsConnResponse)
}

func (m *RtsConnection_1) SetRtsConnResponse(value *RtsConnResponse) {
	newTag := RtsConnection_1Tag_RtsConnResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsConnResponse(value *RtsConnResponse) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsConnResponse(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsNonceMessage() *RtsNonceMessage {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsNonceMessage {
		return nil
	}
	return m.value.(*RtsNonceMessage)
}

func (m *RtsConnection_1) SetRtsNonceMessage(value *RtsNonceMessage) {
	newTag := RtsConnection_1Tag_RtsNonceMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsNonceMessage(value *RtsNonceMessage) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsNonceMessage(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsChallengeMessage() *RtsChallengeMessage {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsChallengeMessage {
		return nil
	}
	return m.value.(*RtsChallengeMessage)
}

func (m *RtsConnection_1) SetRtsChallengeMessage(value *RtsChallengeMessage) {
	newTag := RtsConnection_1Tag_RtsChallengeMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsChallengeMessage(value *RtsChallengeMessage) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsChallengeMessage(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsChallengeSuccessMessage() *RtsChallengeSuccessMessage {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsChallengeSuccessMessage {
		return nil
	}
	return m.value.(*RtsChallengeSuccessMessage)
}

func (m *RtsConnection_1) SetRtsChallengeSuccessMessage(value *RtsChallengeSuccessMessage) {
	newTag := RtsConnection_1Tag_RtsChallengeSuccessMessage
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsChallengeSuccessMessage(value *RtsChallengeSuccessMessage) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsChallengeSuccessMessage(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsWifiConnectRequest() *RtsWifiConnectRequest {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsWifiConnectRequest {
		return nil
	}
	return m.value.(*RtsWifiConnectRequest)
}

func (m *RtsConnection_1) SetRtsWifiConnectRequest(value *RtsWifiConnectRequest) {
	newTag := RtsConnection_1Tag_RtsWifiConnectRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsWifiConnectRequest(value *RtsWifiConnectRequest) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsWifiConnectRequest(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsWifiConnectResponse() *RtsWifiConnectResponse {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsWifiConnectResponse {
		return nil
	}
	return m.value.(*RtsWifiConnectResponse)
}

func (m *RtsConnection_1) SetRtsWifiConnectResponse(value *RtsWifiConnectResponse) {
	newTag := RtsConnection_1Tag_RtsWifiConnectResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsWifiConnectResponse(value *RtsWifiConnectResponse) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsWifiConnectResponse(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsWifiIpRequest() *RtsWifiIpRequest {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsWifiIpRequest {
		return nil
	}
	return m.value.(*RtsWifiIpRequest)
}

func (m *RtsConnection_1) SetRtsWifiIpRequest(value *RtsWifiIpRequest) {
	newTag := RtsConnection_1Tag_RtsWifiIpRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsWifiIpRequest(value *RtsWifiIpRequest) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsWifiIpRequest(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsWifiIpResponse() *RtsWifiIpResponse {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsWifiIpResponse {
		return nil
	}
	return m.value.(*RtsWifiIpResponse)
}

func (m *RtsConnection_1) SetRtsWifiIpResponse(value *RtsWifiIpResponse) {
	newTag := RtsConnection_1Tag_RtsWifiIpResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsWifiIpResponse(value *RtsWifiIpResponse) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsWifiIpResponse(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsStatusRequest() *RtsStatusRequest {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsStatusRequest {
		return nil
	}
	return m.value.(*RtsStatusRequest)
}

func (m *RtsConnection_1) SetRtsStatusRequest(value *RtsStatusRequest) {
	newTag := RtsConnection_1Tag_RtsStatusRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsStatusRequest(value *RtsStatusRequest) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsStatusRequest(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsStatusResponse() *RtsStatusResponse {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsStatusResponse {
		return nil
	}
	return m.value.(*RtsStatusResponse)
}

func (m *RtsConnection_1) SetRtsStatusResponse(value *RtsStatusResponse) {
	newTag := RtsConnection_1Tag_RtsStatusResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsStatusResponse(value *RtsStatusResponse) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsStatusResponse(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsWifiScanRequest() *RtsWifiScanRequest {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsWifiScanRequest {
		return nil
	}
	return m.value.(*RtsWifiScanRequest)
}

func (m *RtsConnection_1) SetRtsWifiScanRequest(value *RtsWifiScanRequest) {
	newTag := RtsConnection_1Tag_RtsWifiScanRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsWifiScanRequest(value *RtsWifiScanRequest) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsWifiScanRequest(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsWifiScanResponse() *RtsWifiScanResponse {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsWifiScanResponse {
		return nil
	}
	return m.value.(*RtsWifiScanResponse)
}

func (m *RtsConnection_1) SetRtsWifiScanResponse(value *RtsWifiScanResponse) {
	newTag := RtsConnection_1Tag_RtsWifiScanResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsWifiScanResponse(value *RtsWifiScanResponse) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsWifiScanResponse(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsOtaUpdateRequest() *RtsOtaUpdateRequest {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsOtaUpdateRequest {
		return nil
	}
	return m.value.(*RtsOtaUpdateRequest)
}

func (m *RtsConnection_1) SetRtsOtaUpdateRequest(value *RtsOtaUpdateRequest) {
	newTag := RtsConnection_1Tag_RtsOtaUpdateRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsOtaUpdateRequest(value *RtsOtaUpdateRequest) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsOtaUpdateRequest(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsOtaUpdateResponse() *RtsOtaUpdateResponse {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsOtaUpdateResponse {
		return nil
	}
	return m.value.(*RtsOtaUpdateResponse)
}

func (m *RtsConnection_1) SetRtsOtaUpdateResponse(value *RtsOtaUpdateResponse) {
	newTag := RtsConnection_1Tag_RtsOtaUpdateResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsOtaUpdateResponse(value *RtsOtaUpdateResponse) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsOtaUpdateResponse(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsCancelPairing() *RtsCancelPairing {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsCancelPairing {
		return nil
	}
	return m.value.(*RtsCancelPairing)
}

func (m *RtsConnection_1) SetRtsCancelPairing(value *RtsCancelPairing) {
	newTag := RtsConnection_1Tag_RtsCancelPairing
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsCancelPairing(value *RtsCancelPairing) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsCancelPairing(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsForceDisconnect() *RtsForceDisconnect {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsForceDisconnect {
		return nil
	}
	return m.value.(*RtsForceDisconnect)
}

func (m *RtsConnection_1) SetRtsForceDisconnect(value *RtsForceDisconnect) {
	newTag := RtsConnection_1Tag_RtsForceDisconnect
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsForceDisconnect(value *RtsForceDisconnect) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsForceDisconnect(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsAck() *RtsAck {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsAck {
		return nil
	}
	return m.value.(*RtsAck)
}

func (m *RtsConnection_1) SetRtsAck(value *RtsAck) {
	newTag := RtsConnection_1Tag_RtsAck
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsAck(value *RtsAck) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsAck(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsWifiAccessPointRequest() *RtsWifiAccessPointRequest {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsWifiAccessPointRequest {
		return nil
	}
	return m.value.(*RtsWifiAccessPointRequest)
}

func (m *RtsConnection_1) SetRtsWifiAccessPointRequest(value *RtsWifiAccessPointRequest) {
	newTag := RtsConnection_1Tag_RtsWifiAccessPointRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsWifiAccessPointRequest(value *RtsWifiAccessPointRequest) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsWifiAccessPointRequest(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsWifiAccessPointResponse() *RtsWifiAccessPointResponse {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsWifiAccessPointResponse {
		return nil
	}
	return m.value.(*RtsWifiAccessPointResponse)
}

func (m *RtsConnection_1) SetRtsWifiAccessPointResponse(value *RtsWifiAccessPointResponse) {
	newTag := RtsConnection_1Tag_RtsWifiAccessPointResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsWifiAccessPointResponse(value *RtsWifiAccessPointResponse) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsWifiAccessPointResponse(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsSshRequest() *RtsSshRequest {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsSshRequest {
		return nil
	}
	return m.value.(*RtsSshRequest)
}

func (m *RtsConnection_1) SetRtsSshRequest(value *RtsSshRequest) {
	newTag := RtsConnection_1Tag_RtsSshRequest
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsSshRequest(value *RtsSshRequest) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsSshRequest(value)
	return &ret
}

func (m *RtsConnection_1) GetRtsSshResponse() *RtsSshResponse {
	if m.tag == nil || *m.tag != RtsConnection_1Tag_RtsSshResponse {
		return nil
	}
	return m.value.(*RtsSshResponse)
}

func (m *RtsConnection_1) SetRtsSshResponse(value *RtsSshResponse) {
	newTag := RtsConnection_1Tag_RtsSshResponse
	m.tag = &newTag
	m.value = value
}

func NewRtsConnection_1WithRtsSshResponse(value *RtsSshResponse) *RtsConnection_1 {
	var ret RtsConnection_1
	ret.SetRtsSshResponse(value)
	return &ret
}

// UNION RtsConnection
type RtsConnectionTag uint8

const (
	RtsConnectionTag_Error          RtsConnectionTag = 0x0 // 0
	RtsConnectionTag_RtsConnection2 RtsConnectionTag = 0x2 // 2
	RtsConnectionTag_RtsConnection3 RtsConnectionTag = 0x3 // 3
	RtsConnectionTag_RtsConnection4 RtsConnectionTag = 0x4 // 4
	RtsConnectionTag_RtsConnection5 RtsConnectionTag = 0x5 // 5
	RtsConnectionTag_INVALID        RtsConnectionTag = 255
)

type RtsConnection struct {
	tag   *RtsConnectionTag
	value clad.Struct
}

func (m *RtsConnection) Tag() RtsConnectionTag {
	if m.tag == nil {
		return RtsConnectionTag_INVALID
	}
	return *m.tag
}

func (m *RtsConnection) Size() uint32 {
	if m.tag == nil || *m.tag == RtsConnectionTag_INVALID {
		return 1
	}
	return 1 + m.value.Size()
}

func (m *RtsConnection) Pack(buf *bytes.Buffer) error {
	tag := RtsConnectionTag_INVALID
	if m.tag != nil {
		tag = *m.tag
	}
	if err := binary.Write(buf, binary.LittleEndian, tag); err != nil {
		return err
	}
	if tag == RtsConnectionTag_INVALID {
		return nil
	}
	return m.value.Pack(buf)
}

func (m *RtsConnection) unpackStruct(tag RtsConnectionTag, buf *bytes.Buffer) (clad.Struct, error) {
	switch tag {
	case RtsConnectionTag_Error:
		var ret Error
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnectionTag_RtsConnection2:
		var ret RtsConnection_2
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnectionTag_RtsConnection3:
		var ret RtsConnection_3
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnectionTag_RtsConnection4:
		var ret RtsConnection_4
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case RtsConnectionTag_RtsConnection5:
		var ret RtsConnection_5
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	default:
		return nil, errors.New("invalid tag to unpackStruct")
	}
}

func (m *RtsConnection) Unpack(buf *bytes.Buffer) error {
	tag := RtsConnectionTag_INVALID
	if err := binary.Read(buf, binary.LittleEndian, &tag); err != nil {
		return err
	}
	m.tag = &tag
	if tag == RtsConnectionTag_INVALID {
		m.value = nil
		return nil
	}
	val, err := m.unpackStruct(tag, buf)
	if err != nil {
		*m.tag = RtsConnectionTag_INVALID
		return err
	}
	m.value = val
	return nil
}

func (t RtsConnectionTag) String() string {
	switch t {
	case RtsConnectionTag_Error:
		return "Error"
	case RtsConnectionTag_RtsConnection2:
		return "RtsConnection2"
	case RtsConnectionTag_RtsConnection3:
		return "RtsConnection3"
	case RtsConnectionTag_RtsConnection4:
		return "RtsConnection4"
	case RtsConnectionTag_RtsConnection5:
		return "RtsConnection5"
	default:
		return "INVALID"
	}
}

func (m *RtsConnection) String() string {
	if m.tag == nil {
		return "nil"
	}
	if *m.tag == RtsConnectionTag_INVALID {
		return "INVALID"
	}
	return fmt.Sprintf("%s: {%s}", *m.tag, m.value)
}

func (m *RtsConnection) GetError() *Error {
	if m.tag == nil || *m.tag != RtsConnectionTag_Error {
		return nil
	}
	return m.value.(*Error)
}

func (m *RtsConnection) SetError(value *Error) {
	newTag := RtsConnectionTag_Error
	m.tag = &newTag
	m.value = value
}

func NewRtsConnectionWithError(value *Error) *RtsConnection {
	var ret RtsConnection
	ret.SetError(value)
	return &ret
}

func (m *RtsConnection) GetRtsConnection2() *RtsConnection_2 {
	if m.tag == nil || *m.tag != RtsConnectionTag_RtsConnection2 {
		return nil
	}
	return m.value.(*RtsConnection_2)
}

func (m *RtsConnection) SetRtsConnection2(value *RtsConnection_2) {
	newTag := RtsConnectionTag_RtsConnection2
	m.tag = &newTag
	m.value = value
}

func NewRtsConnectionWithRtsConnection2(value *RtsConnection_2) *RtsConnection {
	var ret RtsConnection
	ret.SetRtsConnection2(value)
	return &ret
}

func (m *RtsConnection) GetRtsConnection3() *RtsConnection_3 {
	if m.tag == nil || *m.tag != RtsConnectionTag_RtsConnection3 {
		return nil
	}
	return m.value.(*RtsConnection_3)
}

func (m *RtsConnection) SetRtsConnection3(value *RtsConnection_3) {
	newTag := RtsConnectionTag_RtsConnection3
	m.tag = &newTag
	m.value = value
}

func NewRtsConnectionWithRtsConnection3(value *RtsConnection_3) *RtsConnection {
	var ret RtsConnection
	ret.SetRtsConnection3(value)
	return &ret
}

func (m *RtsConnection) GetRtsConnection4() *RtsConnection_4 {
	if m.tag == nil || *m.tag != RtsConnectionTag_RtsConnection4 {
		return nil
	}
	return m.value.(*RtsConnection_4)
}

func (m *RtsConnection) SetRtsConnection4(value *RtsConnection_4) {
	newTag := RtsConnectionTag_RtsConnection4
	m.tag = &newTag
	m.value = value
}

func NewRtsConnectionWithRtsConnection4(value *RtsConnection_4) *RtsConnection {
	var ret RtsConnection
	ret.SetRtsConnection4(value)
	return &ret
}

func (m *RtsConnection) GetRtsConnection5() *RtsConnection_5 {
	if m.tag == nil || *m.tag != RtsConnectionTag_RtsConnection5 {
		return nil
	}
	return m.value.(*RtsConnection_5)
}

func (m *RtsConnection) SetRtsConnection5(value *RtsConnection_5) {
	newTag := RtsConnectionTag_RtsConnection5
	m.tag = &newTag
	m.value = value
}

func NewRtsConnectionWithRtsConnection5(value *RtsConnection_5) *RtsConnection {
	var ret RtsConnection
	ret.SetRtsConnection5(value)
	return &ret
}

// MESSAGE DeprecatedAndReserved
type DeprecatedAndReserved struct {
}

func (d *DeprecatedAndReserved) Size() uint32 {
	return 0
}

func (d *DeprecatedAndReserved) Unpack(buf *bytes.Buffer) error {
	return nil
}

func (d *DeprecatedAndReserved) Pack(buf *bytes.Buffer) error {
	return nil
}

func (d *DeprecatedAndReserved) String() string {
	return ""
}

// UNION ExternalComms
type ExternalCommsTag uint8

const (
	ExternalCommsTag_Error          ExternalCommsTag = 0x0 // 0
	ExternalCommsTag_RtsConnection1 ExternalCommsTag = 0x1 // 1
	ExternalCommsTag_RtsConnection  ExternalCommsTag = 0x4 // 4
	ExternalCommsTag_INVALID        ExternalCommsTag = 255
)

type ExternalComms struct {
	tag   *ExternalCommsTag
	value clad.Struct
}

func (m *ExternalComms) Tag() ExternalCommsTag {
	if m.tag == nil {
		return ExternalCommsTag_INVALID
	}
	return *m.tag
}

func (m *ExternalComms) Size() uint32 {
	if m.tag == nil || *m.tag == ExternalCommsTag_INVALID {
		return 1
	}
	return 1 + m.value.Size()
}

func (m *ExternalComms) Pack(buf *bytes.Buffer) error {
	tag := ExternalCommsTag_INVALID
	if m.tag != nil {
		tag = *m.tag
	}
	if err := binary.Write(buf, binary.LittleEndian, tag); err != nil {
		return err
	}
	if tag == ExternalCommsTag_INVALID {
		return nil
	}
	return m.value.Pack(buf)
}

func (m *ExternalComms) unpackStruct(tag ExternalCommsTag, buf *bytes.Buffer) (clad.Struct, error) {
	switch tag {
	case ExternalCommsTag_Error:
		var ret Error
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case ExternalCommsTag_RtsConnection1:
		var ret RtsConnection_1
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	case ExternalCommsTag_RtsConnection:
		var ret RtsConnection
		if err := ret.Unpack(buf); err != nil {
			return nil, err
		}
		return &ret, nil
	default:
		return nil, errors.New("invalid tag to unpackStruct")
	}
}

func (m *ExternalComms) Unpack(buf *bytes.Buffer) error {
	tag := ExternalCommsTag_INVALID
	if err := binary.Read(buf, binary.LittleEndian, &tag); err != nil {
		return err
	}
	m.tag = &tag
	if tag == ExternalCommsTag_INVALID {
		m.value = nil
		return nil
	}
	val, err := m.unpackStruct(tag, buf)
	if err != nil {
		*m.tag = ExternalCommsTag_INVALID
		return err
	}
	m.value = val
	return nil
}

func (t ExternalCommsTag) String() string {
	switch t {
	case ExternalCommsTag_Error:
		return "Error"
	case ExternalCommsTag_RtsConnection1:
		return "RtsConnection1"
	case ExternalCommsTag_RtsConnection:
		return "RtsConnection"
	default:
		return "INVALID"
	}
}

func (m *ExternalComms) String() string {
	if m.tag == nil {
		return "nil"
	}
	if *m.tag == ExternalCommsTag_INVALID {
		return "INVALID"
	}
	return fmt.Sprintf("%s: {%s}", *m.tag, m.value)
}

func (m *ExternalComms) GetError() *Error {
	if m.tag == nil || *m.tag != ExternalCommsTag_Error {
		return nil
	}
	return m.value.(*Error)
}

func (m *ExternalComms) SetError(value *Error) {
	newTag := ExternalCommsTag_Error
	m.tag = &newTag
	m.value = value
}

func NewExternalCommsWithError(value *Error) *ExternalComms {
	var ret ExternalComms
	ret.SetError(value)
	return &ret
}

func (m *ExternalComms) GetRtsConnection1() *RtsConnection_1 {
	if m.tag == nil || *m.tag != ExternalCommsTag_RtsConnection1 {
		return nil
	}
	return m.value.(*RtsConnection_1)
}

func (m *ExternalComms) SetRtsConnection1(value *RtsConnection_1) {
	newTag := ExternalCommsTag_RtsConnection1
	m.tag = &newTag
	m.value = value
}

func NewExternalCommsWithRtsConnection1(value *RtsConnection_1) *ExternalComms {
	var ret ExternalComms
	ret.SetRtsConnection1(value)
	return &ret
}

func (m *ExternalComms) GetRtsConnection() *RtsConnection {
	if m.tag == nil || *m.tag != ExternalCommsTag_RtsConnection {
		return nil
	}
	return m.value.(*RtsConnection)
}

func (m *ExternalComms) SetRtsConnection(value *RtsConnection) {
	newTag := ExternalCommsTag_RtsConnection
	m.tag = &newTag
	m.value = value
}

func NewExternalCommsWithRtsConnection(value *RtsConnection) *ExternalComms {
	var ret ExternalComms
	ret.SetRtsConnection(value)
	return &ret
}
