// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chippergrpc2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChipperGrpcClient is the client API for ChipperGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChipperGrpcClient interface {
	// send text for intent matching
	TextIntent(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*IntentResponse, error)
	// Sends a streaming audio request. Responses are streamed to the client. (bidirectional)
	StreamingIntent(ctx context.Context, opts ...grpc.CallOption) (ChipperGrpc_StreamingIntentClient, error)
	// Sends a knowledge graph request. This requenst looks very similar to an intent request, but with a different response
	StreamingKnowledgeGraph(ctx context.Context, opts ...grpc.CallOption) (ChipperGrpc_StreamingKnowledgeGraphClient, error)
	// Sends a intent graph request. This requenst is a hybrid of the intent and knowledge graph endpoints
	StreamingIntentGraph(ctx context.Context, opts ...grpc.CallOption) (ChipperGrpc_StreamingIntentGraphClient, error)
	// Performs a conenction check. This will take in streaming audio, but not call out to any services.
	StreamingConnectionCheck(ctx context.Context, opts ...grpc.CallOption) (ChipperGrpc_StreamingConnectionCheckClient, error)
}

type chipperGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewChipperGrpcClient(cc grpc.ClientConnInterface) ChipperGrpcClient {
	return &chipperGrpcClient{cc}
}

func (c *chipperGrpcClient) TextIntent(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*IntentResponse, error) {
	out := new(IntentResponse)
	err := c.cc.Invoke(ctx, "/chippergrpc2.ChipperGrpc/TextIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chipperGrpcClient) StreamingIntent(ctx context.Context, opts ...grpc.CallOption) (ChipperGrpc_StreamingIntentClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChipperGrpc_ServiceDesc.Streams[0], "/chippergrpc2.ChipperGrpc/StreamingIntent", opts...)
	if err != nil {
		return nil, err
	}
	x := &chipperGrpcStreamingIntentClient{stream}
	return x, nil
}

type ChipperGrpc_StreamingIntentClient interface {
	Send(*StreamingIntentRequest) error
	Recv() (*IntentResponse, error)
	grpc.ClientStream
}

type chipperGrpcStreamingIntentClient struct {
	grpc.ClientStream
}

func (x *chipperGrpcStreamingIntentClient) Send(m *StreamingIntentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chipperGrpcStreamingIntentClient) Recv() (*IntentResponse, error) {
	m := new(IntentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chipperGrpcClient) StreamingKnowledgeGraph(ctx context.Context, opts ...grpc.CallOption) (ChipperGrpc_StreamingKnowledgeGraphClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChipperGrpc_ServiceDesc.Streams[1], "/chippergrpc2.ChipperGrpc/StreamingKnowledgeGraph", opts...)
	if err != nil {
		return nil, err
	}
	x := &chipperGrpcStreamingKnowledgeGraphClient{stream}
	return x, nil
}

type ChipperGrpc_StreamingKnowledgeGraphClient interface {
	Send(*StreamingKnowledgeGraphRequest) error
	Recv() (*KnowledgeGraphResponse, error)
	grpc.ClientStream
}

type chipperGrpcStreamingKnowledgeGraphClient struct {
	grpc.ClientStream
}

func (x *chipperGrpcStreamingKnowledgeGraphClient) Send(m *StreamingKnowledgeGraphRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chipperGrpcStreamingKnowledgeGraphClient) Recv() (*KnowledgeGraphResponse, error) {
	m := new(KnowledgeGraphResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chipperGrpcClient) StreamingIntentGraph(ctx context.Context, opts ...grpc.CallOption) (ChipperGrpc_StreamingIntentGraphClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChipperGrpc_ServiceDesc.Streams[2], "/chippergrpc2.ChipperGrpc/StreamingIntentGraph", opts...)
	if err != nil {
		return nil, err
	}
	x := &chipperGrpcStreamingIntentGraphClient{stream}
	return x, nil
}

type ChipperGrpc_StreamingIntentGraphClient interface {
	Send(*StreamingIntentGraphRequest) error
	Recv() (*IntentGraphResponse, error)
	grpc.ClientStream
}

type chipperGrpcStreamingIntentGraphClient struct {
	grpc.ClientStream
}

func (x *chipperGrpcStreamingIntentGraphClient) Send(m *StreamingIntentGraphRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chipperGrpcStreamingIntentGraphClient) Recv() (*IntentGraphResponse, error) {
	m := new(IntentGraphResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chipperGrpcClient) StreamingConnectionCheck(ctx context.Context, opts ...grpc.CallOption) (ChipperGrpc_StreamingConnectionCheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChipperGrpc_ServiceDesc.Streams[3], "/chippergrpc2.ChipperGrpc/StreamingConnectionCheck", opts...)
	if err != nil {
		return nil, err
	}
	x := &chipperGrpcStreamingConnectionCheckClient{stream}
	return x, nil
}

type ChipperGrpc_StreamingConnectionCheckClient interface {
	Send(*StreamingConnectionCheckRequest) error
	Recv() (*ConnectionCheckResponse, error)
	grpc.ClientStream
}

type chipperGrpcStreamingConnectionCheckClient struct {
	grpc.ClientStream
}

func (x *chipperGrpcStreamingConnectionCheckClient) Send(m *StreamingConnectionCheckRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chipperGrpcStreamingConnectionCheckClient) Recv() (*ConnectionCheckResponse, error) {
	m := new(ConnectionCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChipperGrpcServer is the server API for ChipperGrpc service.
// All implementations must embed UnimplementedChipperGrpcServer
// for forward compatibility
type ChipperGrpcServer interface {
	// send text for intent matching
	TextIntent(context.Context, *TextRequest) (*IntentResponse, error)
	// Sends a streaming audio request. Responses are streamed to the client. (bidirectional)
	StreamingIntent(ChipperGrpc_StreamingIntentServer) error
	// Sends a knowledge graph request. This requenst looks very similar to an intent request, but with a different response
	StreamingKnowledgeGraph(ChipperGrpc_StreamingKnowledgeGraphServer) error
	// Sends a intent graph request. This requenst is a hybrid of the intent and knowledge graph endpoints
	StreamingIntentGraph(ChipperGrpc_StreamingIntentGraphServer) error
	// Performs a conenction check. This will take in streaming audio, but not call out to any services.
	StreamingConnectionCheck(ChipperGrpc_StreamingConnectionCheckServer) error
	mustEmbedUnimplementedChipperGrpcServer()
}

// UnimplementedChipperGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedChipperGrpcServer struct {
}

func (UnimplementedChipperGrpcServer) TextIntent(context.Context, *TextRequest) (*IntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextIntent not implemented")
}
func (UnimplementedChipperGrpcServer) StreamingIntent(ChipperGrpc_StreamingIntentServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingIntent not implemented")
}
func (UnimplementedChipperGrpcServer) StreamingKnowledgeGraph(ChipperGrpc_StreamingKnowledgeGraphServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingKnowledgeGraph not implemented")
}
func (UnimplementedChipperGrpcServer) StreamingIntentGraph(ChipperGrpc_StreamingIntentGraphServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingIntentGraph not implemented")
}
func (UnimplementedChipperGrpcServer) StreamingConnectionCheck(ChipperGrpc_StreamingConnectionCheckServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingConnectionCheck not implemented")
}
func (UnimplementedChipperGrpcServer) mustEmbedUnimplementedChipperGrpcServer() {}

// UnsafeChipperGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChipperGrpcServer will
// result in compilation errors.
type UnsafeChipperGrpcServer interface {
	mustEmbedUnimplementedChipperGrpcServer()
}

func RegisterChipperGrpcServer(s grpc.ServiceRegistrar, srv ChipperGrpcServer) {
	s.RegisterService(&ChipperGrpc_ServiceDesc, srv)
}

func _ChipperGrpc_TextIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChipperGrpcServer).TextIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chippergrpc2.ChipperGrpc/TextIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChipperGrpcServer).TextIntent(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChipperGrpc_StreamingIntent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChipperGrpcServer).StreamingIntent(&chipperGrpcStreamingIntentServer{stream})
}

type ChipperGrpc_StreamingIntentServer interface {
	Send(*IntentResponse) error
	Recv() (*StreamingIntentRequest, error)
	grpc.ServerStream
}

type chipperGrpcStreamingIntentServer struct {
	grpc.ServerStream
}

func (x *chipperGrpcStreamingIntentServer) Send(m *IntentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chipperGrpcStreamingIntentServer) Recv() (*StreamingIntentRequest, error) {
	m := new(StreamingIntentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChipperGrpc_StreamingKnowledgeGraph_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChipperGrpcServer).StreamingKnowledgeGraph(&chipperGrpcStreamingKnowledgeGraphServer{stream})
}

type ChipperGrpc_StreamingKnowledgeGraphServer interface {
	Send(*KnowledgeGraphResponse) error
	Recv() (*StreamingKnowledgeGraphRequest, error)
	grpc.ServerStream
}

type chipperGrpcStreamingKnowledgeGraphServer struct {
	grpc.ServerStream
}

func (x *chipperGrpcStreamingKnowledgeGraphServer) Send(m *KnowledgeGraphResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chipperGrpcStreamingKnowledgeGraphServer) Recv() (*StreamingKnowledgeGraphRequest, error) {
	m := new(StreamingKnowledgeGraphRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChipperGrpc_StreamingIntentGraph_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChipperGrpcServer).StreamingIntentGraph(&chipperGrpcStreamingIntentGraphServer{stream})
}

type ChipperGrpc_StreamingIntentGraphServer interface {
	Send(*IntentGraphResponse) error
	Recv() (*StreamingIntentGraphRequest, error)
	grpc.ServerStream
}

type chipperGrpcStreamingIntentGraphServer struct {
	grpc.ServerStream
}

func (x *chipperGrpcStreamingIntentGraphServer) Send(m *IntentGraphResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chipperGrpcStreamingIntentGraphServer) Recv() (*StreamingIntentGraphRequest, error) {
	m := new(StreamingIntentGraphRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChipperGrpc_StreamingConnectionCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChipperGrpcServer).StreamingConnectionCheck(&chipperGrpcStreamingConnectionCheckServer{stream})
}

type ChipperGrpc_StreamingConnectionCheckServer interface {
	Send(*ConnectionCheckResponse) error
	Recv() (*StreamingConnectionCheckRequest, error)
	grpc.ServerStream
}

type chipperGrpcStreamingConnectionCheckServer struct {
	grpc.ServerStream
}

func (x *chipperGrpcStreamingConnectionCheckServer) Send(m *ConnectionCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chipperGrpcStreamingConnectionCheckServer) Recv() (*StreamingConnectionCheckRequest, error) {
	m := new(StreamingConnectionCheckRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChipperGrpc_ServiceDesc is the grpc.ServiceDesc for ChipperGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChipperGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chippergrpc2.ChipperGrpc",
	HandlerType: (*ChipperGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TextIntent",
			Handler:    _ChipperGrpc_TextIntent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingIntent",
			Handler:       _ChipperGrpc_StreamingIntent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamingKnowledgeGraph",
			Handler:       _ChipperGrpc_StreamingKnowledgeGraph_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamingIntentGraph",
			Handler:       _ChipperGrpc_StreamingIntentGraph_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamingConnectionCheck",
			Handler:       _ChipperGrpc_StreamingConnectionCheck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chipperpb.proto",
}
