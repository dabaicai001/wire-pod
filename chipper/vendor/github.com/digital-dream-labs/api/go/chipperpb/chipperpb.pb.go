// Copyright 2017 Anki, Inc.

// to generate code for go:
// protoc --proto_path=proto/anki/chipperpb -I=. --go_out=plugins=grpc:$GOPATH/src/github.com/anki/sai-chipper-voice/proto/anki/chipperpb chipperpb.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: chipperpb.proto

package chippergrpc2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported languages
type LanguageCode int32

const (
	LanguageCode_ENGLISH_US LanguageCode = 0 // default if not specified
	LanguageCode_ENGLISH_UK LanguageCode = 1
	LanguageCode_ENGLISH_AU LanguageCode = 2
	LanguageCode_GERMAN     LanguageCode = 3
	LanguageCode_FRENCH     LanguageCode = 4
)

// Enum value maps for LanguageCode.
var (
	LanguageCode_name = map[int32]string{
		0: "ENGLISH_US",
		1: "ENGLISH_UK",
		2: "ENGLISH_AU",
		3: "GERMAN",
		4: "FRENCH",
	}
	LanguageCode_value = map[string]int32{
		"ENGLISH_US": 0,
		"ENGLISH_UK": 1,
		"ENGLISH_AU": 2,
		"GERMAN":     3,
		"FRENCH":     4,
	}
)

func (x LanguageCode) Enum() *LanguageCode {
	p := new(LanguageCode)
	*p = x
	return p
}

func (x LanguageCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageCode) Descriptor() protoreflect.EnumDescriptor {
	return file_chipperpb_proto_enumTypes[0].Descriptor()
}

func (LanguageCode) Type() protoreflect.EnumType {
	return &file_chipperpb_proto_enumTypes[0]
}

func (x LanguageCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageCode.Descriptor instead.
func (LanguageCode) EnumDescriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{0}
}

type IntentService int32

const (
	IntentService_DEFAULT    IntentService = 0
	IntentService_DIALOGFLOW IntentService = 1
	IntentService_BING_LUIS  IntentService = 2
	IntentService_LEX        IntentService = 3
	IntentService_HOUNDIFY   IntentService = 4
)

// Enum value maps for IntentService.
var (
	IntentService_name = map[int32]string{
		0: "DEFAULT",
		1: "DIALOGFLOW",
		2: "BING_LUIS",
		3: "LEX",
		4: "HOUNDIFY",
	}
	IntentService_value = map[string]int32{
		"DEFAULT":    0,
		"DIALOGFLOW": 1,
		"BING_LUIS":  2,
		"LEX":        3,
		"HOUNDIFY":   4,
	}
)

func (x IntentService) Enum() *IntentService {
	p := new(IntentService)
	*p = x
	return p
}

func (x IntentService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntentService) Descriptor() protoreflect.EnumDescriptor {
	return file_chipperpb_proto_enumTypes[1].Descriptor()
}

func (IntentService) Type() protoreflect.EnumType {
	return &file_chipperpb_proto_enumTypes[1]
}

func (x IntentService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntentService.Descriptor instead.
func (IntentService) EnumDescriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{1}
}

type AudioEncoding int32

const (
	AudioEncoding_LINEAR_PCM AudioEncoding = 0
	AudioEncoding_OGG_OPUS   AudioEncoding = 1
)

// Enum value maps for AudioEncoding.
var (
	AudioEncoding_name = map[int32]string{
		0: "LINEAR_PCM",
		1: "OGG_OPUS",
	}
	AudioEncoding_value = map[string]int32{
		"LINEAR_PCM": 0,
		"OGG_OPUS":   1,
	}
)

func (x AudioEncoding) Enum() *AudioEncoding {
	p := new(AudioEncoding)
	*p = x
	return p
}

func (x AudioEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_chipperpb_proto_enumTypes[2].Descriptor()
}

func (AudioEncoding) Type() protoreflect.EnumType {
	return &file_chipperpb_proto_enumTypes[2]
}

func (x AudioEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioEncoding.Descriptor instead.
func (AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{2}
}

// FIXME: Add one for knowledge Graph?
type RobotMode int32

const (
	RobotMode_VOICE_COMMAND RobotMode = 0 // default is voice command mode if not specified
	RobotMode_GAME          RobotMode = 1
)

// Enum value maps for RobotMode.
var (
	RobotMode_name = map[int32]string{
		0: "VOICE_COMMAND",
		1: "GAME",
	}
	RobotMode_value = map[string]int32{
		"VOICE_COMMAND": 0,
		"GAME":          1,
	}
)

func (x RobotMode) Enum() *RobotMode {
	p := new(RobotMode)
	*p = x
	return p
}

func (x RobotMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RobotMode) Descriptor() protoreflect.EnumDescriptor {
	return file_chipperpb_proto_enumTypes[3].Descriptor()
}

func (RobotMode) Type() protoreflect.EnumType {
	return &file_chipperpb_proto_enumTypes[3]
}

func (x RobotMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RobotMode.Descriptor instead.
func (RobotMode) EnumDescriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{3}
}

// Represents form that the response will come in
// Either Intent or Knowledge Graph (only one should have a valid response)
type IntentGraphMode int32

const (
	IntentGraphMode_UNKNOWN         IntentGraphMode = 0
	IntentGraphMode_INTENT          IntentGraphMode = 1
	IntentGraphMode_KNOWLEDGE_GRAPH IntentGraphMode = 2
)

// Enum value maps for IntentGraphMode.
var (
	IntentGraphMode_name = map[int32]string{
		0: "UNKNOWN",
		1: "INTENT",
		2: "KNOWLEDGE_GRAPH",
	}
	IntentGraphMode_value = map[string]int32{
		"UNKNOWN":         0,
		"INTENT":          1,
		"KNOWLEDGE_GRAPH": 2,
	}
)

func (x IntentGraphMode) Enum() *IntentGraphMode {
	p := new(IntentGraphMode)
	*p = x
	return p
}

func (x IntentGraphMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntentGraphMode) Descriptor() protoreflect.EnumDescriptor {
	return file_chipperpb_proto_enumTypes[4].Descriptor()
}

func (IntentGraphMode) Type() protoreflect.EnumType {
	return &file_chipperpb_proto_enumTypes[4]
}

func (x IntentGraphMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntentGraphMode.Descriptor instead.
func (IntentGraphMode) EnumDescriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{4}
}

type TextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Can be random number or user identifier.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// Required. Robot identifier.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Required. Text of query
	TextInput string `protobuf:"bytes,3,opt,name=text_input,json=textInput,proto3" json:"text_input,omitempty"`
	// Optional. Specify language for intent-service, default is ENGLISH_US
	LanguageCode LanguageCode `protobuf:"varint,4,opt,name=language_code,json=languageCode,proto3,enum=chippergrpc2.LanguageCode" json:"language_code,omitempty"`
	// Optional. Choose intent-service to process request, default is server's default
	IntentService IntentService `protobuf:"varint,5,opt,name=intent_service,json=intentService,proto3,enum=chippergrpc2.IntentService" json:"intent_service,omitempty"`
	// Required. Robot firmware version. Use to choose intent-service version.
	FirmwareVersion string `protobuf:"bytes,6,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	// Optional. Robot mode for games and knowledge-graph. default is VOICE_COMMAND
	Mode RobotMode `protobuf:"varint,7,opt,name=mode,proto3,enum=chippergrpc2.RobotMode" json:"mode,omitempty"`
	// Required. Skip DAS will turn off DAS logging, for GDPR
	SkipDas bool `protobuf:"varint,8,opt,name=skip_das,json=skipDas,proto3" json:"skip_das,omitempty"`
}

func (x *TextRequest) Reset() {
	*x = TextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chipperpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextRequest) ProtoMessage() {}

func (x *TextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chipperpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextRequest.ProtoReflect.Descriptor instead.
func (*TextRequest) Descriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{0}
}

func (x *TextRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *TextRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *TextRequest) GetTextInput() string {
	if x != nil {
		return x.TextInput
	}
	return ""
}

func (x *TextRequest) GetLanguageCode() LanguageCode {
	if x != nil {
		return x.LanguageCode
	}
	return LanguageCode_ENGLISH_US
}

func (x *TextRequest) GetIntentService() IntentService {
	if x != nil {
		return x.IntentService
	}
	return IntentService_DEFAULT
}

func (x *TextRequest) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *TextRequest) GetMode() RobotMode {
	if x != nil {
		return x.Mode
	}
	return RobotMode_VOICE_COMMAND
}

func (x *TextRequest) GetSkipDas() bool {
	if x != nil {
		return x.SkipDas
	}
	return false
}

type StreamingIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Can be random number or user identifier.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// Required. Robot identifier.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Required. Input audio content format: 16k SR, 1-channel, 100ms chunks.
	InputAudio []byte `protobuf:"bytes,3,opt,name=input_audio,json=inputAudio,proto3" json:"input_audio,omitempty"`
	// Optional. Specify language for intent-service, default is ENGLISH_US
	LanguageCode LanguageCode `protobuf:"varint,4,opt,name=language_code,json=languageCode,proto3,enum=chippergrpc2.LanguageCode" json:"language_code,omitempty"`
	// Optional. ASR only using Bing Speech (for now).
	// Returns text transcript with intent_speech_only. Default is false
	SpeechOnly bool `protobuf:"varint,5,opt,name=speech_only,json=speechOnly,proto3" json:"speech_only,omitempty"`
	// Required. Robot firmware version. Use to choose intent-service version.
	FirmwareVersion string `protobuf:"bytes,6,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	// Optional. Robot mode for games and knowledge-graph. default is VOICE_COMMAND
	Mode RobotMode `protobuf:"varint,7,opt,name=mode,proto3,enum=chippergrpc2.RobotMode" json:"mode,omitempty"`
	// Optional. boot_id for DAS cloud event
	BootId string `protobuf:"bytes,8,opt,name=boot_id,json=bootId,proto3" json:"boot_id,omitempty"`
	// Required. Skip DAS will turn off DAS logging, for GDPR
	SkipDas bool `protobuf:"varint,9,opt,name=skip_das,json=skipDas,proto3" json:"skip_das,omitempty"`
	// Optional. Choose audio encoding, default is PCM 16K
	AudioEncoding AudioEncoding `protobuf:"varint,13,opt,name=audio_encoding,json=audioEncoding,proto3,enum=chippergrpc2.AudioEncoding" json:"audio_encoding,omitempty"`
	// Optional. If using dialogflow, set single_utterance true to use dialogflow-VAD.
	SingleUtterance bool `protobuf:"varint,14,opt,name=single_utterance,json=singleUtterance,proto3" json:"single_utterance,omitempty"`
	// Optional. Default is whatever that is defined on Chipper Cloud.
	IntentService IntentService `protobuf:"varint,15,opt,name=intent_service,json=intentService,proto3,enum=chippergrpc2.IntentService" json:"intent_service,omitempty"`
	// Required for now till TMS is ready. Anki application key
	AppKey string `protobuf:"bytes,16,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	// Optional. Set whether to save-audio in Dev
	SaveAudio bool `protobuf:"varint,17,opt,name=save_audio,json=saveAudio,proto3" json:"save_audio,omitempty"`
}

func (x *StreamingIntentRequest) Reset() {
	*x = StreamingIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chipperpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingIntentRequest) ProtoMessage() {}

func (x *StreamingIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chipperpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingIntentRequest.ProtoReflect.Descriptor instead.
func (*StreamingIntentRequest) Descriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{1}
}

func (x *StreamingIntentRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *StreamingIntentRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *StreamingIntentRequest) GetInputAudio() []byte {
	if x != nil {
		return x.InputAudio
	}
	return nil
}

func (x *StreamingIntentRequest) GetLanguageCode() LanguageCode {
	if x != nil {
		return x.LanguageCode
	}
	return LanguageCode_ENGLISH_US
}

func (x *StreamingIntentRequest) GetSpeechOnly() bool {
	if x != nil {
		return x.SpeechOnly
	}
	return false
}

func (x *StreamingIntentRequest) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *StreamingIntentRequest) GetMode() RobotMode {
	if x != nil {
		return x.Mode
	}
	return RobotMode_VOICE_COMMAND
}

func (x *StreamingIntentRequest) GetBootId() string {
	if x != nil {
		return x.BootId
	}
	return ""
}

func (x *StreamingIntentRequest) GetSkipDas() bool {
	if x != nil {
		return x.SkipDas
	}
	return false
}

func (x *StreamingIntentRequest) GetAudioEncoding() AudioEncoding {
	if x != nil {
		return x.AudioEncoding
	}
	return AudioEncoding_LINEAR_PCM
}

func (x *StreamingIntentRequest) GetSingleUtterance() bool {
	if x != nil {
		return x.SingleUtterance
	}
	return false
}

func (x *StreamingIntentRequest) GetIntentService() IntentService {
	if x != nil {
		return x.IntentService
	}
	return IntentService_DEFAULT
}

func (x *StreamingIntentRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *StreamingIntentRequest) GetSaveAudio() bool {
	if x != nil {
		return x.SaveAudio
	}
	return false
}

type StreamingKnowledgeGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Can be random number or user identifier.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// Required. Robot identifier.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Required. Input audio content format: 16k SR, 1-channel, 100ms chunks
	InputAudio []byte `protobuf:"bytes,3,opt,name=input_audio,json=inputAudio,proto3" json:"input_audio,omitempty"`
	// Optional. Specify language for intent-service, default is ENGLISH_US
	LanguageCode LanguageCode `protobuf:"varint,4,opt,name=language_code,json=languageCode,proto3,enum=chippergrpc2.LanguageCode" json:"language_code,omitempty"`
	// Required. Robot firmware version. Use for stats
	FirmwareVersion string `protobuf:"bytes,5,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	// Optional. Choose audio encoding, default is PCM 16K
	AudioEncoding AudioEncoding `protobuf:"varint,6,opt,name=audio_encoding,json=audioEncoding,proto3,enum=chippergrpc2.AudioEncoding" json:"audio_encoding,omitempty"`
	// Required for now till TMS is ready. Anki application key
	AppKey string `protobuf:"bytes,7,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	// Optional. Set whether to save-audio in Dev
	SaveAudio bool `protobuf:"varint,8,opt,name=save_audio,json=saveAudio,proto3" json:"save_audio,omitempty"`
	// Optional. boot_id for DAS cloud event
	BootId string `protobuf:"bytes,9,opt,name=boot_id,json=bootId,proto3" json:"boot_id,omitempty"`
	// Required. Skip DAS will turn off DAS logging, for GDPR
	SkipDas bool `protobuf:"varint,10,opt,name=skip_das,json=skipDas,proto3" json:"skip_das,omitempty"`
	// Optional. Timezone from robot
	Timezone string `protobuf:"bytes,11,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *StreamingKnowledgeGraphRequest) Reset() {
	*x = StreamingKnowledgeGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chipperpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingKnowledgeGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingKnowledgeGraphRequest) ProtoMessage() {}

func (x *StreamingKnowledgeGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chipperpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingKnowledgeGraphRequest.ProtoReflect.Descriptor instead.
func (*StreamingKnowledgeGraphRequest) Descriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{2}
}

func (x *StreamingKnowledgeGraphRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *StreamingKnowledgeGraphRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *StreamingKnowledgeGraphRequest) GetInputAudio() []byte {
	if x != nil {
		return x.InputAudio
	}
	return nil
}

func (x *StreamingKnowledgeGraphRequest) GetLanguageCode() LanguageCode {
	if x != nil {
		return x.LanguageCode
	}
	return LanguageCode_ENGLISH_US
}

func (x *StreamingKnowledgeGraphRequest) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *StreamingKnowledgeGraphRequest) GetAudioEncoding() AudioEncoding {
	if x != nil {
		return x.AudioEncoding
	}
	return AudioEncoding_LINEAR_PCM
}

func (x *StreamingKnowledgeGraphRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *StreamingKnowledgeGraphRequest) GetSaveAudio() bool {
	if x != nil {
		return x.SaveAudio
	}
	return false
}

func (x *StreamingKnowledgeGraphRequest) GetBootId() string {
	if x != nil {
		return x.BootId
	}
	return ""
}

func (x *StreamingKnowledgeGraphRequest) GetSkipDas() bool {
	if x != nil {
		return x.SkipDas
	}
	return false
}

func (x *StreamingKnowledgeGraphRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type StreamingIntentGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Can be random number or user identifier.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// Required. Robot identifier.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Required. Input audio content format: 16k SR, 1-channel, 100ms chunks.
	InputAudio []byte `protobuf:"bytes,3,opt,name=input_audio,json=inputAudio,proto3" json:"input_audio,omitempty"`
	// Optional. Specify language for intent-service, default is ENGLISH_US
	LanguageCode LanguageCode `protobuf:"varint,4,opt,name=language_code,json=languageCode,proto3,enum=chippergrpc2.LanguageCode" json:"language_code,omitempty"`
	// Optional. ASR only using Bing Speech (for now).
	// Returns text transcript with intent_speech_only. Default is false
	SpeechOnly bool `protobuf:"varint,5,opt,name=speech_only,json=speechOnly,proto3" json:"speech_only,omitempty"`
	// Required. Robot firmware version. Use to choose intent-service version.
	FirmwareVersion string `protobuf:"bytes,6,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	// Optional. Robot mode for games and knowledge-graph. default is VOICE_COMMAND
	Mode RobotMode `protobuf:"varint,7,opt,name=mode,proto3,enum=chippergrpc2.RobotMode" json:"mode,omitempty"`
	// Optional. boot_id for DAS cloud event
	BootId string `protobuf:"bytes,8,opt,name=boot_id,json=bootId,proto3" json:"boot_id,omitempty"`
	// Required. Skip DAS will turn off DAS logging, for GDPR
	SkipDas bool `protobuf:"varint,9,opt,name=skip_das,json=skipDas,proto3" json:"skip_das,omitempty"`
	// Optional. Choose audio encoding, default is PCM 16K
	AudioEncoding AudioEncoding `protobuf:"varint,10,opt,name=audio_encoding,json=audioEncoding,proto3,enum=chippergrpc2.AudioEncoding" json:"audio_encoding,omitempty"`
	// Optional. If using dialogflow, set single_utterance true to use dialogflow-VAD.
	SingleUtterance bool `protobuf:"varint,11,opt,name=single_utterance,json=singleUtterance,proto3" json:"single_utterance,omitempty"`
	// Optional. Default is whatever that is defined on Chipper Cloud.
	IntentService IntentService `protobuf:"varint,12,opt,name=intent_service,json=intentService,proto3,enum=chippergrpc2.IntentService" json:"intent_service,omitempty"`
	// Required for now till TMS is ready. Anki application key
	AppKey string `protobuf:"bytes,13,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	// Optional. Timezone from robot
	Timezone string `protobuf:"bytes,14,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Optional. Set whether to save-audio in Dev
	SaveAudio bool `protobuf:"varint,15,opt,name=save_audio,json=saveAudio,proto3" json:"save_audio,omitempty"`
}

func (x *StreamingIntentGraphRequest) Reset() {
	*x = StreamingIntentGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chipperpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingIntentGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingIntentGraphRequest) ProtoMessage() {}

func (x *StreamingIntentGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chipperpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingIntentGraphRequest.ProtoReflect.Descriptor instead.
func (*StreamingIntentGraphRequest) Descriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{3}
}

func (x *StreamingIntentGraphRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *StreamingIntentGraphRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *StreamingIntentGraphRequest) GetInputAudio() []byte {
	if x != nil {
		return x.InputAudio
	}
	return nil
}

func (x *StreamingIntentGraphRequest) GetLanguageCode() LanguageCode {
	if x != nil {
		return x.LanguageCode
	}
	return LanguageCode_ENGLISH_US
}

func (x *StreamingIntentGraphRequest) GetSpeechOnly() bool {
	if x != nil {
		return x.SpeechOnly
	}
	return false
}

func (x *StreamingIntentGraphRequest) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *StreamingIntentGraphRequest) GetMode() RobotMode {
	if x != nil {
		return x.Mode
	}
	return RobotMode_VOICE_COMMAND
}

func (x *StreamingIntentGraphRequest) GetBootId() string {
	if x != nil {
		return x.BootId
	}
	return ""
}

func (x *StreamingIntentGraphRequest) GetSkipDas() bool {
	if x != nil {
		return x.SkipDas
	}
	return false
}

func (x *StreamingIntentGraphRequest) GetAudioEncoding() AudioEncoding {
	if x != nil {
		return x.AudioEncoding
	}
	return AudioEncoding_LINEAR_PCM
}

func (x *StreamingIntentGraphRequest) GetSingleUtterance() bool {
	if x != nil {
		return x.SingleUtterance
	}
	return false
}

func (x *StreamingIntentGraphRequest) GetIntentService() IntentService {
	if x != nil {
		return x.IntentService
	}
	return IntentService_DEFAULT
}

func (x *StreamingIntentGraphRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *StreamingIntentGraphRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *StreamingIntentGraphRequest) GetSaveAudio() bool {
	if x != nil {
		return x.SaveAudio
	}
	return false
}

type StreamingConnectionCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Can be random number or user identifier.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// Required. Robot identifier.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Required. Fake audio for connection check. 100ms chunks of 16k SR, 1-channel
	InputAudio []byte `protobuf:"bytes,3,opt,name=input_audio,json=inputAudio,proto3" json:"input_audio,omitempty"`
	// Required. Robot firmware version. Use for stats
	FirmwareVersion string `protobuf:"bytes,4,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	// Required for now till TMS is ready. Anki application key
	AppKey string `protobuf:"bytes,5,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	// Required. How many ms of audio total will be sent up
	TotalAudioMs uint32 `protobuf:"varint,6,opt,name=total_audio_ms,json=totalAudioMs,proto3" json:"total_audio_ms,omitempty"`
	// Required. How many ms of audio will be sent per request
	AudioPerRequest uint32 `protobuf:"varint,7,opt,name=audio_per_request,json=audioPerRequest,proto3" json:"audio_per_request,omitempty"`
}

func (x *StreamingConnectionCheckRequest) Reset() {
	*x = StreamingConnectionCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chipperpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingConnectionCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingConnectionCheckRequest) ProtoMessage() {}

func (x *StreamingConnectionCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chipperpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingConnectionCheckRequest.ProtoReflect.Descriptor instead.
func (*StreamingConnectionCheckRequest) Descriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{4}
}

func (x *StreamingConnectionCheckRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *StreamingConnectionCheckRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *StreamingConnectionCheckRequest) GetInputAudio() []byte {
	if x != nil {
		return x.InputAudio
	}
	return nil
}

func (x *StreamingConnectionCheckRequest) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *StreamingConnectionCheckRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *StreamingConnectionCheckRequest) GetTotalAudioMs() uint32 {
	if x != nil {
		return x.TotalAudioMs
	}
	return 0
}

func (x *StreamingConnectionCheckRequest) GetAudioPerRequest() uint32 {
	if x != nil {
		return x.AudioPerRequest
	}
	return 0
}

// Response message from server
type IntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session of the request.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// Robot identifier.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Final response flag. If set to `true`, this will be the last response.
	IsFinal bool `protobuf:"varint,3,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	// Intent result. Only available when is_final is `true`.
	IntentResult *IntentResult `protobuf:"bytes,4,opt,name=intent_result,json=intentResult,proto3" json:"intent_result,omitempty"`
	// Speech result. Available in the interim as speech is transcribed.
	SpeechResult *SpeechResult `protobuf:"bytes,5,opt,name=speech_result,json=speechResult,proto3" json:"speech_result,omitempty"`
	// Optional. Robot mode for games and knowledge-graph. default is VOICE_COMMAND
	Mode RobotMode `protobuf:"varint,6,opt,name=mode,proto3,enum=chippergrpc2.RobotMode" json:"mode,omitempty"`
	// blob-id to audio saved in BlobStore, dev only for debugging.
	AudioId string `protobuf:"bytes,16,opt,name=audio_id,json=audioId,proto3" json:"audio_id,omitempty"`
}

func (x *IntentResponse) Reset() {
	*x = IntentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chipperpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentResponse) ProtoMessage() {}

func (x *IntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chipperpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentResponse.ProtoReflect.Descriptor instead.
func (*IntentResponse) Descriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{5}
}

func (x *IntentResponse) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *IntentResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *IntentResponse) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *IntentResponse) GetIntentResult() *IntentResult {
	if x != nil {
		return x.IntentResult
	}
	return nil
}

func (x *IntentResponse) GetSpeechResult() *SpeechResult {
	if x != nil {
		return x.SpeechResult
	}
	return nil
}

func (x *IntentResponse) GetMode() RobotMode {
	if x != nil {
		return x.Mode
	}
	return RobotMode_VOICE_COMMAND
}

func (x *IntentResponse) GetAudioId() string {
	if x != nil {
		return x.AudioId
	}
	return ""
}

type SpeechResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text from transcribed audio.
	Transcript string `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// Final result flag. If `false`, represents an interim result.
	// If `true`, the ASR will not process any additional audio.
	IsFinal bool `protobuf:"varint,2,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
}

func (x *SpeechResult) Reset() {
	*x = SpeechResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chipperpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechResult) ProtoMessage() {}

func (x *SpeechResult) ProtoReflect() protoreflect.Message {
	mi := &file_chipperpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechResult.ProtoReflect.Descriptor instead.
func (*SpeechResult) Descriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{6}
}

func (x *SpeechResult) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *SpeechResult) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

type IntentResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transcribed text used for matching.
	QueryText string `protobuf:"bytes,1,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	// Matched intent name.
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	// Intent-matching confidence. Value between 0.0 and 1.0 (absolutely certain).
	IntentConfidence float32 `protobuf:"fixed32,3,opt,name=intent_confidence,json=intentConfidence,proto3" json:"intent_confidence,omitempty"`
	// Speech recognition confidence. Higher is better.
	// 0.0 is a sentinel value representing no value set.
	SpeechConfidence float32 `protobuf:"fixed32,4,opt,name=speech_confidence,json=speechConfidence,proto3" json:"speech_confidence,omitempty"`
	// Collection of extracted entities if available.
	// google.protobuf.Struct parameters = 5;
	Parameters map[string]string `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All expected entities are parsed correctly.
	AllParametersPresent bool `protobuf:"varint,6,opt,name=all_parameters_present,json=allParametersPresent,proto3" json:"all_parameters_present,omitempty"`
	// Context flag. If `true`, next request should use same session string
	HasContext bool          `protobuf:"varint,7,opt,name=has_context,json=hasContext,proto3" json:"has_context,omitempty"`
	Service    IntentService `protobuf:"varint,8,opt,name=service,proto3,enum=chippergrpc2.IntentService" json:"service,omitempty"`
	// Embed a knowledge graph response if one is available.  This also ensures backwards compatibility
	// with older robots who won't know whether to look for this or not.
	Kgresponse *KnowledgeGraphResponse `protobuf:"bytes,9,opt,name=kgresponse,proto3" json:"kgresponse,omitempty"`
}

func (x *IntentResult) Reset() {
	*x = IntentResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chipperpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentResult) ProtoMessage() {}

func (x *IntentResult) ProtoReflect() protoreflect.Message {
	mi := &file_chipperpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentResult.ProtoReflect.Descriptor instead.
func (*IntentResult) Descriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{7}
}

func (x *IntentResult) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *IntentResult) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *IntentResult) GetIntentConfidence() float32 {
	if x != nil {
		return x.IntentConfidence
	}
	return 0
}

func (x *IntentResult) GetSpeechConfidence() float32 {
	if x != nil {
		return x.SpeechConfidence
	}
	return 0
}

func (x *IntentResult) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *IntentResult) GetAllParametersPresent() bool {
	if x != nil {
		return x.AllParametersPresent
	}
	return false
}

func (x *IntentResult) GetHasContext() bool {
	if x != nil {
		return x.HasContext
	}
	return false
}

func (x *IntentResult) GetService() IntentService {
	if x != nil {
		return x.Service
	}
	return IntentService_DEFAULT
}

func (x *IntentResult) GetKgresponse() *KnowledgeGraphResponse {
	if x != nil {
		return x.Kgresponse
	}
	return nil
}

type KnowledgeGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session of the request.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// Robot identifier.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Transcribed text
	QueryText string `protobuf:"bytes,3,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	// Response to be spoken
	SpokenText string `protobuf:"bytes,4,opt,name=spoken_text,json=spokenText,proto3" json:"spoken_text,omitempty"`
	// What type of command is matched
	CommandType string `protobuf:"bytes,5,opt,name=command_type,json=commandType,proto3" json:"command_type,omitempty"`
	// which domains were used to match
	DomainsUsed []string `protobuf:"bytes,6,rep,name=domains_used,json=domainsUsed,proto3" json:"domains_used,omitempty"`
	// blob-id to audio saved in BlobStore, dev only for debugging.
	AudioId string `protobuf:"bytes,7,opt,name=audio_id,json=audioId,proto3" json:"audio_id,omitempty"`
}

func (x *KnowledgeGraphResponse) Reset() {
	*x = KnowledgeGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chipperpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnowledgeGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeGraphResponse) ProtoMessage() {}

func (x *KnowledgeGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chipperpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeGraphResponse.ProtoReflect.Descriptor instead.
func (*KnowledgeGraphResponse) Descriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{8}
}

func (x *KnowledgeGraphResponse) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *KnowledgeGraphResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *KnowledgeGraphResponse) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *KnowledgeGraphResponse) GetSpokenText() string {
	if x != nil {
		return x.SpokenText
	}
	return ""
}

func (x *KnowledgeGraphResponse) GetCommandType() string {
	if x != nil {
		return x.CommandType
	}
	return ""
}

func (x *KnowledgeGraphResponse) GetDomainsUsed() []string {
	if x != nil {
		return x.DomainsUsed
	}
	return nil
}

func (x *KnowledgeGraphResponse) GetAudioId() string {
	if x != nil {
		return x.AudioId
	}
	return ""
}

// Response message from server
type IntentGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session of the request.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// Robot identifier.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Shows which response should be expected (Intent or Knowledge Graph)
	ResponseType IntentGraphMode `protobuf:"varint,3,opt,name=response_type,json=responseType,proto3,enum=chippergrpc2.IntentGraphMode" json:"response_type,omitempty"`
	// Final response flag. If set to `true`, this will be the last response.
	IsFinal bool `protobuf:"varint,4,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	// Intent result. Only available when is_final is `true`.
	IntentResult *IntentResult `protobuf:"bytes,5,opt,name=intent_result,json=intentResult,proto3" json:"intent_result,omitempty"`
	// Speech result. Available in the interim as speech is transcribed.
	SpeechResult *SpeechResult `protobuf:"bytes,6,opt,name=speech_result,json=speechResult,proto3" json:"speech_result,omitempty"`
	// Optional. Robot mode for games and knowledge-graph. default is VOICE_COMMAND
	Mode RobotMode `protobuf:"varint,7,opt,name=mode,proto3,enum=chippergrpc2.RobotMode" json:"mode,omitempty"`
	// Transcribed text
	QueryText string `protobuf:"bytes,8,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	// Response to be spoken
	SpokenText string `protobuf:"bytes,9,opt,name=spoken_text,json=spokenText,proto3" json:"spoken_text,omitempty"`
	// What type of command is matched
	CommandType string `protobuf:"bytes,10,opt,name=command_type,json=commandType,proto3" json:"command_type,omitempty"`
	// which domains were used to match
	DomainsUsed []string `protobuf:"bytes,11,rep,name=domains_used,json=domainsUsed,proto3" json:"domains_used,omitempty"`
	// blob-id to audio saved in BlobStore, dev only for debugging.
	AudioId string `protobuf:"bytes,12,opt,name=audio_id,json=audioId,proto3" json:"audio_id,omitempty"`
}

func (x *IntentGraphResponse) Reset() {
	*x = IntentGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chipperpb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentGraphResponse) ProtoMessage() {}

func (x *IntentGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chipperpb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentGraphResponse.ProtoReflect.Descriptor instead.
func (*IntentGraphResponse) Descriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{9}
}

func (x *IntentGraphResponse) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *IntentGraphResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *IntentGraphResponse) GetResponseType() IntentGraphMode {
	if x != nil {
		return x.ResponseType
	}
	return IntentGraphMode_UNKNOWN
}

func (x *IntentGraphResponse) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *IntentGraphResponse) GetIntentResult() *IntentResult {
	if x != nil {
		return x.IntentResult
	}
	return nil
}

func (x *IntentGraphResponse) GetSpeechResult() *SpeechResult {
	if x != nil {
		return x.SpeechResult
	}
	return nil
}

func (x *IntentGraphResponse) GetMode() RobotMode {
	if x != nil {
		return x.Mode
	}
	return RobotMode_VOICE_COMMAND
}

func (x *IntentGraphResponse) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *IntentGraphResponse) GetSpokenText() string {
	if x != nil {
		return x.SpokenText
	}
	return ""
}

func (x *IntentGraphResponse) GetCommandType() string {
	if x != nil {
		return x.CommandType
	}
	return ""
}

func (x *IntentGraphResponse) GetDomainsUsed() []string {
	if x != nil {
		return x.DomainsUsed
	}
	return nil
}

func (x *IntentGraphResponse) GetAudioId() string {
	if x != nil {
		return x.AudioId
	}
	return ""
}

type ConnectionCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the connection
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Number of frames successfully received
	FramesReceived uint32 `protobuf:"varint,2,opt,name=frames_received,json=framesReceived,proto3" json:"frames_received,omitempty"`
}

func (x *ConnectionCheckResponse) Reset() {
	*x = ConnectionCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chipperpb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionCheckResponse) ProtoMessage() {}

func (x *ConnectionCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chipperpb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionCheckResponse.ProtoReflect.Descriptor instead.
func (*ConnectionCheckResponse) Descriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectionCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ConnectionCheckResponse) GetFramesReceived() uint32 {
	if x != nil {
		return x.FramesReceived
	}
	return 0
}

type WeatherLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City  string `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// ISO 2-letter
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *WeatherLocation) Reset() {
	*x = WeatherLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chipperpb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherLocation) ProtoMessage() {}

func (x *WeatherLocation) ProtoReflect() protoreflect.Message {
	mi := &file_chipperpb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherLocation.ProtoReflect.Descriptor instead.
func (*WeatherLocation) Descriptor() ([]byte, []int) {
	return file_chipperpb_proto_rawDescGZIP(), []int{11}
}

func (x *WeatherLocation) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *WeatherLocation) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *WeatherLocation) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

var File_chipperpb_proto protoreflect.FileDescriptor

var file_chipperpb_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x22,
	0xdb, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63,
	0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70,
	0x63, 0x32, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x44, 0x61, 0x73, 0x22, 0xc9, 0x04,
	0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x68,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x44, 0x61, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x74, 0x74,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67,
	0x72, 0x70, 0x63, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61,
	0x76, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x61, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x22, 0xb0, 0x03, 0x0a, 0x1e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x61, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x64, 0x61,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x44, 0x61, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xea, 0x04, 0x0a,
	0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x64, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x44,
	0x61, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61,
	0x76, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x61, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x22, 0x8f, 0x02, 0x0a, 0x1f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x0e,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x0c, 0x53, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0xfe, 0x03, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x44, 0x0a, 0x0a, 0x6b, 0x67, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67,
	0x72, 0x70, 0x63, 0x32, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x6b, 0x67, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x01, 0x0a, 0x16, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x64, 0x22, 0xfb, 0x03, 0x0a, 0x13, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x22, 0x55, 0x0a, 0x0f, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2a, 0x56, 0x0a, 0x0c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e,
	0x47, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e,
	0x47, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x55, 0x4b, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e,
	0x47, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x41, 0x55, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x45,
	0x52, 0x4d, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x45, 0x4e, 0x43, 0x48,
	0x10, 0x04, 0x2a, 0x52, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x42, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x55, 0x49, 0x53, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x4c, 0x45, 0x58, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x55, 0x4e,
	0x44, 0x49, 0x46, 0x59, 0x10, 0x04, 0x2a, 0x2d, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x45, 0x41,
	0x52, 0x5f, 0x50, 0x43, 0x4d, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x47, 0x47, 0x5f, 0x4f,
	0x50, 0x55, 0x53, 0x10, 0x01, 0x2a, 0x28, 0x0a, 0x09, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x2a,
	0x3f, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4b,
	0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x02,
	0x32, 0x84, 0x04, 0x0a, 0x0b, 0x43, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x12, 0x47, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19,
	0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x68, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x63,
	0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63,
	0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x2c, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x29, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x74, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2d, 0x2e,
	0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63,
	0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x64, 0x72,
	0x65, 0x61, 0x6d, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f,
	0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chipperpb_proto_rawDescOnce sync.Once
	file_chipperpb_proto_rawDescData = file_chipperpb_proto_rawDesc
)

func file_chipperpb_proto_rawDescGZIP() []byte {
	file_chipperpb_proto_rawDescOnce.Do(func() {
		file_chipperpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_chipperpb_proto_rawDescData)
	})
	return file_chipperpb_proto_rawDescData
}

var file_chipperpb_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_chipperpb_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_chipperpb_proto_goTypes = []interface{}{
	(LanguageCode)(0),                       // 0: chippergrpc2.LanguageCode
	(IntentService)(0),                      // 1: chippergrpc2.IntentService
	(AudioEncoding)(0),                      // 2: chippergrpc2.AudioEncoding
	(RobotMode)(0),                          // 3: chippergrpc2.RobotMode
	(IntentGraphMode)(0),                    // 4: chippergrpc2.IntentGraphMode
	(*TextRequest)(nil),                     // 5: chippergrpc2.TextRequest
	(*StreamingIntentRequest)(nil),          // 6: chippergrpc2.StreamingIntentRequest
	(*StreamingKnowledgeGraphRequest)(nil),  // 7: chippergrpc2.StreamingKnowledgeGraphRequest
	(*StreamingIntentGraphRequest)(nil),     // 8: chippergrpc2.StreamingIntentGraphRequest
	(*StreamingConnectionCheckRequest)(nil), // 9: chippergrpc2.StreamingConnectionCheckRequest
	(*IntentResponse)(nil),                  // 10: chippergrpc2.IntentResponse
	(*SpeechResult)(nil),                    // 11: chippergrpc2.SpeechResult
	(*IntentResult)(nil),                    // 12: chippergrpc2.IntentResult
	(*KnowledgeGraphResponse)(nil),          // 13: chippergrpc2.KnowledgeGraphResponse
	(*IntentGraphResponse)(nil),             // 14: chippergrpc2.IntentGraphResponse
	(*ConnectionCheckResponse)(nil),         // 15: chippergrpc2.ConnectionCheckResponse
	(*WeatherLocation)(nil),                 // 16: chippergrpc2.WeatherLocation
	nil,                                     // 17: chippergrpc2.IntentResult.ParametersEntry
}
var file_chipperpb_proto_depIdxs = []int32{
	0,  // 0: chippergrpc2.TextRequest.language_code:type_name -> chippergrpc2.LanguageCode
	1,  // 1: chippergrpc2.TextRequest.intent_service:type_name -> chippergrpc2.IntentService
	3,  // 2: chippergrpc2.TextRequest.mode:type_name -> chippergrpc2.RobotMode
	0,  // 3: chippergrpc2.StreamingIntentRequest.language_code:type_name -> chippergrpc2.LanguageCode
	3,  // 4: chippergrpc2.StreamingIntentRequest.mode:type_name -> chippergrpc2.RobotMode
	2,  // 5: chippergrpc2.StreamingIntentRequest.audio_encoding:type_name -> chippergrpc2.AudioEncoding
	1,  // 6: chippergrpc2.StreamingIntentRequest.intent_service:type_name -> chippergrpc2.IntentService
	0,  // 7: chippergrpc2.StreamingKnowledgeGraphRequest.language_code:type_name -> chippergrpc2.LanguageCode
	2,  // 8: chippergrpc2.StreamingKnowledgeGraphRequest.audio_encoding:type_name -> chippergrpc2.AudioEncoding
	0,  // 9: chippergrpc2.StreamingIntentGraphRequest.language_code:type_name -> chippergrpc2.LanguageCode
	3,  // 10: chippergrpc2.StreamingIntentGraphRequest.mode:type_name -> chippergrpc2.RobotMode
	2,  // 11: chippergrpc2.StreamingIntentGraphRequest.audio_encoding:type_name -> chippergrpc2.AudioEncoding
	1,  // 12: chippergrpc2.StreamingIntentGraphRequest.intent_service:type_name -> chippergrpc2.IntentService
	12, // 13: chippergrpc2.IntentResponse.intent_result:type_name -> chippergrpc2.IntentResult
	11, // 14: chippergrpc2.IntentResponse.speech_result:type_name -> chippergrpc2.SpeechResult
	3,  // 15: chippergrpc2.IntentResponse.mode:type_name -> chippergrpc2.RobotMode
	17, // 16: chippergrpc2.IntentResult.parameters:type_name -> chippergrpc2.IntentResult.ParametersEntry
	1,  // 17: chippergrpc2.IntentResult.service:type_name -> chippergrpc2.IntentService
	13, // 18: chippergrpc2.IntentResult.kgresponse:type_name -> chippergrpc2.KnowledgeGraphResponse
	4,  // 19: chippergrpc2.IntentGraphResponse.response_type:type_name -> chippergrpc2.IntentGraphMode
	12, // 20: chippergrpc2.IntentGraphResponse.intent_result:type_name -> chippergrpc2.IntentResult
	11, // 21: chippergrpc2.IntentGraphResponse.speech_result:type_name -> chippergrpc2.SpeechResult
	3,  // 22: chippergrpc2.IntentGraphResponse.mode:type_name -> chippergrpc2.RobotMode
	5,  // 23: chippergrpc2.ChipperGrpc.TextIntent:input_type -> chippergrpc2.TextRequest
	6,  // 24: chippergrpc2.ChipperGrpc.StreamingIntent:input_type -> chippergrpc2.StreamingIntentRequest
	7,  // 25: chippergrpc2.ChipperGrpc.StreamingKnowledgeGraph:input_type -> chippergrpc2.StreamingKnowledgeGraphRequest
	8,  // 26: chippergrpc2.ChipperGrpc.StreamingIntentGraph:input_type -> chippergrpc2.StreamingIntentGraphRequest
	9,  // 27: chippergrpc2.ChipperGrpc.StreamingConnectionCheck:input_type -> chippergrpc2.StreamingConnectionCheckRequest
	10, // 28: chippergrpc2.ChipperGrpc.TextIntent:output_type -> chippergrpc2.IntentResponse
	10, // 29: chippergrpc2.ChipperGrpc.StreamingIntent:output_type -> chippergrpc2.IntentResponse
	13, // 30: chippergrpc2.ChipperGrpc.StreamingKnowledgeGraph:output_type -> chippergrpc2.KnowledgeGraphResponse
	14, // 31: chippergrpc2.ChipperGrpc.StreamingIntentGraph:output_type -> chippergrpc2.IntentGraphResponse
	15, // 32: chippergrpc2.ChipperGrpc.StreamingConnectionCheck:output_type -> chippergrpc2.ConnectionCheckResponse
	28, // [28:33] is the sub-list for method output_type
	23, // [23:28] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_chipperpb_proto_init() }
func file_chipperpb_proto_init() {
	if File_chipperpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chipperpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chipperpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chipperpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingKnowledgeGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chipperpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingIntentGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chipperpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingConnectionCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chipperpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chipperpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeechResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chipperpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntentResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chipperpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnowledgeGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chipperpb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntentGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chipperpb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chipperpb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chipperpb_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chipperpb_proto_goTypes,
		DependencyIndexes: file_chipperpb_proto_depIdxs,
		EnumInfos:         file_chipperpb_proto_enumTypes,
		MessageInfos:      file_chipperpb_proto_msgTypes,
	}.Build()
	File_chipperpb_proto = out.File
	file_chipperpb_proto_rawDesc = nil
	file_chipperpb_proto_goTypes = nil
	file_chipperpb_proto_depIdxs = nil
}
