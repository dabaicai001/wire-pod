// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.4
// source: jdocs.proto

package jdocspb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WriteDocResp_Status int32

const (
	WriteDocResp_ACCEPTED                 WriteDocResp_Status = 0
	WriteDocResp_REJECTED_BAD_DOC_VERSION WriteDocResp_Status = 1 // soft error
	WriteDocResp_REJECTED_BAD_FMT_VERSION WriteDocResp_Status = 2 // soft error
)

// Enum value maps for WriteDocResp_Status.
var (
	WriteDocResp_Status_name = map[int32]string{
		0: "ACCEPTED",
		1: "REJECTED_BAD_DOC_VERSION",
		2: "REJECTED_BAD_FMT_VERSION",
	}
	WriteDocResp_Status_value = map[string]int32{
		"ACCEPTED":                 0,
		"REJECTED_BAD_DOC_VERSION": 1,
		"REJECTED_BAD_FMT_VERSION": 2,
	}
)

func (x WriteDocResp_Status) Enum() *WriteDocResp_Status {
	p := new(WriteDocResp_Status)
	*p = x
	return p
}

func (x WriteDocResp_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WriteDocResp_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_jdocs_proto_enumTypes[0].Descriptor()
}

func (WriteDocResp_Status) Type() protoreflect.EnumType {
	return &file_jdocs_proto_enumTypes[0]
}

func (x WriteDocResp_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WriteDocResp_Status.Descriptor instead.
func (WriteDocResp_Status) EnumDescriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{4, 0}
}

type ReadDocsResp_Status int32

const (
	ReadDocsResp_UNCHANGED ReadDocsResp_Status = 0 // (svc.doc_version == my_doc_version)
	ReadDocsResp_CHANGED   ReadDocsResp_Status = 1 // (svc.doc_version  > my_doc_version) || (svc.doc_version < my_doc_version)
	ReadDocsResp_NOT_FOUND ReadDocsResp_Status = 2 // soft error
)

// Enum value maps for ReadDocsResp_Status.
var (
	ReadDocsResp_Status_name = map[int32]string{
		0: "UNCHANGED",
		1: "CHANGED",
		2: "NOT_FOUND",
	}
	ReadDocsResp_Status_value = map[string]int32{
		"UNCHANGED": 0,
		"CHANGED":   1,
		"NOT_FOUND": 2,
	}
)

func (x ReadDocsResp_Status) Enum() *ReadDocsResp_Status {
	p := new(ReadDocsResp_Status)
	*p = x
	return p
}

func (x ReadDocsResp_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadDocsResp_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_jdocs_proto_enumTypes[1].Descriptor()
}

func (ReadDocsResp_Status) Type() protoreflect.EnumType {
	return &file_jdocs_proto_enumTypes[1]
}

func (x ReadDocsResp_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadDocsResp_Status.Descriptor instead.
func (ReadDocsResp_Status) EnumDescriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{6, 0}
}

type Jdoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocVersion     uint64 `protobuf:"varint,1,opt,name=doc_version,json=docVersion,proto3" json:"doc_version,omitempty"`            // first version = 1; 0 => invalid or doesn't exist
	FmtVersion     uint64 `protobuf:"varint,2,opt,name=fmt_version,json=fmtVersion,proto3" json:"fmt_version,omitempty"`            // first version = 1; 0 => invalid
	ClientMetadata string `protobuf:"bytes,3,opt,name=client_metadata,json=clientMetadata,proto3" json:"client_metadata,omitempty"` // arbitrary client-defined string, eg a data fingerprint (typ "", 32 chars max)
	JsonDoc        string `protobuf:"bytes,4,opt,name=json_doc,json=jsonDoc,proto3" json:"json_doc,omitempty"`                      // must be a valid JSON document
}

func (x *Jdoc) Reset() {
	*x = Jdoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jdoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jdoc) ProtoMessage() {}

func (x *Jdoc) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jdoc.ProtoReflect.Descriptor instead.
func (*Jdoc) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{0}
}

func (x *Jdoc) GetDocVersion() uint64 {
	if x != nil {
		return x.DocVersion
	}
	return 0
}

func (x *Jdoc) GetFmtVersion() uint64 {
	if x != nil {
		return x.FmtVersion
	}
	return 0
}

func (x *Jdoc) GetClientMetadata() string {
	if x != nil {
		return x.ClientMetadata
	}
	return ""
}

func (x *Jdoc) GetJsonDoc() string {
	if x != nil {
		return x.JsonDoc
	}
	return ""
}

type EchoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *EchoReq) Reset() {
	*x = EchoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoReq) ProtoMessage() {}

func (x *EchoReq) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoReq.ProtoReflect.Descriptor instead.
func (*EchoReq) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{1}
}

func (x *EchoReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type EchoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *EchoResp) Reset() {
	*x = EchoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResp) ProtoMessage() {}

func (x *EchoResp) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResp.ProtoReflect.Descriptor instead.
func (*EchoResp) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{2}
}

func (x *EchoResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WriteDocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 64 chars max
	Thing   string `protobuf:"bytes,2,opt,name=thing,proto3" json:"thing,omitempty"`                 // 64 chars max
	DocName string `protobuf:"bytes,3,opt,name=doc_name,json=docName,proto3" json:"doc_name,omitempty"`
	Doc     *Jdoc  `protobuf:"bytes,4,opt,name=doc,proto3" json:"doc,omitempty"` // write rejected if (doc.doc_version != svc.doc_version)
}

func (x *WriteDocReq) Reset() {
	*x = WriteDocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteDocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteDocReq) ProtoMessage() {}

func (x *WriteDocReq) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteDocReq.ProtoReflect.Descriptor instead.
func (*WriteDocReq) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{3}
}

func (x *WriteDocReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WriteDocReq) GetThing() string {
	if x != nil {
		return x.Thing
	}
	return ""
}

func (x *WriteDocReq) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *WriteDocReq) GetDoc() *Jdoc {
	if x != nil {
		return x.Doc
	}
	return nil
}

type WriteDocResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           WriteDocResp_Status `protobuf:"varint,1,opt,name=status,proto3,enum=jdocspb.WriteDocResp_Status" json:"status,omitempty"`
	LatestDocVersion uint64              `protobuf:"varint,2,opt,name=latest_doc_version,json=latestDocVersion,proto3" json:"latest_doc_version,omitempty"` // latest version on service
}

func (x *WriteDocResp) Reset() {
	*x = WriteDocResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteDocResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteDocResp) ProtoMessage() {}

func (x *WriteDocResp) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteDocResp.ProtoReflect.Descriptor instead.
func (*WriteDocResp) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{4}
}

func (x *WriteDocResp) GetStatus() WriteDocResp_Status {
	if x != nil {
		return x.Status
	}
	return WriteDocResp_ACCEPTED
}

func (x *WriteDocResp) GetLatestDocVersion() uint64 {
	if x != nil {
		return x.LatestDocVersion
	}
	return 0
}

type ReadDocsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string              `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Thing  string              `protobuf:"bytes,2,opt,name=thing,proto3" json:"thing,omitempty"`
	Items  []*ReadDocsReq_Item `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ReadDocsReq) Reset() {
	*x = ReadDocsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDocsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDocsReq) ProtoMessage() {}

func (x *ReadDocsReq) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDocsReq.ProtoReflect.Descriptor instead.
func (*ReadDocsReq) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{5}
}

func (x *ReadDocsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReadDocsReq) GetThing() string {
	if x != nil {
		return x.Thing
	}
	return ""
}

func (x *ReadDocsReq) GetItems() []*ReadDocsReq_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type ReadDocsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ReadDocsResp_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ReadDocsResp) Reset() {
	*x = ReadDocsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDocsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDocsResp) ProtoMessage() {}

func (x *ReadDocsResp) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDocsResp.ProtoReflect.Descriptor instead.
func (*ReadDocsResp) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{6}
}

func (x *ReadDocsResp) GetItems() []*ReadDocsResp_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteDocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Thing   string `protobuf:"bytes,2,opt,name=thing,proto3" json:"thing,omitempty"`
	DocName string `protobuf:"bytes,3,opt,name=doc_name,json=docName,proto3" json:"doc_name,omitempty"`
}

func (x *DeleteDocReq) Reset() {
	*x = DeleteDocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDocReq) ProtoMessage() {}

func (x *DeleteDocReq) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDocReq.ProtoReflect.Descriptor instead.
func (*DeleteDocReq) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDocReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteDocReq) GetThing() string {
	if x != nil {
		return x.Thing
	}
	return ""
}

func (x *DeleteDocReq) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

type DeleteDocResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDocResp) Reset() {
	*x = DeleteDocResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDocResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDocResp) ProtoMessage() {}

func (x *DeleteDocResp) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDocResp.ProtoReflect.Descriptor instead.
func (*DeleteDocResp) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{8}
}

type PurgeAccountDocsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"` // concise reason, eg "purged-via-api"
	Notes  string `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`   // free-form text notes, eg "CC requested this via email"
}

func (x *PurgeAccountDocsReq) Reset() {
	*x = PurgeAccountDocsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeAccountDocsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeAccountDocsReq) ProtoMessage() {}

func (x *PurgeAccountDocsReq) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeAccountDocsReq.ProtoReflect.Descriptor instead.
func (*PurgeAccountDocsReq) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{9}
}

func (x *PurgeAccountDocsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PurgeAccountDocsReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PurgeAccountDocsReq) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type PurgeAccountDocsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PurgeAccountDocsResp) Reset() {
	*x = PurgeAccountDocsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeAccountDocsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeAccountDocsResp) ProtoMessage() {}

func (x *PurgeAccountDocsResp) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeAccountDocsResp.ProtoReflect.Descriptor instead.
func (*PurgeAccountDocsResp) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{10}
}

// ViewDoc is a more end-user-friendly version of a JDOCS document, for
// viewing purposes by support or the end user. It contains the JSON
// document itself along with account/thing identifiers, but does not
// include doc_version and other metadata needed by a typical JDOCS
// client.
type ViewDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Thing   string `protobuf:"bytes,2,opt,name=thing,proto3" json:"thing,omitempty"`
	DocName string `protobuf:"bytes,3,opt,name=doc_name,json=docName,proto3" json:"doc_name,omitempty"`
	JsonDoc string `protobuf:"bytes,4,opt,name=json_doc,json=jsonDoc,proto3" json:"json_doc,omitempty"`
}

func (x *ViewDoc) Reset() {
	*x = ViewDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewDoc) ProtoMessage() {}

func (x *ViewDoc) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewDoc.ProtoReflect.Descriptor instead.
func (*ViewDoc) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{11}
}

func (x *ViewDoc) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ViewDoc) GetThing() string {
	if x != nil {
		return x.Thing
	}
	return ""
}

func (x *ViewDoc) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *ViewDoc) GetJsonDoc() string {
	if x != nil {
		return x.JsonDoc
	}
	return ""
}

type ViewAccountDocsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ViewAccountDocsReq) Reset() {
	*x = ViewAccountDocsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewAccountDocsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewAccountDocsReq) ProtoMessage() {}

func (x *ViewAccountDocsReq) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewAccountDocsReq.ProtoReflect.Descriptor instead.
func (*ViewAccountDocsReq) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{12}
}

func (x *ViewAccountDocsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ViewDocsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docs []*ViewDoc `protobuf:"bytes,1,rep,name=docs,proto3" json:"docs,omitempty"`
}

func (x *ViewDocsResp) Reset() {
	*x = ViewDocsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewDocsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewDocsResp) ProtoMessage() {}

func (x *ViewDocsResp) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewDocsResp.ProtoReflect.Descriptor instead.
func (*ViewDocsResp) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{13}
}

func (x *ViewDocsResp) GetDocs() []*ViewDoc {
	if x != nil {
		return x.Docs
	}
	return nil
}

type ReadDocsReq_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocName      string `protobuf:"bytes,1,opt,name=doc_name,json=docName,proto3" json:"doc_name,omitempty"`
	MyDocVersion uint64 `protobuf:"varint,2,opt,name=my_doc_version,json=myDocVersion,proto3" json:"my_doc_version,omitempty"` // 0 => always return latest version
}

func (x *ReadDocsReq_Item) Reset() {
	*x = ReadDocsReq_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDocsReq_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDocsReq_Item) ProtoMessage() {}

func (x *ReadDocsReq_Item) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDocsReq_Item.ProtoReflect.Descriptor instead.
func (*ReadDocsReq_Item) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ReadDocsReq_Item) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *ReadDocsReq_Item) GetMyDocVersion() uint64 {
	if x != nil {
		return x.MyDocVersion
	}
	return 0
}

type ReadDocsResp_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ReadDocsResp_Status `protobuf:"varint,1,opt,name=status,proto3,enum=jdocspb.ReadDocsResp_Status" json:"status,omitempty"`
	Doc    *Jdoc               `protobuf:"bytes,2,opt,name=doc,proto3" json:"doc,omitempty"` // json_doc=="" if (svc.doc_version==my_doc_version)
}

func (x *ReadDocsResp_Item) Reset() {
	*x = ReadDocsResp_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jdocs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDocsResp_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDocsResp_Item) ProtoMessage() {}

func (x *ReadDocsResp_Item) ProtoReflect() protoreflect.Message {
	mi := &file_jdocs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDocsResp_Item.ProtoReflect.Descriptor instead.
func (*ReadDocsResp_Item) Descriptor() ([]byte, []int) {
	return file_jdocs_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ReadDocsResp_Item) GetStatus() ReadDocsResp_Status {
	if x != nil {
		return x.Status
	}
	return ReadDocsResp_UNCHANGED
}

func (x *ReadDocsResp_Item) GetDoc() *Jdoc {
	if x != nil {
		return x.Doc
	}
	return nil
}

var File_jdocs_proto protoreflect.FileDescriptor

var file_jdocs_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6a,
	0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x04, 0x4a, 0x64, 0x6f, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x6f, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x6d, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x6d, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x64, 0x6f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x73, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x22, 0x1d, 0x0a, 0x07, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x1e, 0x0a, 0x08, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x78, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x64,
	0x6f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73,
	0x70, 0x62, 0x2e, 0x4a, 0x64, 0x6f, 0x63, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x22, 0xc6, 0x01, 0x0a,
	0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x6f,
	0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x52, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x46, 0x4d, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0xb6, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x44, 0x6f,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x47, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x79, 0x5f, 0x64,
	0x6f, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x6d, 0x79, 0x44, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd4,
	0x01, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x6f, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x1a, 0x5d, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6a, 0x64, 0x6f, 0x63,
	0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6a,
	0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x4a, 0x64, 0x6f, 0x63, 0x52, 0x03, 0x64, 0x6f, 0x63,
	0x22, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0x58, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x6f, 0x63, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x0f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x5c, 0x0a, 0x13, 0x50, 0x75, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x16,
	0x0a, 0x14, 0x50, 0x75, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6e, 0x0a, 0x07, 0x56, 0x69, 0x65, 0x77, 0x44, 0x6f,
	0x63, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a,
	0x73, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x22, 0x2d, 0x0a, 0x12, 0x56, 0x69, 0x65, 0x77, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x0c, 0x56, 0x69, 0x65, 0x77, 0x44, 0x6f, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x44, 0x6f, 0x63, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x32, 0xe7, 0x03, 0x0a, 0x05,
	0x4a, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x12, 0x14, 0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70,
	0x62, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x31, 0x2f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x2d, 0x64, 0x6f, 0x63, 0x3a, 0x01, 0x2a, 0x12, 0x50, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x44,
	0x6f, 0x63, 0x73, 0x12, 0x14, 0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6a, 0x64, 0x6f, 0x63,
	0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x31, 0x2f, 0x72, 0x65, 0x61,
	0x64, 0x2d, 0x64, 0x6f, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x54, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x12, 0x15, 0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f,
	0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x64, 0x6f, 0x63, 0x3a, 0x01, 0x2a, 0x12,
	0x4f, 0x0a, 0x10, 0x50, 0x75, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x6f, 0x63, 0x73, 0x12, 0x1c, 0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x72, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x45, 0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x6f, 0x63, 0x73, 0x12, 0x1b, 0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x44,
	0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x16, 0x56, 0x69, 0x65, 0x77, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x49,
	0x49, 0x12, 0x1b, 0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x6a, 0x64, 0x6f, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x44, 0x6f, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x64, 0x72, 0x65, 0x61,
	0x6d, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x6a, 0x64,
	0x6f, 0x63, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jdocs_proto_rawDescOnce sync.Once
	file_jdocs_proto_rawDescData = file_jdocs_proto_rawDesc
)

func file_jdocs_proto_rawDescGZIP() []byte {
	file_jdocs_proto_rawDescOnce.Do(func() {
		file_jdocs_proto_rawDescData = protoimpl.X.CompressGZIP(file_jdocs_proto_rawDescData)
	})
	return file_jdocs_proto_rawDescData
}

var file_jdocs_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_jdocs_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_jdocs_proto_goTypes = []interface{}{
	(WriteDocResp_Status)(0),     // 0: jdocspb.WriteDocResp.Status
	(ReadDocsResp_Status)(0),     // 1: jdocspb.ReadDocsResp.Status
	(*Jdoc)(nil),                 // 2: jdocspb.Jdoc
	(*EchoReq)(nil),              // 3: jdocspb.EchoReq
	(*EchoResp)(nil),             // 4: jdocspb.EchoResp
	(*WriteDocReq)(nil),          // 5: jdocspb.WriteDocReq
	(*WriteDocResp)(nil),         // 6: jdocspb.WriteDocResp
	(*ReadDocsReq)(nil),          // 7: jdocspb.ReadDocsReq
	(*ReadDocsResp)(nil),         // 8: jdocspb.ReadDocsResp
	(*DeleteDocReq)(nil),         // 9: jdocspb.DeleteDocReq
	(*DeleteDocResp)(nil),        // 10: jdocspb.DeleteDocResp
	(*PurgeAccountDocsReq)(nil),  // 11: jdocspb.PurgeAccountDocsReq
	(*PurgeAccountDocsResp)(nil), // 12: jdocspb.PurgeAccountDocsResp
	(*ViewDoc)(nil),              // 13: jdocspb.ViewDoc
	(*ViewAccountDocsReq)(nil),   // 14: jdocspb.ViewAccountDocsReq
	(*ViewDocsResp)(nil),         // 15: jdocspb.ViewDocsResp
	(*ReadDocsReq_Item)(nil),     // 16: jdocspb.ReadDocsReq.Item
	(*ReadDocsResp_Item)(nil),    // 17: jdocspb.ReadDocsResp.Item
}
var file_jdocs_proto_depIdxs = []int32{
	2,  // 0: jdocspb.WriteDocReq.doc:type_name -> jdocspb.Jdoc
	0,  // 1: jdocspb.WriteDocResp.status:type_name -> jdocspb.WriteDocResp.Status
	16, // 2: jdocspb.ReadDocsReq.items:type_name -> jdocspb.ReadDocsReq.Item
	17, // 3: jdocspb.ReadDocsResp.items:type_name -> jdocspb.ReadDocsResp.Item
	13, // 4: jdocspb.ViewDocsResp.docs:type_name -> jdocspb.ViewDoc
	1,  // 5: jdocspb.ReadDocsResp.Item.status:type_name -> jdocspb.ReadDocsResp.Status
	2,  // 6: jdocspb.ReadDocsResp.Item.doc:type_name -> jdocspb.Jdoc
	5,  // 7: jdocspb.Jdocs.WriteDoc:input_type -> jdocspb.WriteDocReq
	7,  // 8: jdocspb.Jdocs.ReadDocs:input_type -> jdocspb.ReadDocsReq
	9,  // 9: jdocspb.Jdocs.DeleteDoc:input_type -> jdocspb.DeleteDocReq
	11, // 10: jdocspb.Jdocs.PurgeAccountDocs:input_type -> jdocspb.PurgeAccountDocsReq
	14, // 11: jdocspb.Jdocs.ViewAccountDocs:input_type -> jdocspb.ViewAccountDocsReq
	14, // 12: jdocspb.Jdocs.ViewAccountDocsWithPII:input_type -> jdocspb.ViewAccountDocsReq
	6,  // 13: jdocspb.Jdocs.WriteDoc:output_type -> jdocspb.WriteDocResp
	8,  // 14: jdocspb.Jdocs.ReadDocs:output_type -> jdocspb.ReadDocsResp
	10, // 15: jdocspb.Jdocs.DeleteDoc:output_type -> jdocspb.DeleteDocResp
	12, // 16: jdocspb.Jdocs.PurgeAccountDocs:output_type -> jdocspb.PurgeAccountDocsResp
	15, // 17: jdocspb.Jdocs.ViewAccountDocs:output_type -> jdocspb.ViewDocsResp
	15, // 18: jdocspb.Jdocs.ViewAccountDocsWithPII:output_type -> jdocspb.ViewDocsResp
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_jdocs_proto_init() }
func file_jdocs_proto_init() {
	if File_jdocs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jdocs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jdoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteDocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteDocResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDocsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDocsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDocResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeAccountDocsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeAccountDocsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewAccountDocsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewDocsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDocsReq_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jdocs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDocsResp_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jdocs_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jdocs_proto_goTypes,
		DependencyIndexes: file_jdocs_proto_depIdxs,
		EnumInfos:         file_jdocs_proto_enumTypes,
		MessageInfos:      file_jdocs_proto_msgTypes,
	}.Build()
	File_jdocs_proto = out.File
	file_jdocs_proto_rawDesc = nil
	file_jdocs_proto_goTypes = nil
	file_jdocs_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JdocsClient is the client API for Jdocs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JdocsClient interface {
	// Write = Create or Update one document
	WriteDoc(ctx context.Context, in *WriteDocReq, opts ...grpc.CallOption) (*WriteDocResp, error)
	// Read latest version of one or more documents (single user_id/thing)
	ReadDocs(ctx context.Context, in *ReadDocsReq, opts ...grpc.CallOption) (*ReadDocsResp, error)
	// Delete one document. If the document does not exist, the request
	// quietly succeeds (no error).
	DeleteDoc(ctx context.Context, in *DeleteDocReq, opts ...grpc.CallOption) (*DeleteDocResp, error)
	// Purge all documents associated with an account. Operation is idempotent,
	// ie it is not an error to purge the same account multiple times.
	PurgeAccountDocs(ctx context.Context, in *PurgeAccountDocsReq, opts ...grpc.CallOption) (*PurgeAccountDocsResp, error)
	// Return all documents associated with a user account, for viewing
	// purposes. Purged documents are not returned.
	ViewAccountDocs(ctx context.Context, in *ViewAccountDocsReq, opts ...grpc.CallOption) (*ViewDocsResp, error)
	// Return all documents associated with a user account that contain
	// personal data, for viewing purposes. Purged documents are not returned.
	ViewAccountDocsWithPII(ctx context.Context, in *ViewAccountDocsReq, opts ...grpc.CallOption) (*ViewDocsResp, error)
}

type jdocsClient struct {
	cc grpc.ClientConnInterface
}

func NewJdocsClient(cc grpc.ClientConnInterface) JdocsClient {
	return &jdocsClient{cc}
}

func (c *jdocsClient) WriteDoc(ctx context.Context, in *WriteDocReq, opts ...grpc.CallOption) (*WriteDocResp, error) {
	out := new(WriteDocResp)
	err := c.cc.Invoke(ctx, "/jdocspb.Jdocs/WriteDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jdocsClient) ReadDocs(ctx context.Context, in *ReadDocsReq, opts ...grpc.CallOption) (*ReadDocsResp, error) {
	out := new(ReadDocsResp)
	err := c.cc.Invoke(ctx, "/jdocspb.Jdocs/ReadDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jdocsClient) DeleteDoc(ctx context.Context, in *DeleteDocReq, opts ...grpc.CallOption) (*DeleteDocResp, error) {
	out := new(DeleteDocResp)
	err := c.cc.Invoke(ctx, "/jdocspb.Jdocs/DeleteDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jdocsClient) PurgeAccountDocs(ctx context.Context, in *PurgeAccountDocsReq, opts ...grpc.CallOption) (*PurgeAccountDocsResp, error) {
	out := new(PurgeAccountDocsResp)
	err := c.cc.Invoke(ctx, "/jdocspb.Jdocs/PurgeAccountDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jdocsClient) ViewAccountDocs(ctx context.Context, in *ViewAccountDocsReq, opts ...grpc.CallOption) (*ViewDocsResp, error) {
	out := new(ViewDocsResp)
	err := c.cc.Invoke(ctx, "/jdocspb.Jdocs/ViewAccountDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jdocsClient) ViewAccountDocsWithPII(ctx context.Context, in *ViewAccountDocsReq, opts ...grpc.CallOption) (*ViewDocsResp, error) {
	out := new(ViewDocsResp)
	err := c.cc.Invoke(ctx, "/jdocspb.Jdocs/ViewAccountDocsWithPII", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JdocsServer is the server API for Jdocs service.
type JdocsServer interface {
	// Write = Create or Update one document
	WriteDoc(context.Context, *WriteDocReq) (*WriteDocResp, error)
	// Read latest version of one or more documents (single user_id/thing)
	ReadDocs(context.Context, *ReadDocsReq) (*ReadDocsResp, error)
	// Delete one document. If the document does not exist, the request
	// quietly succeeds (no error).
	DeleteDoc(context.Context, *DeleteDocReq) (*DeleteDocResp, error)
	// Purge all documents associated with an account. Operation is idempotent,
	// ie it is not an error to purge the same account multiple times.
	PurgeAccountDocs(context.Context, *PurgeAccountDocsReq) (*PurgeAccountDocsResp, error)
	// Return all documents associated with a user account, for viewing
	// purposes. Purged documents are not returned.
	ViewAccountDocs(context.Context, *ViewAccountDocsReq) (*ViewDocsResp, error)
	// Return all documents associated with a user account that contain
	// personal data, for viewing purposes. Purged documents are not returned.
	ViewAccountDocsWithPII(context.Context, *ViewAccountDocsReq) (*ViewDocsResp, error)
}

// UnimplementedJdocsServer can be embedded to have forward compatible implementations.
type UnimplementedJdocsServer struct {
}

func (*UnimplementedJdocsServer) WriteDoc(context.Context, *WriteDocReq) (*WriteDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteDoc not implemented")
}
func (*UnimplementedJdocsServer) ReadDocs(context.Context, *ReadDocsReq) (*ReadDocsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDocs not implemented")
}
func (*UnimplementedJdocsServer) DeleteDoc(context.Context, *DeleteDocReq) (*DeleteDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoc not implemented")
}
func (*UnimplementedJdocsServer) PurgeAccountDocs(context.Context, *PurgeAccountDocsReq) (*PurgeAccountDocsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeAccountDocs not implemented")
}
func (*UnimplementedJdocsServer) ViewAccountDocs(context.Context, *ViewAccountDocsReq) (*ViewDocsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAccountDocs not implemented")
}
func (*UnimplementedJdocsServer) ViewAccountDocsWithPII(context.Context, *ViewAccountDocsReq) (*ViewDocsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAccountDocsWithPII not implemented")
}

func RegisterJdocsServer(s *grpc.Server, srv JdocsServer) {
	s.RegisterService(&_Jdocs_serviceDesc, srv)
}

func _Jdocs_WriteDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JdocsServer).WriteDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jdocspb.Jdocs/WriteDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JdocsServer).WriteDoc(ctx, req.(*WriteDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jdocs_ReadDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDocsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JdocsServer).ReadDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jdocspb.Jdocs/ReadDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JdocsServer).ReadDocs(ctx, req.(*ReadDocsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jdocs_DeleteDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JdocsServer).DeleteDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jdocspb.Jdocs/DeleteDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JdocsServer).DeleteDoc(ctx, req.(*DeleteDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jdocs_PurgeAccountDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeAccountDocsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JdocsServer).PurgeAccountDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jdocspb.Jdocs/PurgeAccountDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JdocsServer).PurgeAccountDocs(ctx, req.(*PurgeAccountDocsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jdocs_ViewAccountDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewAccountDocsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JdocsServer).ViewAccountDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jdocspb.Jdocs/ViewAccountDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JdocsServer).ViewAccountDocs(ctx, req.(*ViewAccountDocsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jdocs_ViewAccountDocsWithPII_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewAccountDocsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JdocsServer).ViewAccountDocsWithPII(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jdocspb.Jdocs/ViewAccountDocsWithPII",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JdocsServer).ViewAccountDocsWithPII(ctx, req.(*ViewAccountDocsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jdocs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jdocspb.Jdocs",
	HandlerType: (*JdocsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteDoc",
			Handler:    _Jdocs_WriteDoc_Handler,
		},
		{
			MethodName: "ReadDocs",
			Handler:    _Jdocs_ReadDocs_Handler,
		},
		{
			MethodName: "DeleteDoc",
			Handler:    _Jdocs_DeleteDoc_Handler,
		},
		{
			MethodName: "PurgeAccountDocs",
			Handler:    _Jdocs_PurgeAccountDocs_Handler,
		},
		{
			MethodName: "ViewAccountDocs",
			Handler:    _Jdocs_ViewAccountDocs_Handler,
		},
		{
			MethodName: "ViewAccountDocsWithPII",
			Handler:    _Jdocs_ViewAccountDocsWithPII_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jdocs.proto",
}
